/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/.federation/entry.38029643c390fa88e608275429565ecd.js":
/*!****************************************************************************!*\
  !*** ./node_modules/.federation/entry.38029643c390fa88e608275429565ecd.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var C_Users_Win_11_Desktop_React_MicroFrontend_micro_frontend_dashboard_node_modules_module_federation_webpack_bundler_runtime_dist_index_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@module-federation/webpack-bundler-runtime/dist/index.esm.js */ \"./node_modules/@module-federation/webpack-bundler-runtime/dist/index.esm.js\");\n/* harmony import */ var C_Users_Win_11_Desktop_React_MicroFrontend_micro_frontend_dashboard_node_modules_module_federation_node_dist_src_runtimePlugin_js_runtimePlugin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node_modules/@module-federation/node/dist/src/runtimePlugin.js?runtimePlugin */ \"./node_modules/@module-federation/node/dist/src/runtimePlugin.js?runtimePlugin\");\n/* harmony import */ var C_Users_Win_11_Desktop_React_MicroFrontend_micro_frontend_dashboard_node_modules_module_federation_nextjs_mf_dist_src_plugins_container_runtimePlugin_cjs_runtimePlugin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@module-federation/nextjs-mf/dist/src/plugins/container/runtimePlugin.cjs?runtimePlugin */ \"./node_modules/@module-federation/nextjs-mf/dist/src/plugins/container/runtimePlugin.cjs?runtimePlugin\");\n\n\n\n\nif(!__webpack_require__.federation.runtime){\n\tvar prevFederation = __webpack_require__.federation;\n\t__webpack_require__.federation = {}\n\tfor(var key in C_Users_Win_11_Desktop_React_MicroFrontend_micro_frontend_dashboard_node_modules_module_federation_webpack_bundler_runtime_dist_index_esm_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]){\n\t\t__webpack_require__.federation[key] = C_Users_Win_11_Desktop_React_MicroFrontend_micro_frontend_dashboard_node_modules_module_federation_webpack_bundler_runtime_dist_index_esm_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"][key];\n\t}\n\tfor(var key in prevFederation){\n\t\t__webpack_require__.federation[key] = prevFederation[key];\n\t}\n}\nif(!__webpack_require__.federation.instance){\n\tvar pluginsToAdd = [\n\t\tC_Users_Win_11_Desktop_React_MicroFrontend_micro_frontend_dashboard_node_modules_module_federation_node_dist_src_runtimePlugin_js_runtimePlugin__WEBPACK_IMPORTED_MODULE_1__[\"default\"] ? (C_Users_Win_11_Desktop_React_MicroFrontend_micro_frontend_dashboard_node_modules_module_federation_node_dist_src_runtimePlugin_js_runtimePlugin__WEBPACK_IMPORTED_MODULE_1__[\"default\"][\"default\"] || C_Users_Win_11_Desktop_React_MicroFrontend_micro_frontend_dashboard_node_modules_module_federation_node_dist_src_runtimePlugin_js_runtimePlugin__WEBPACK_IMPORTED_MODULE_1__[\"default\"])() : false,\n\t\tC_Users_Win_11_Desktop_React_MicroFrontend_micro_frontend_dashboard_node_modules_module_federation_nextjs_mf_dist_src_plugins_container_runtimePlugin_cjs_runtimePlugin__WEBPACK_IMPORTED_MODULE_2__[\"default\"] ? (C_Users_Win_11_Desktop_React_MicroFrontend_micro_frontend_dashboard_node_modules_module_federation_nextjs_mf_dist_src_plugins_container_runtimePlugin_cjs_runtimePlugin__WEBPACK_IMPORTED_MODULE_2__[\"default\"][\"default\"] || C_Users_Win_11_Desktop_React_MicroFrontend_micro_frontend_dashboard_node_modules_module_federation_nextjs_mf_dist_src_plugins_container_runtimePlugin_cjs_runtimePlugin__WEBPACK_IMPORTED_MODULE_2__[\"default\"])() : false,\n\t].filter(Boolean);\n\t__webpack_require__.federation.initOptions.plugins = __webpack_require__.federation.initOptions.plugins ? \n\t__webpack_require__.federation.initOptions.plugins.concat(pluginsToAdd) : pluginsToAdd;\n\t__webpack_require__.federation.instance = __webpack_require__.federation.runtime.init(__webpack_require__.federation.initOptions);\n\tif(__webpack_require__.federation.attachShareScopeMap){\n\t\t__webpack_require__.federation.attachShareScopeMap(__webpack_require__)\n\t}\n\tif(__webpack_require__.federation.installInitialConsumes){\n\t\t__webpack_require__.federation.installInitialConsumes()\n\t}\n\n\tif(!__webpack_require__.federation.isMFRemote && __webpack_require__.federation.prefetch){\n\t__webpack_require__.federation.prefetch()\n\t}\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvLmZlZGVyYXRpb24vZW50cnkuMzgwMjk2NDNjMzkwZmE4OGU2MDgyNzU0Mjk1NjVlY2QuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUF3SztBQUNDO0FBQ3dCOztBQUVqTSxJQUFJLG1CQUFtQjtBQUN2QixzQkFBc0IsbUJBQW1CO0FBQ3pDLENBQUMsbUJBQW1CO0FBQ3BCLGdCQUFnQixvTEFBVTtBQUMxQixFQUFFLG1CQUFtQixtQkFBbUIsb0xBQVU7QUFDbEQ7QUFDQTtBQUNBLEVBQUUsbUJBQW1CO0FBQ3JCO0FBQ0E7QUFDQSxJQUFJLG1CQUFtQjtBQUN2QjtBQUNBLEVBQUUsdUxBQVEsSUFBSSxrTUFBZ0IsSUFBSSx1TEFBUTtBQUMxQyxFQUFFLCtNQUFRLElBQUksME5BQWdCLElBQUksK01BQVE7QUFDMUM7QUFDQSxDQUFDLG1CQUFtQixrQ0FBa0MsbUJBQW1CO0FBQ3pFLENBQUMsbUJBQW1CO0FBQ3BCLENBQUMsbUJBQW1CLHVCQUF1QixtQkFBbUIseUJBQXlCLG1CQUFtQjtBQUMxRyxJQUFJLG1CQUFtQjtBQUN2QixFQUFFLG1CQUFtQixnQ0FBZ0MsbUJBQW1CO0FBQ3hFO0FBQ0EsSUFBSSxtQkFBbUI7QUFDdkIsRUFBRSxtQkFBbUI7QUFDckI7O0FBRUEsS0FBSyxtQkFBbUIsMEJBQTBCLG1CQUFtQjtBQUNyRSxDQUFDLG1CQUFtQjtBQUNwQjtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFdpbiAxMVxcRGVza3RvcFxcUmVhY3QtTWljcm9Gcm9udGVuZFxcbWljcm8tZnJvbnRlbmRcXGRhc2hib2FyZFxcbm9kZV9tb2R1bGVzXFwuZmVkZXJhdGlvblxcZW50cnkuMzgwMjk2NDNjMzkwZmE4OGU2MDgyNzU0Mjk1NjVlY2QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZlZGVyYXRpb24gZnJvbSAnQzovVXNlcnMvV2luIDExL0Rlc2t0b3AvUmVhY3QtTWljcm9Gcm9udGVuZC9taWNyby1mcm9udGVuZC9kYXNoYm9hcmQvbm9kZV9tb2R1bGVzL0Btb2R1bGUtZmVkZXJhdGlvbi93ZWJwYWNrLWJ1bmRsZXItcnVudGltZS9kaXN0L2luZGV4LmVzbS5qcyc7XG5pbXBvcnQgcGx1Z2luXzAgZnJvbSAnQzovVXNlcnMvV2luIDExL0Rlc2t0b3AvUmVhY3QtTWljcm9Gcm9udGVuZC9taWNyby1mcm9udGVuZC9kYXNoYm9hcmQvbm9kZV9tb2R1bGVzL0Btb2R1bGUtZmVkZXJhdGlvbi9ub2RlL2Rpc3Qvc3JjL3J1bnRpbWVQbHVnaW4uanM/cnVudGltZVBsdWdpbic7XG5pbXBvcnQgcGx1Z2luXzEgZnJvbSAnQzovVXNlcnMvV2luIDExL0Rlc2t0b3AvUmVhY3QtTWljcm9Gcm9udGVuZC9taWNyby1mcm9udGVuZC9kYXNoYm9hcmQvbm9kZV9tb2R1bGVzL0Btb2R1bGUtZmVkZXJhdGlvbi9uZXh0anMtbWYvZGlzdC9zcmMvcGx1Z2lucy9jb250YWluZXIvcnVudGltZVBsdWdpbi5janM/cnVudGltZVBsdWdpbic7XG5cbmlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLmZlZGVyYXRpb24ucnVudGltZSl7XG5cdHZhciBwcmV2RmVkZXJhdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18uZmVkZXJhdGlvbjtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5mZWRlcmF0aW9uID0ge31cblx0Zm9yKHZhciBrZXkgaW4gZmVkZXJhdGlvbil7XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5mZWRlcmF0aW9uW2tleV0gPSBmZWRlcmF0aW9uW2tleV07XG5cdH1cblx0Zm9yKHZhciBrZXkgaW4gcHJldkZlZGVyYXRpb24pe1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18uZmVkZXJhdGlvbltrZXldID0gcHJldkZlZGVyYXRpb25ba2V5XTtcblx0fVxufVxuaWYoIV9fd2VicGFja19yZXF1aXJlX18uZmVkZXJhdGlvbi5pbnN0YW5jZSl7XG5cdHZhciBwbHVnaW5zVG9BZGQgPSBbXG5cdFx0cGx1Z2luXzAgPyAocGx1Z2luXzAuZGVmYXVsdCB8fCBwbHVnaW5fMCkoKSA6IGZhbHNlLFxuXHRcdHBsdWdpbl8xID8gKHBsdWdpbl8xLmRlZmF1bHQgfHwgcGx1Z2luXzEpKCkgOiBmYWxzZSxcblx0XS5maWx0ZXIoQm9vbGVhbik7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZmVkZXJhdGlvbi5pbml0T3B0aW9ucy5wbHVnaW5zID0gX193ZWJwYWNrX3JlcXVpcmVfXy5mZWRlcmF0aW9uLmluaXRPcHRpb25zLnBsdWdpbnMgPyBcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5mZWRlcmF0aW9uLmluaXRPcHRpb25zLnBsdWdpbnMuY29uY2F0KHBsdWdpbnNUb0FkZCkgOiBwbHVnaW5zVG9BZGQ7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZmVkZXJhdGlvbi5pbnN0YW5jZSA9IF9fd2VicGFja19yZXF1aXJlX18uZmVkZXJhdGlvbi5ydW50aW1lLmluaXQoX193ZWJwYWNrX3JlcXVpcmVfXy5mZWRlcmF0aW9uLmluaXRPcHRpb25zKTtcblx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5mZWRlcmF0aW9uLmF0dGFjaFNoYXJlU2NvcGVNYXApe1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18uZmVkZXJhdGlvbi5hdHRhY2hTaGFyZVNjb3BlTWFwKF9fd2VicGFja19yZXF1aXJlX18pXG5cdH1cblx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5mZWRlcmF0aW9uLmluc3RhbGxJbml0aWFsQ29uc3VtZXMpe1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18uZmVkZXJhdGlvbi5pbnN0YWxsSW5pdGlhbENvbnN1bWVzKClcblx0fVxuXG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLmZlZGVyYXRpb24uaXNNRlJlbW90ZSAmJiBfX3dlYnBhY2tfcmVxdWlyZV9fLmZlZGVyYXRpb24ucHJlZmV0Y2gpe1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmZlZGVyYXRpb24ucHJlZmV0Y2goKVxuXHR9XG59Il0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/.federation/entry.38029643c390fa88e608275429565ecd.js\n");

/***/ }),

/***/ "./node_modules/@module-federation/error-codes/dist/index.esm.mjs":
/*!************************************************************************!*\
  !*** ./node_modules/@module-federation/error-codes/dist/index.esm.mjs ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BUILD_001: () => (/* binding */ BUILD_001),\n/* harmony export */   BUILD_002: () => (/* binding */ BUILD_002),\n/* harmony export */   RUNTIME_001: () => (/* binding */ RUNTIME_001),\n/* harmony export */   RUNTIME_002: () => (/* binding */ RUNTIME_002),\n/* harmony export */   RUNTIME_003: () => (/* binding */ RUNTIME_003),\n/* harmony export */   RUNTIME_004: () => (/* binding */ RUNTIME_004),\n/* harmony export */   RUNTIME_005: () => (/* binding */ RUNTIME_005),\n/* harmony export */   RUNTIME_006: () => (/* binding */ RUNTIME_006),\n/* harmony export */   RUNTIME_007: () => (/* binding */ RUNTIME_007),\n/* harmony export */   RUNTIME_008: () => (/* binding */ RUNTIME_008),\n/* harmony export */   RUNTIME_009: () => (/* binding */ RUNTIME_009),\n/* harmony export */   TYPE_001: () => (/* binding */ TYPE_001),\n/* harmony export */   buildDescMap: () => (/* binding */ buildDescMap),\n/* harmony export */   errorDescMap: () => (/* binding */ errorDescMap),\n/* harmony export */   getShortErrorMsg: () => (/* binding */ getShortErrorMsg),\n/* harmony export */   runtimeDescMap: () => (/* binding */ runtimeDescMap),\n/* harmony export */   typeDescMap: () => (/* binding */ typeDescMap)\n/* harmony export */ });\nconst RUNTIME_001 = 'RUNTIME-001';\nconst RUNTIME_002 = 'RUNTIME-002';\nconst RUNTIME_003 = 'RUNTIME-003';\nconst RUNTIME_004 = 'RUNTIME-004';\nconst RUNTIME_005 = 'RUNTIME-005';\nconst RUNTIME_006 = 'RUNTIME-006';\nconst RUNTIME_007 = 'RUNTIME-007';\nconst RUNTIME_008 = 'RUNTIME-008';\nconst RUNTIME_009 = 'RUNTIME-009';\nconst TYPE_001 = 'TYPE-001';\nconst BUILD_001 = 'BUILD-001';\nconst BUILD_002 = 'BUILD-002';\n\nconst getDocsUrl = (errorCode)=>{\n    const type = errorCode.split('-')[0].toLowerCase();\n    return `View the docs to see how to solve: https://module-federation.io/guide/troubleshooting/${type}/${errorCode}`;\n};\nconst getShortErrorMsg = (errorCode, errorDescMap, args, originalErrorMsg)=>{\n    const msg = [\n        `${[\n            errorDescMap[errorCode]\n        ]} #${errorCode}`\n    ];\n    args && msg.push(`args: ${JSON.stringify(args)}`);\n    msg.push(getDocsUrl(errorCode));\n    originalErrorMsg && msg.push(`Original Error Message:\\n ${originalErrorMsg}`);\n    return msg.join('\\n');\n};\n\nfunction _extends() {\n    _extends = Object.assign || function assign(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\n\nconst runtimeDescMap = {\n    [RUNTIME_001]: 'Failed to get remoteEntry exports.',\n    [RUNTIME_002]: 'The remote entry interface does not contain \"init\"',\n    [RUNTIME_003]: 'Failed to get manifest.',\n    [RUNTIME_004]: 'Failed to locate remote.',\n    [RUNTIME_005]: 'Invalid loadShareSync function call from bundler runtime',\n    [RUNTIME_006]: 'Invalid loadShareSync function call from runtime',\n    [RUNTIME_007]: 'Failed to get remote snapshot.',\n    [RUNTIME_008]: 'Failed to load script resources.',\n    [RUNTIME_009]: 'Please call createInstance first.'\n};\nconst typeDescMap = {\n    [TYPE_001]: 'Failed to generate type declaration. Execute the below cmd to reproduce and fix the error.'\n};\nconst buildDescMap = {\n    [BUILD_001]: 'Failed to find expose module.',\n    [BUILD_002]: 'PublicPath is required in prod mode.'\n};\nconst errorDescMap = _extends({}, runtimeDescMap, typeDescMap, buildDescMap);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1vZHVsZS1mZWRlcmF0aW9uL2Vycm9yLWNvZGVzL2Rpc3QvaW5kZXguZXNtLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0dBQW9HLEtBQUssR0FBRyxVQUFVO0FBQ3RIO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLFdBQVcsR0FBRyxVQUFVO0FBQ3hCO0FBQ0EsOEJBQThCLHFCQUFxQjtBQUNuRDtBQUNBLDhEQUE4RCxpQkFBaUI7QUFDL0U7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQXVCLHNCQUFzQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0M7O0FBRTBNIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFdpbiAxMVxcRGVza3RvcFxcUmVhY3QtTWljcm9Gcm9udGVuZFxcbWljcm8tZnJvbnRlbmRcXGRhc2hib2FyZFxcbm9kZV9tb2R1bGVzXFxAbW9kdWxlLWZlZGVyYXRpb25cXGVycm9yLWNvZGVzXFxkaXN0XFxpbmRleC5lc20ubWpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFJVTlRJTUVfMDAxID0gJ1JVTlRJTUUtMDAxJztcbmNvbnN0IFJVTlRJTUVfMDAyID0gJ1JVTlRJTUUtMDAyJztcbmNvbnN0IFJVTlRJTUVfMDAzID0gJ1JVTlRJTUUtMDAzJztcbmNvbnN0IFJVTlRJTUVfMDA0ID0gJ1JVTlRJTUUtMDA0JztcbmNvbnN0IFJVTlRJTUVfMDA1ID0gJ1JVTlRJTUUtMDA1JztcbmNvbnN0IFJVTlRJTUVfMDA2ID0gJ1JVTlRJTUUtMDA2JztcbmNvbnN0IFJVTlRJTUVfMDA3ID0gJ1JVTlRJTUUtMDA3JztcbmNvbnN0IFJVTlRJTUVfMDA4ID0gJ1JVTlRJTUUtMDA4JztcbmNvbnN0IFJVTlRJTUVfMDA5ID0gJ1JVTlRJTUUtMDA5JztcbmNvbnN0IFRZUEVfMDAxID0gJ1RZUEUtMDAxJztcbmNvbnN0IEJVSUxEXzAwMSA9ICdCVUlMRC0wMDEnO1xuY29uc3QgQlVJTERfMDAyID0gJ0JVSUxELTAwMic7XG5cbmNvbnN0IGdldERvY3NVcmwgPSAoZXJyb3JDb2RlKT0+e1xuICAgIGNvbnN0IHR5cGUgPSBlcnJvckNvZGUuc3BsaXQoJy0nKVswXS50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiBgVmlldyB0aGUgZG9jcyB0byBzZWUgaG93IHRvIHNvbHZlOiBodHRwczovL21vZHVsZS1mZWRlcmF0aW9uLmlvL2d1aWRlL3Ryb3VibGVzaG9vdGluZy8ke3R5cGV9LyR7ZXJyb3JDb2RlfWA7XG59O1xuY29uc3QgZ2V0U2hvcnRFcnJvck1zZyA9IChlcnJvckNvZGUsIGVycm9yRGVzY01hcCwgYXJncywgb3JpZ2luYWxFcnJvck1zZyk9PntcbiAgICBjb25zdCBtc2cgPSBbXG4gICAgICAgIGAke1tcbiAgICAgICAgICAgIGVycm9yRGVzY01hcFtlcnJvckNvZGVdXG4gICAgICAgIF19ICMke2Vycm9yQ29kZX1gXG4gICAgXTtcbiAgICBhcmdzICYmIG1zZy5wdXNoKGBhcmdzOiAke0pTT04uc3RyaW5naWZ5KGFyZ3MpfWApO1xuICAgIG1zZy5wdXNoKGdldERvY3NVcmwoZXJyb3JDb2RlKSk7XG4gICAgb3JpZ2luYWxFcnJvck1zZyAmJiBtc2cucHVzaChgT3JpZ2luYWwgRXJyb3IgTWVzc2FnZTpcXG4gJHtvcmlnaW5hbEVycm9yTXNnfWApO1xuICAgIHJldHVybiBtc2cuam9pbignXFxuJyk7XG59O1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gYXNzaWduKHRhcmdldCkge1xuICAgICAgICBmb3IodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IodmFyIGtleSBpbiBzb3VyY2UpaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9O1xuICAgIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5jb25zdCBydW50aW1lRGVzY01hcCA9IHtcbiAgICBbUlVOVElNRV8wMDFdOiAnRmFpbGVkIHRvIGdldCByZW1vdGVFbnRyeSBleHBvcnRzLicsXG4gICAgW1JVTlRJTUVfMDAyXTogJ1RoZSByZW1vdGUgZW50cnkgaW50ZXJmYWNlIGRvZXMgbm90IGNvbnRhaW4gXCJpbml0XCInLFxuICAgIFtSVU5USU1FXzAwM106ICdGYWlsZWQgdG8gZ2V0IG1hbmlmZXN0LicsXG4gICAgW1JVTlRJTUVfMDA0XTogJ0ZhaWxlZCB0byBsb2NhdGUgcmVtb3RlLicsXG4gICAgW1JVTlRJTUVfMDA1XTogJ0ludmFsaWQgbG9hZFNoYXJlU3luYyBmdW5jdGlvbiBjYWxsIGZyb20gYnVuZGxlciBydW50aW1lJyxcbiAgICBbUlVOVElNRV8wMDZdOiAnSW52YWxpZCBsb2FkU2hhcmVTeW5jIGZ1bmN0aW9uIGNhbGwgZnJvbSBydW50aW1lJyxcbiAgICBbUlVOVElNRV8wMDddOiAnRmFpbGVkIHRvIGdldCByZW1vdGUgc25hcHNob3QuJyxcbiAgICBbUlVOVElNRV8wMDhdOiAnRmFpbGVkIHRvIGxvYWQgc2NyaXB0IHJlc291cmNlcy4nLFxuICAgIFtSVU5USU1FXzAwOV06ICdQbGVhc2UgY2FsbCBjcmVhdGVJbnN0YW5jZSBmaXJzdC4nXG59O1xuY29uc3QgdHlwZURlc2NNYXAgPSB7XG4gICAgW1RZUEVfMDAxXTogJ0ZhaWxlZCB0byBnZW5lcmF0ZSB0eXBlIGRlY2xhcmF0aW9uLiBFeGVjdXRlIHRoZSBiZWxvdyBjbWQgdG8gcmVwcm9kdWNlIGFuZCBmaXggdGhlIGVycm9yLidcbn07XG5jb25zdCBidWlsZERlc2NNYXAgPSB7XG4gICAgW0JVSUxEXzAwMV06ICdGYWlsZWQgdG8gZmluZCBleHBvc2UgbW9kdWxlLicsXG4gICAgW0JVSUxEXzAwMl06ICdQdWJsaWNQYXRoIGlzIHJlcXVpcmVkIGluIHByb2QgbW9kZS4nXG59O1xuY29uc3QgZXJyb3JEZXNjTWFwID0gX2V4dGVuZHMoe30sIHJ1bnRpbWVEZXNjTWFwLCB0eXBlRGVzY01hcCwgYnVpbGREZXNjTWFwKTtcblxuZXhwb3J0IHsgQlVJTERfMDAxLCBCVUlMRF8wMDIsIFJVTlRJTUVfMDAxLCBSVU5USU1FXzAwMiwgUlVOVElNRV8wMDMsIFJVTlRJTUVfMDA0LCBSVU5USU1FXzAwNSwgUlVOVElNRV8wMDYsIFJVTlRJTUVfMDA3LCBSVU5USU1FXzAwOCwgUlVOVElNRV8wMDksIFRZUEVfMDAxLCBidWlsZERlc2NNYXAsIGVycm9yRGVzY01hcCwgZ2V0U2hvcnRFcnJvck1zZywgcnVudGltZURlc2NNYXAsIHR5cGVEZXNjTWFwIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@module-federation/error-codes/dist/index.esm.mjs\n");

/***/ }),

/***/ "./node_modules/@module-federation/nextjs-mf/dist/src/plugins/container/runtimePlugin.cjs?runtimePlugin":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@module-federation/nextjs-mf/dist/src/plugins/container/runtimePlugin.cjs?runtimePlugin ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports[\"default\"] = default_1;\nfunction default_1() {\n    return {\n        name: 'next-internal-plugin',\n        createScript: function (args) {\n            const url = args.url;\n            const attrs = args.attrs;\n            if (typeof window !== 'undefined') {\n                const script = document.createElement('script');\n                script.src = url;\n                script.async = true;\n                delete attrs?.['crossorigin'];\n                return { script: script, timeout: 8000 };\n            }\n            return undefined;\n        },\n        errorLoadRemote: function (args) {\n            const id = args.id;\n            const error = args.error;\n            const from = args.from;\n            //@ts-ignore\n            globalThis.moduleGraphDirty = true;\n            console.error(id, 'offline');\n            const pg = function () {\n                console.error(id, 'offline', error);\n                return null;\n            };\n            pg.getInitialProps = function (ctx) {\n                return {};\n            };\n            let mod;\n            if (from === 'build') {\n                mod = function () {\n                    return {\n                        __esModule: true,\n                        default: pg,\n                        getServerSideProps: function () {\n                            return { props: {} };\n                        },\n                    };\n                };\n            }\n            else {\n                mod = {\n                    default: pg,\n                    getServerSideProps: function () {\n                        return { props: {} };\n                    },\n                };\n            }\n            return mod;\n        },\n        beforeInit: function (args) {\n            if (!globalThis.usedChunks)\n                globalThis.usedChunks = new Set();\n            if (typeof __webpack_require__.j === 'string' &&\n                !__webpack_require__.j.startsWith('webpack')) {\n                return args;\n            }\n            const moduleCache = args.origin.moduleCache;\n            const name = args.origin.name;\n            let gs;\n            try {\n                gs = new Function('return globalThis')();\n            }\n            catch (e) {\n                gs = globalThis; // fallback for browsers without 'unsafe-eval' CSP policy enabled\n            }\n            //@ts-ignore\n            const attachedRemote = gs[name];\n            if (attachedRemote) {\n                moduleCache.set(name, attachedRemote);\n            }\n            return args;\n        },\n        init: function (args) {\n            return args;\n        },\n        beforeRequest: function (args) {\n            const options = args.options;\n            const id = args.id;\n            const remoteName = id.split('/').shift();\n            const remote = options.remotes.find(function (remote) {\n                return remote.name === remoteName;\n            });\n            if (!remote)\n                return args;\n            if (remote && remote.entry && remote.entry.includes('?t=')) {\n                return args;\n            }\n            remote.entry = remote.entry + '?t=' + Date.now();\n            return args;\n        },\n        afterResolve: function (args) {\n            return args;\n        },\n        onLoad: function (args) {\n            const exposeModuleFactory = args.exposeModuleFactory;\n            const exposeModule = args.exposeModule;\n            const id = args.id;\n            const moduleOrFactory = exposeModuleFactory || exposeModule;\n            if (!moduleOrFactory)\n                return args;\n            if (typeof window === 'undefined') {\n                let exposedModuleExports;\n                try {\n                    exposedModuleExports = moduleOrFactory();\n                }\n                catch (e) {\n                    exposedModuleExports = moduleOrFactory;\n                }\n                const handler = {\n                    get: function (target, prop, receiver) {\n                        if (target === exposedModuleExports &&\n                            typeof exposedModuleExports[prop] === 'function') {\n                            return function () {\n                                globalThis.usedChunks.add(id);\n                                //eslint-disable-next-line\n                                return exposedModuleExports[prop].apply(this, arguments);\n                            };\n                        }\n                        const originalMethod = target[prop];\n                        if (typeof originalMethod === 'function') {\n                            const proxiedFunction = function () {\n                                globalThis.usedChunks.add(id);\n                                //eslint-disable-next-line\n                                return originalMethod.apply(this, arguments);\n                            };\n                            Object.keys(originalMethod).forEach(function (prop) {\n                                Object.defineProperty(proxiedFunction, prop, {\n                                    value: originalMethod[prop],\n                                    writable: true,\n                                    enumerable: true,\n                                    configurable: true,\n                                });\n                            });\n                            return proxiedFunction;\n                        }\n                        return Reflect.get(target, prop, receiver);\n                    },\n                };\n                if (typeof exposedModuleExports === 'function') {\n                    exposedModuleExports = new Proxy(exposedModuleExports, handler);\n                    const staticProps = Object.getOwnPropertyNames(exposedModuleExports);\n                    staticProps.forEach(function (prop) {\n                        if (typeof exposedModuleExports[prop] === 'function') {\n                            exposedModuleExports[prop] = new Proxy(exposedModuleExports[prop], handler);\n                        }\n                    });\n                    return function () {\n                        return exposedModuleExports;\n                    };\n                }\n                else {\n                    exposedModuleExports = new Proxy(exposedModuleExports, handler);\n                }\n                return exposedModuleExports;\n            }\n            return args;\n        },\n        loadRemoteSnapshot(args) {\n            const { from, remoteSnapshot, manifestUrl, manifestJson, options } = args;\n            // ensure snapshot is loaded from manifest\n            if (from !== 'manifest' ||\n                !manifestUrl ||\n                !manifestJson ||\n                !('publicPath' in remoteSnapshot)) {\n                return args;\n            }\n            // re-assign publicPath based on remoteEntry location if in browser nextjs remote\n            const { publicPath } = remoteSnapshot;\n            if (options.inBrowser && publicPath.includes('/_next/')) {\n                remoteSnapshot.publicPath = publicPath.substring(0, publicPath.lastIndexOf('/_next/') + 7);\n            }\n            else {\n                const serverPublicPath = manifestUrl.substring(0, manifestUrl.indexOf('mf-manifest.json'));\n                remoteSnapshot.publicPath = serverPublicPath;\n            }\n            if ('publicPath' in manifestJson.metaData) {\n                manifestJson.metaData.publicPath = remoteSnapshot.publicPath;\n            }\n            return args;\n        },\n        resolveShare: function (args) {\n            if (args.pkgName !== 'react' &&\n                args.pkgName !== 'react-dom' &&\n                !args.pkgName.startsWith('next/')) {\n                return args;\n            }\n            const shareScopeMap = args.shareScopeMap;\n            const scope = args.scope;\n            const pkgName = args.pkgName;\n            const version = args.version;\n            const GlobalFederation = args.GlobalFederation;\n            const host = GlobalFederation['__INSTANCES__'][0];\n            if (!host) {\n                return args;\n            }\n            if (!host.options.shared[pkgName]) {\n                return args;\n            }\n            args.resolver = function () {\n                shareScopeMap[scope][pkgName][version] =\n                    host.options.shared[pkgName][0];\n                return shareScopeMap[scope][pkgName][version];\n            };\n            return args;\n        },\n        beforeLoadShare: async function (args) {\n            return args;\n        },\n    };\n}\n//# sourceMappingURL=runtimePlugin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@module-federation/nextjs-mf/dist/src/plugins/container/runtimePlugin.cjs?runtimePlugin\n");

/***/ }),

/***/ "./node_modules/@module-federation/node/dist/src/runtimePlugin.js?runtimePlugin":
/*!**************************************************************************************!*\
  !*** ./node_modules/@module-federation/node/dist/src/runtimePlugin.js?runtimePlugin ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.setupWebpackRequirePatching = exports.setupChunkHandler = exports.setupScriptLoader = exports.deleteChunk = exports.installChunk = exports.loadChunk = exports.resolveUrl = exports.fetchAndRun = exports.loadFromFs = exports.returnFromGlobalInstances = exports.returnFromCache = exports.resolveFile = exports.nodeRuntimeImportCache = void 0;\nexports.importNodeModule = importNodeModule;\nexports[\"default\"] = default_1;\nexports.nodeRuntimeImportCache = new Map();\nfunction importNodeModule(name) {\n    if (!name) {\n        throw new Error('import specifier is required');\n    }\n    // Check cache to prevent infinite recursion\n    if (exports.nodeRuntimeImportCache.has(name)) {\n        return exports.nodeRuntimeImportCache.get(name);\n    }\n    const importModule = new Function('name', `return import(name)`);\n    const promise = importModule(name)\n        .then((res) => res.default)\n        .catch((error) => {\n        console.error(`Error importing module ${name}:`, error);\n        // Remove from cache on error so it can be retried\n        exports.nodeRuntimeImportCache.delete(name);\n        throw error;\n    });\n    // Cache the promise to prevent recursive calls\n    exports.nodeRuntimeImportCache.set(name, promise);\n    return promise;\n}\n// Hoisted utility function to resolve file paths for chunks\nconst resolveFile = (rootOutputDir, chunkId) => {\n    const path = require('path');\n    return path.join(__dirname, rootOutputDir + __webpack_require__.u(chunkId));\n};\nexports.resolveFile = resolveFile;\n// Hoisted utility function to get remote entry from cache\nconst returnFromCache = (remoteName) => {\n    const globalThisVal = new Function('return globalThis')();\n    const federationInstances = globalThisVal['__FEDERATION__']['__INSTANCES__'];\n    for (const instance of federationInstances) {\n        const moduleContainer = instance.moduleCache.get(remoteName);\n        if (moduleContainer?.remoteInfo)\n            return moduleContainer.remoteInfo.entry;\n    }\n    return null;\n};\nexports.returnFromCache = returnFromCache;\n// Hoisted utility function to get remote entry from global instances\nconst returnFromGlobalInstances = (remoteName) => {\n    const globalThisVal = new Function('return globalThis')();\n    const federationInstances = globalThisVal['__FEDERATION__']['__INSTANCES__'];\n    for (const instance of federationInstances) {\n        for (const remote of instance.options.remotes) {\n            if (remote.name === remoteName || remote.alias === remoteName) {\n                console.log('Backup remote entry found:', remote.entry);\n                return remote.entry;\n            }\n        }\n    }\n    return null;\n};\nexports.returnFromGlobalInstances = returnFromGlobalInstances;\n// Hoisted utility function to load chunks from filesystem\nconst loadFromFs = (filename, callback) => {\n    const fs = require('fs');\n    const path = require('path');\n    const vm = require('vm');\n    if (fs.existsSync(filename)) {\n        fs.readFile(filename, 'utf-8', (err, content) => {\n            if (err)\n                return callback(err, null);\n            const chunk = {};\n            try {\n                const script = new vm.Script(`(function(exports, require, __dirname, __filename) {${content}\\n})`, {\n                    filename,\n                    importModuleDynamically: \n                    //@ts-ignore\n                    vm.constants?.USE_MAIN_CONTEXT_DEFAULT_LOADER ?? importNodeModule,\n                });\n                script.runInThisContext()(chunk, require, path.dirname(filename), filename);\n                callback(null, chunk);\n            }\n            catch (e) {\n                console.log(\"'runInThisContext threw'\", e);\n                callback(e, null);\n            }\n        });\n    }\n    else {\n        callback(new Error(`File ${filename} does not exist`), null);\n    }\n};\nexports.loadFromFs = loadFromFs;\n// Hoisted utility function to fetch and execute chunks from remote URLs\nconst fetchAndRun = (url, chunkName, callback, args) => {\n    (typeof fetch === 'undefined'\n        ? importNodeModule('node-fetch').then((mod) => mod.default)\n        : Promise.resolve(fetch))\n        .then((fetchFunction) => {\n        return args.origin.loaderHook.lifecycle.fetch\n            .emit(url.href, {})\n            .then((res) => {\n            if (!res || !(res instanceof Response)) {\n                return fetchFunction(url.href).then((response) => response.text());\n            }\n            return res.text();\n        });\n    })\n        .then((data) => {\n        const chunk = {};\n        try {\n            eval(`(function(exports, require, __dirname, __filename) {${data}\\n})`)(chunk, require, url.pathname.split('/').slice(0, -1).join('/'), chunkName);\n            callback(null, chunk);\n        }\n        catch (e) {\n            callback(e, null);\n        }\n    })\n        .catch((err) => callback(err, null));\n};\nexports.fetchAndRun = fetchAndRun;\n// Hoisted utility function to resolve URLs for chunks\nconst resolveUrl = (remoteName, chunkName) => {\n    try {\n        return new URL(chunkName, __webpack_require__.p);\n    }\n    catch {\n        const entryUrl = (0, exports.returnFromCache)(remoteName) || (0, exports.returnFromGlobalInstances)(remoteName);\n        if (!entryUrl)\n            return null;\n        const url = new URL(entryUrl);\n        const path = require('path');\n        // Extract the directory path from the remote entry URL\n        // e.g., from \"http://url/static/js/remoteEntry.js\" to \"/static/js/\"\n        const urlPath = url.pathname;\n        const lastSlashIndex = urlPath.lastIndexOf('/');\n        const directoryPath = lastSlashIndex >= 0 ? urlPath.substring(0, lastSlashIndex + 1) : '/';\n        // Get rootDir from webpack configuration\n        const rootDir = __webpack_require__.federation.rootOutputDir || '';\n        // Use path.join to combine the paths properly while handling slashes\n        // Convert Windows-style paths to URL-style paths\n        const combinedPath = path\n            .join(directoryPath, rootDir, chunkName)\n            .replace(/\\\\/g, '/');\n        // Create the final URL\n        return new URL(combinedPath, url.origin);\n    }\n};\nexports.resolveUrl = resolveUrl;\n// Hoisted utility function to load chunks based on different strategies\nconst loadChunk = (strategy, chunkId, rootOutputDir, callback, args) => {\n    if (strategy === 'filesystem') {\n        return (0, exports.loadFromFs)((0, exports.resolveFile)(rootOutputDir, chunkId), callback);\n    }\n    const url = (0, exports.resolveUrl)(rootOutputDir, chunkId);\n    if (!url)\n        return callback(null, { modules: {}, ids: [], runtime: null });\n    // Using fetchAndRun directly with args\n    (0, exports.fetchAndRun)(url, chunkId, callback, args);\n};\nexports.loadChunk = loadChunk;\n// Hoisted utility function to install a chunk into webpack\nconst installChunk = (chunk, installedChunks) => {\n    for (const moduleId in chunk.modules) {\n        __webpack_require__.m[moduleId] = chunk.modules[moduleId];\n    }\n    if (chunk.runtime)\n        chunk.runtime(__webpack_require__);\n    for (const chunkId of chunk.ids) {\n        if (installedChunks[chunkId])\n            installedChunks[chunkId][0]();\n        installedChunks[chunkId] = 0;\n    }\n};\nexports.installChunk = installChunk;\n// Hoisted utility function to remove a chunk on fail\nconst deleteChunk = (chunkId, installedChunks) => {\n    delete installedChunks[chunkId];\n    return true;\n};\nexports.deleteChunk = deleteChunk;\n// Hoisted function to set up webpack script loader\nconst setupScriptLoader = () => {\n    __webpack_require__.l = (url, done, key, chunkId) => {\n        if (!key || chunkId)\n            throw new Error(`__webpack_require__.l name is required for ${url}`);\n        __webpack_require__.federation.runtime\n            .loadScriptNode(url, { attrs: { globalName: key } })\n            .then((res) => {\n            const enhancedRemote = __webpack_require__.federation.instance.initRawContainer(key, url, res);\n            new Function('return globalThis')()[key] = enhancedRemote;\n            done(enhancedRemote);\n        })\n            .catch(done);\n    };\n};\nexports.setupScriptLoader = setupScriptLoader;\n// Hoisted function to set up chunk handler\nconst setupChunkHandler = (installedChunks, args) => {\n    return (chunkId, promises) => {\n        let installedChunkData = installedChunks[chunkId];\n        if (installedChunkData !== 0) {\n            if (installedChunkData) {\n                promises.push(installedChunkData[2]);\n            }\n            else {\n                const matcher = __webpack_require__.federation.chunkMatcher\n                    ? __webpack_require__.federation.chunkMatcher(chunkId)\n                    : true;\n                if (matcher) {\n                    const promise = new Promise((resolve, reject) => {\n                        installedChunkData = installedChunks[chunkId] = [resolve, reject];\n                        const fs = typeof process !== 'undefined'\n                            ? require('fs')\n                            : false;\n                        const filename = typeof process !== 'undefined'\n                            ? (0, exports.resolveFile)(__webpack_require__.federation.rootOutputDir || '', chunkId)\n                            : false;\n                        if (fs && fs.existsSync(filename)) {\n                            (0, exports.loadChunk)('filesystem', chunkId, __webpack_require__.federation.rootOutputDir || '', (err, chunk) => {\n                                if (err)\n                                    return (0, exports.deleteChunk)(chunkId, installedChunks) && reject(err);\n                                if (chunk)\n                                    (0, exports.installChunk)(chunk, installedChunks);\n                                resolve(chunk);\n                            }, args);\n                        }\n                        else {\n                            const chunkName = __webpack_require__.u(chunkId);\n                            const loadingStrategy = typeof process === 'undefined' ? 'http-eval' : 'http-vm';\n                            (0, exports.loadChunk)(loadingStrategy, chunkName, __webpack_require__.federation.initOptions.name, (err, chunk) => {\n                                if (err)\n                                    return (0, exports.deleteChunk)(chunkId, installedChunks) && reject(err);\n                                if (chunk)\n                                    (0, exports.installChunk)(chunk, installedChunks);\n                                resolve(chunk);\n                            }, args);\n                        }\n                    });\n                    promises.push((installedChunkData[2] = promise));\n                }\n                else {\n                    installedChunks[chunkId] = 0;\n                }\n            }\n        }\n    };\n};\nexports.setupChunkHandler = setupChunkHandler;\n// Hoisted function to set up webpack require patching\nconst setupWebpackRequirePatching = (handle) => {\n    if (__webpack_require__.f) {\n        if (__webpack_require__.f.require) {\n            console.warn('\\x1b[33m%s\\x1b[0m', 'CAUTION: build target is not set to \"async-node\", attempting to patch additional chunk handlers. This may not work');\n            __webpack_require__.f.require = handle;\n        }\n        if (__webpack_require__.f.readFileVm) {\n            __webpack_require__.f.readFileVm = handle;\n        }\n    }\n};\nexports.setupWebpackRequirePatching = setupWebpackRequirePatching;\nfunction default_1() {\n    return {\n        name: 'node-federation-plugin',\n        beforeInit(args) {\n            // Patch webpack chunk loading handlers\n            (() => {\n                // Create the chunk tracking object\n                const installedChunks = {};\n                // Set up webpack script loader\n                (0, exports.setupScriptLoader)();\n                // Create and set up the chunk handler\n                const handle = (0, exports.setupChunkHandler)(installedChunks, args);\n                // Patch webpack require\n                (0, exports.setupWebpackRequirePatching)(handle);\n            })();\n            return args;\n        },\n    };\n}\n//# sourceMappingURL=runtimePlugin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@module-federation/node/dist/src/runtimePlugin.js?runtimePlugin\n");

/***/ }),

/***/ "./node_modules/@module-federation/runtime-core/dist/index.esm.js":
/*!************************************************************************!*\
  !*** ./node_modules/@module-federation/runtime-core/dist/index.esm.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CurrentGlobal: () => (/* binding */ CurrentGlobal),\n/* harmony export */   Global: () => (/* binding */ Global),\n/* harmony export */   Module: () => (/* binding */ Module),\n/* harmony export */   ModuleFederation: () => (/* binding */ ModuleFederation),\n/* harmony export */   addGlobalSnapshot: () => (/* binding */ addGlobalSnapshot),\n/* harmony export */   assert: () => (/* binding */ assert),\n/* harmony export */   getGlobalFederationConstructor: () => (/* binding */ getGlobalFederationConstructor),\n/* harmony export */   getGlobalSnapshot: () => (/* binding */ getGlobalSnapshot),\n/* harmony export */   getInfoWithoutType: () => (/* binding */ getInfoWithoutType),\n/* harmony export */   getRegisteredShare: () => (/* binding */ getRegisteredShare),\n/* harmony export */   getRemoteEntry: () => (/* binding */ getRemoteEntry),\n/* harmony export */   getRemoteInfo: () => (/* binding */ getRemoteInfo),\n/* harmony export */   helpers: () => (/* binding */ helpers),\n/* harmony export */   isStaticResourcesEqual: () => (/* binding */ isStaticResourcesEqual),\n/* harmony export */   loadScript: () => (/* reexport safe */ _module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.loadScript),\n/* harmony export */   loadScriptNode: () => (/* reexport safe */ _module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.loadScriptNode),\n/* harmony export */   matchRemoteWithNameAndExpose: () => (/* binding */ matchRemoteWithNameAndExpose),\n/* harmony export */   registerGlobalPlugins: () => (/* binding */ registerGlobalPlugins),\n/* harmony export */   resetFederationGlobalInfo: () => (/* binding */ resetFederationGlobalInfo),\n/* harmony export */   safeWrapper: () => (/* binding */ safeWrapper),\n/* harmony export */   satisfy: () => (/* binding */ satisfy),\n/* harmony export */   setGlobalFederationConstructor: () => (/* binding */ setGlobalFederationConstructor),\n/* harmony export */   setGlobalFederationInstance: () => (/* binding */ setGlobalFederationInstance),\n/* harmony export */   types: () => (/* binding */ index)\n/* harmony export */ });\n/* harmony import */ var _polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./polyfills.esm.js */ \"./node_modules/@module-federation/runtime-core/dist/polyfills.esm.js\");\n/* harmony import */ var _module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @module-federation/sdk */ \"./node_modules/@module-federation/sdk/dist/index.esm.js\");\n/* harmony import */ var _module_federation_error_codes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @module-federation/error-codes */ \"./node_modules/@module-federation/error-codes/dist/index.esm.mjs\");\n\n\n\n\n\nconst LOG_CATEGORY = '[ Federation Runtime ]';\n// FIXME: pre-bundle ?\nconst logger = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.createLogger)(LOG_CATEGORY);\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction assert(condition, msg) {\n    if (!condition) {\n        error(msg);\n    }\n}\nfunction error(msg) {\n    if (msg instanceof Error) {\n        // Check if the message already starts with the log category to avoid duplication\n        if (!msg.message.startsWith(LOG_CATEGORY)) {\n            msg.message = `${LOG_CATEGORY}: ${msg.message}`;\n        }\n        throw msg;\n    }\n    throw new Error(`${LOG_CATEGORY}: ${msg}`);\n}\nfunction warn(msg) {\n    if (msg instanceof Error) {\n        // Check if the message already starts with the log category to avoid duplication\n        if (!msg.message.startsWith(LOG_CATEGORY)) {\n            msg.message = `${LOG_CATEGORY}: ${msg.message}`;\n        }\n        logger.warn(msg);\n    } else {\n        logger.warn(msg);\n    }\n}\n\nfunction addUniqueItem(arr, item) {\n    if (arr.findIndex((name)=>name === item) === -1) {\n        arr.push(item);\n    }\n    return arr;\n}\nfunction getFMId(remoteInfo) {\n    if ('version' in remoteInfo && remoteInfo.version) {\n        return `${remoteInfo.name}:${remoteInfo.version}`;\n    } else if ('entry' in remoteInfo && remoteInfo.entry) {\n        return `${remoteInfo.name}:${remoteInfo.entry}`;\n    } else {\n        return `${remoteInfo.name}`;\n    }\n}\nfunction isRemoteInfoWithEntry(remote) {\n    return typeof remote.entry !== 'undefined';\n}\nfunction isPureRemoteEntry(remote) {\n    return !remote.entry.includes('.json');\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function safeWrapper(callback, disableWarn) {\n    try {\n        const res = await callback();\n        return res;\n    } catch (e) {\n        !disableWarn && warn(e);\n        return;\n    }\n}\nfunction isObject(val) {\n    return val && typeof val === 'object';\n}\nconst objectToString = Object.prototype.toString;\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isPlainObject(val) {\n    return objectToString.call(val) === '[object Object]';\n}\nfunction isStaticResourcesEqual(url1, url2) {\n    const REG_EXP = /^(https?:)?\\/\\//i;\n    // Transform url1 and url2 into relative paths\n    const relativeUrl1 = url1.replace(REG_EXP, '').replace(/\\/$/, '');\n    const relativeUrl2 = url2.replace(REG_EXP, '').replace(/\\/$/, '');\n    // Check if the relative paths are identical\n    return relativeUrl1 === relativeUrl2;\n}\nfunction arrayOptions(options) {\n    return Array.isArray(options) ? options : [\n        options\n    ];\n}\nfunction getRemoteEntryInfoFromSnapshot(snapshot) {\n    const defaultRemoteEntryInfo = {\n        url: '',\n        type: 'global',\n        globalName: ''\n    };\n    if ((0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.isBrowserEnv)() || (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.isReactNativeEnv)()) {\n        return 'remoteEntry' in snapshot ? {\n            url: snapshot.remoteEntry,\n            type: snapshot.remoteEntryType,\n            globalName: snapshot.globalName\n        } : defaultRemoteEntryInfo;\n    }\n    if ('ssrRemoteEntry' in snapshot) {\n        return {\n            url: snapshot.ssrRemoteEntry || defaultRemoteEntryInfo.url,\n            type: snapshot.ssrRemoteEntryType || defaultRemoteEntryInfo.type,\n            globalName: snapshot.globalName\n        };\n    }\n    return defaultRemoteEntryInfo;\n}\nconst processModuleAlias = (name, subPath)=>{\n    // @host/ ./button -> @host/button\n    let moduleName;\n    if (name.endsWith('/')) {\n        moduleName = name.slice(0, -1);\n    } else {\n        moduleName = name;\n    }\n    if (subPath.startsWith('.')) {\n        subPath = subPath.slice(1);\n    }\n    moduleName = moduleName + subPath;\n    return moduleName;\n};\n\nconst CurrentGlobal = typeof globalThis === 'object' ? globalThis : window;\nconst nativeGlobal = (()=>{\n    try {\n        // get real window (incase of sandbox)\n        return document.defaultView;\n    } catch (e) {\n        // node env\n        return CurrentGlobal;\n    }\n})();\nconst Global = nativeGlobal;\nfunction definePropertyGlobalVal(target, key, val) {\n    Object.defineProperty(target, key, {\n        value: val,\n        configurable: false,\n        writable: true\n    });\n}\nfunction includeOwnProperty(target, key) {\n    return Object.hasOwnProperty.call(target, key);\n}\n// This section is to prevent encapsulation by certain microfrontend frameworks. Due to reuse policies, sandbox escapes.\n// The sandbox in the microfrontend does not replicate the value of 'configurable'.\n// If there is no loading content on the global object, this section defines the loading object.\nif (!includeOwnProperty(CurrentGlobal, '__GLOBAL_LOADING_REMOTE_ENTRY__')) {\n    definePropertyGlobalVal(CurrentGlobal, '__GLOBAL_LOADING_REMOTE_ENTRY__', {});\n}\nconst globalLoading = CurrentGlobal.__GLOBAL_LOADING_REMOTE_ENTRY__;\nfunction setGlobalDefaultVal(target) {\n    var _target___FEDERATION__, _target___FEDERATION__1, _target___FEDERATION__2, _target___FEDERATION__3, _target___FEDERATION__4, _target___FEDERATION__5;\n    if (includeOwnProperty(target, '__VMOK__') && !includeOwnProperty(target, '__FEDERATION__')) {\n        definePropertyGlobalVal(target, '__FEDERATION__', target.__VMOK__);\n    }\n    if (!includeOwnProperty(target, '__FEDERATION__')) {\n        definePropertyGlobalVal(target, '__FEDERATION__', {\n            __GLOBAL_PLUGIN__: [],\n            __INSTANCES__: [],\n            moduleInfo: {},\n            __SHARE__: {},\n            __MANIFEST_LOADING__: {},\n            __PRELOADED_MAP__: new Map()\n        });\n        definePropertyGlobalVal(target, '__VMOK__', target.__FEDERATION__);\n    }\n    var ___GLOBAL_PLUGIN__;\n    (___GLOBAL_PLUGIN__ = (_target___FEDERATION__ = target.__FEDERATION__).__GLOBAL_PLUGIN__) != null ? ___GLOBAL_PLUGIN__ : _target___FEDERATION__.__GLOBAL_PLUGIN__ = [];\n    var ___INSTANCES__;\n    (___INSTANCES__ = (_target___FEDERATION__1 = target.__FEDERATION__).__INSTANCES__) != null ? ___INSTANCES__ : _target___FEDERATION__1.__INSTANCES__ = [];\n    var _moduleInfo;\n    (_moduleInfo = (_target___FEDERATION__2 = target.__FEDERATION__).moduleInfo) != null ? _moduleInfo : _target___FEDERATION__2.moduleInfo = {};\n    var ___SHARE__;\n    (___SHARE__ = (_target___FEDERATION__3 = target.__FEDERATION__).__SHARE__) != null ? ___SHARE__ : _target___FEDERATION__3.__SHARE__ = {};\n    var ___MANIFEST_LOADING__;\n    (___MANIFEST_LOADING__ = (_target___FEDERATION__4 = target.__FEDERATION__).__MANIFEST_LOADING__) != null ? ___MANIFEST_LOADING__ : _target___FEDERATION__4.__MANIFEST_LOADING__ = {};\n    var ___PRELOADED_MAP__;\n    (___PRELOADED_MAP__ = (_target___FEDERATION__5 = target.__FEDERATION__).__PRELOADED_MAP__) != null ? ___PRELOADED_MAP__ : _target___FEDERATION__5.__PRELOADED_MAP__ = new Map();\n}\nsetGlobalDefaultVal(CurrentGlobal);\nsetGlobalDefaultVal(nativeGlobal);\nfunction resetFederationGlobalInfo() {\n    CurrentGlobal.__FEDERATION__.__GLOBAL_PLUGIN__ = [];\n    CurrentGlobal.__FEDERATION__.__INSTANCES__ = [];\n    CurrentGlobal.__FEDERATION__.moduleInfo = {};\n    CurrentGlobal.__FEDERATION__.__SHARE__ = {};\n    CurrentGlobal.__FEDERATION__.__MANIFEST_LOADING__ = {};\n    Object.keys(globalLoading).forEach((key)=>{\n        delete globalLoading[key];\n    });\n}\nfunction setGlobalFederationInstance(FederationInstance) {\n    CurrentGlobal.__FEDERATION__.__INSTANCES__.push(FederationInstance);\n}\nfunction getGlobalFederationConstructor() {\n    return CurrentGlobal.__FEDERATION__.__DEBUG_CONSTRUCTOR__;\n}\nfunction setGlobalFederationConstructor(FederationConstructor, isDebug = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.isDebugMode)()) {\n    if (isDebug) {\n        CurrentGlobal.__FEDERATION__.__DEBUG_CONSTRUCTOR__ = FederationConstructor;\n        CurrentGlobal.__FEDERATION__.__DEBUG_CONSTRUCTOR_VERSION__ = \"0.18.3\";\n    }\n}\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction getInfoWithoutType(target, key) {\n    if (typeof key === 'string') {\n        const keyRes = target[key];\n        if (keyRes) {\n            return {\n                value: target[key],\n                key: key\n            };\n        } else {\n            const targetKeys = Object.keys(target);\n            for (const targetKey of targetKeys){\n                const [targetTypeOrName, _] = targetKey.split(':');\n                const nKey = `${targetTypeOrName}:${key}`;\n                const typeWithKeyRes = target[nKey];\n                if (typeWithKeyRes) {\n                    return {\n                        value: typeWithKeyRes,\n                        key: nKey\n                    };\n                }\n            }\n            return {\n                value: undefined,\n                key: key\n            };\n        }\n    } else {\n        throw new Error('key must be string');\n    }\n}\nconst getGlobalSnapshot = ()=>nativeGlobal.__FEDERATION__.moduleInfo;\nconst getTargetSnapshotInfoByModuleInfo = (moduleInfo, snapshot)=>{\n    // Check if the remote is included in the hostSnapshot\n    const moduleKey = getFMId(moduleInfo);\n    const getModuleInfo = getInfoWithoutType(snapshot, moduleKey).value;\n    // The remoteSnapshot might not include a version\n    if (getModuleInfo && !getModuleInfo.version && 'version' in moduleInfo && moduleInfo['version']) {\n        getModuleInfo.version = moduleInfo['version'];\n    }\n    if (getModuleInfo) {\n        return getModuleInfo;\n    }\n    // If the remote is not included in the hostSnapshot, deploy a micro app snapshot\n    if ('version' in moduleInfo && moduleInfo['version']) {\n        const { version } = moduleInfo, resModuleInfo = (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__.a)(moduleInfo, [\n            \"version\"\n        ]);\n        const moduleKeyWithoutVersion = getFMId(resModuleInfo);\n        const getModuleInfoWithoutVersion = getInfoWithoutType(nativeGlobal.__FEDERATION__.moduleInfo, moduleKeyWithoutVersion).value;\n        if ((getModuleInfoWithoutVersion == null ? void 0 : getModuleInfoWithoutVersion.version) === version) {\n            return getModuleInfoWithoutVersion;\n        }\n    }\n    return;\n};\nconst getGlobalSnapshotInfoByModuleInfo = (moduleInfo)=>getTargetSnapshotInfoByModuleInfo(moduleInfo, nativeGlobal.__FEDERATION__.moduleInfo);\nconst setGlobalSnapshotInfoByModuleInfo = (remoteInfo, moduleDetailInfo)=>{\n    const moduleKey = getFMId(remoteInfo);\n    nativeGlobal.__FEDERATION__.moduleInfo[moduleKey] = moduleDetailInfo;\n    return nativeGlobal.__FEDERATION__.moduleInfo;\n};\nconst addGlobalSnapshot = (moduleInfos)=>{\n    nativeGlobal.__FEDERATION__.moduleInfo = (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, nativeGlobal.__FEDERATION__.moduleInfo, moduleInfos);\n    return ()=>{\n        const keys = Object.keys(moduleInfos);\n        for (const key of keys){\n            delete nativeGlobal.__FEDERATION__.moduleInfo[key];\n        }\n    };\n};\nconst getRemoteEntryExports = (name, globalName)=>{\n    const remoteEntryKey = globalName || `__FEDERATION_${name}:custom__`;\n    const entryExports = CurrentGlobal[remoteEntryKey];\n    return {\n        remoteEntryKey,\n        entryExports\n    };\n};\n// This function is used to register global plugins.\n// It iterates over the provided plugins and checks if they are already registered.\n// If a plugin is not registered, it is added to the global plugins.\n// If a plugin is already registered, a warning message is logged.\nconst registerGlobalPlugins = (plugins)=>{\n    const { __GLOBAL_PLUGIN__ } = nativeGlobal.__FEDERATION__;\n    plugins.forEach((plugin)=>{\n        if (__GLOBAL_PLUGIN__.findIndex((p)=>p.name === plugin.name) === -1) {\n            __GLOBAL_PLUGIN__.push(plugin);\n        } else {\n            warn(`The plugin ${plugin.name} has been registered.`);\n        }\n    });\n};\nconst getGlobalHostPlugins = ()=>nativeGlobal.__FEDERATION__.__GLOBAL_PLUGIN__;\nconst getPreloaded = (id)=>CurrentGlobal.__FEDERATION__.__PRELOADED_MAP__.get(id);\nconst setPreloaded = (id)=>CurrentGlobal.__FEDERATION__.__PRELOADED_MAP__.set(id, true);\n\nconst DEFAULT_SCOPE = 'default';\nconst DEFAULT_REMOTE_TYPE = 'global';\n\n// fork from https://github.com/originjs/vite-plugin-federation/blob/v1.1.12/packages/lib/src/utils/semver/index.ts\n// those constants are based on https://www.rubydoc.info/gems/semantic_range/3.0.0/SemanticRange#BUILDIDENTIFIER-constant\n// Copyright (c)\n// vite-plugin-federation is licensed under Mulan PSL v2.\n// You can use this software according to the terms and conditions of the Mulan PSL v2.\n// You may obtain a copy of Mulan PSL v2 at:\n//      http://license.coscl.org.cn/MulanPSL2\n// THIS SOFTWARE IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.\n// See the Mulan PSL v2 for more details.\nconst buildIdentifier = '[0-9A-Za-z-]+';\nconst build = `(?:\\\\+(${buildIdentifier}(?:\\\\.${buildIdentifier})*))`;\nconst numericIdentifier = '0|[1-9]\\\\d*';\nconst numericIdentifierLoose = '[0-9]+';\nconst nonNumericIdentifier = '\\\\d*[a-zA-Z-][a-zA-Z0-9-]*';\nconst preReleaseIdentifierLoose = `(?:${numericIdentifierLoose}|${nonNumericIdentifier})`;\nconst preReleaseLoose = `(?:-?(${preReleaseIdentifierLoose}(?:\\\\.${preReleaseIdentifierLoose})*))`;\nconst preReleaseIdentifier = `(?:${numericIdentifier}|${nonNumericIdentifier})`;\nconst preRelease = `(?:-(${preReleaseIdentifier}(?:\\\\.${preReleaseIdentifier})*))`;\nconst xRangeIdentifier = `${numericIdentifier}|x|X|\\\\*`;\nconst xRangePlain = `[v=\\\\s]*(${xRangeIdentifier})(?:\\\\.(${xRangeIdentifier})(?:\\\\.(${xRangeIdentifier})(?:${preRelease})?${build}?)?)?`;\nconst hyphenRange = `^\\\\s*(${xRangePlain})\\\\s+-\\\\s+(${xRangePlain})\\\\s*$`;\nconst mainVersionLoose = `(${numericIdentifierLoose})\\\\.(${numericIdentifierLoose})\\\\.(${numericIdentifierLoose})`;\nconst loosePlain = `[v=\\\\s]*${mainVersionLoose}${preReleaseLoose}?${build}?`;\nconst gtlt = '((?:<|>)?=?)';\nconst comparatorTrim = `(\\\\s*)${gtlt}\\\\s*(${loosePlain}|${xRangePlain})`;\nconst loneTilde = '(?:~>?)';\nconst tildeTrim = `(\\\\s*)${loneTilde}\\\\s+`;\nconst loneCaret = '(?:\\\\^)';\nconst caretTrim = `(\\\\s*)${loneCaret}\\\\s+`;\nconst star = '(<|>)?=?\\\\s*\\\\*';\nconst caret = `^${loneCaret}${xRangePlain}$`;\nconst mainVersion = `(${numericIdentifier})\\\\.(${numericIdentifier})\\\\.(${numericIdentifier})`;\nconst fullPlain = `v?${mainVersion}${preRelease}?${build}?`;\nconst tilde = `^${loneTilde}${xRangePlain}$`;\nconst xRange = `^${gtlt}\\\\s*${xRangePlain}$`;\nconst comparator = `^${gtlt}\\\\s*(${fullPlain})$|^$`;\n// copy from semver package\nconst gte0 = '^\\\\s*>=\\\\s*0.0.0\\\\s*$';\n\n// fork from https://github.com/originjs/vite-plugin-federation/blob/v1.1.12/packages/lib/src/utils/semver/index.ts\n// Copyright (c)\n// vite-plugin-federation is licensed under Mulan PSL v2.\n// You can use this software according to the terms and conditions of the Mulan PSL v2.\n// You may obtain a copy of Mulan PSL v2 at:\n//      http://license.coscl.org.cn/MulanPSL2\n// THIS SOFTWARE IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.\n// See the Mulan PSL v2 for more details.\nfunction parseRegex(source) {\n    return new RegExp(source);\n}\nfunction isXVersion(version) {\n    return !version || version.toLowerCase() === 'x' || version === '*';\n}\nfunction pipe(...fns) {\n    return (x)=>fns.reduce((v, f)=>f(v), x);\n}\nfunction extractComparator(comparatorString) {\n    return comparatorString.match(parseRegex(comparator));\n}\nfunction combineVersion(major, minor, patch, preRelease) {\n    const mainVersion = `${major}.${minor}.${patch}`;\n    if (preRelease) {\n        return `${mainVersion}-${preRelease}`;\n    }\n    return mainVersion;\n}\n\n// fork from https://github.com/originjs/vite-plugin-federation/blob/v1.1.12/packages/lib/src/utils/semver/index.ts\n// Copyright (c)\n// vite-plugin-federation is licensed under Mulan PSL v2.\n// You can use this software according to the terms and conditions of the Mulan PSL v2.\n// You may obtain a copy of Mulan PSL v2 at:\n//      http://license.coscl.org.cn/MulanPSL2\n// THIS SOFTWARE IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.\n// See the Mulan PSL v2 for more details.\nfunction parseHyphen(range) {\n    return range.replace(parseRegex(hyphenRange), (_range, from, fromMajor, fromMinor, fromPatch, _fromPreRelease, _fromBuild, to, toMajor, toMinor, toPatch, toPreRelease)=>{\n        if (isXVersion(fromMajor)) {\n            from = '';\n        } else if (isXVersion(fromMinor)) {\n            from = `>=${fromMajor}.0.0`;\n        } else if (isXVersion(fromPatch)) {\n            from = `>=${fromMajor}.${fromMinor}.0`;\n        } else {\n            from = `>=${from}`;\n        }\n        if (isXVersion(toMajor)) {\n            to = '';\n        } else if (isXVersion(toMinor)) {\n            to = `<${Number(toMajor) + 1}.0.0-0`;\n        } else if (isXVersion(toPatch)) {\n            to = `<${toMajor}.${Number(toMinor) + 1}.0-0`;\n        } else if (toPreRelease) {\n            to = `<=${toMajor}.${toMinor}.${toPatch}-${toPreRelease}`;\n        } else {\n            to = `<=${to}`;\n        }\n        return `${from} ${to}`.trim();\n    });\n}\nfunction parseComparatorTrim(range) {\n    return range.replace(parseRegex(comparatorTrim), '$1$2$3');\n}\nfunction parseTildeTrim(range) {\n    return range.replace(parseRegex(tildeTrim), '$1~');\n}\nfunction parseCaretTrim(range) {\n    return range.replace(parseRegex(caretTrim), '$1^');\n}\nfunction parseCarets(range) {\n    return range.trim().split(/\\s+/).map((rangeVersion)=>rangeVersion.replace(parseRegex(caret), (_, major, minor, patch, preRelease)=>{\n            if (isXVersion(major)) {\n                return '';\n            } else if (isXVersion(minor)) {\n                return `>=${major}.0.0 <${Number(major) + 1}.0.0-0`;\n            } else if (isXVersion(patch)) {\n                if (major === '0') {\n                    return `>=${major}.${minor}.0 <${major}.${Number(minor) + 1}.0-0`;\n                } else {\n                    return `>=${major}.${minor}.0 <${Number(major) + 1}.0.0-0`;\n                }\n            } else if (preRelease) {\n                if (major === '0') {\n                    if (minor === '0') {\n                        return `>=${major}.${minor}.${patch}-${preRelease} <${major}.${minor}.${Number(patch) + 1}-0`;\n                    } else {\n                        return `>=${major}.${minor}.${patch}-${preRelease} <${major}.${Number(minor) + 1}.0-0`;\n                    }\n                } else {\n                    return `>=${major}.${minor}.${patch}-${preRelease} <${Number(major) + 1}.0.0-0`;\n                }\n            } else {\n                if (major === '0') {\n                    if (minor === '0') {\n                        return `>=${major}.${minor}.${patch} <${major}.${minor}.${Number(patch) + 1}-0`;\n                    } else {\n                        return `>=${major}.${minor}.${patch} <${major}.${Number(minor) + 1}.0-0`;\n                    }\n                }\n                return `>=${major}.${minor}.${patch} <${Number(major) + 1}.0.0-0`;\n            }\n        })).join(' ');\n}\nfunction parseTildes(range) {\n    return range.trim().split(/\\s+/).map((rangeVersion)=>rangeVersion.replace(parseRegex(tilde), (_, major, minor, patch, preRelease)=>{\n            if (isXVersion(major)) {\n                return '';\n            } else if (isXVersion(minor)) {\n                return `>=${major}.0.0 <${Number(major) + 1}.0.0-0`;\n            } else if (isXVersion(patch)) {\n                return `>=${major}.${minor}.0 <${major}.${Number(minor) + 1}.0-0`;\n            } else if (preRelease) {\n                return `>=${major}.${minor}.${patch}-${preRelease} <${major}.${Number(minor) + 1}.0-0`;\n            }\n            return `>=${major}.${minor}.${patch} <${major}.${Number(minor) + 1}.0-0`;\n        })).join(' ');\n}\nfunction parseXRanges(range) {\n    return range.split(/\\s+/).map((rangeVersion)=>rangeVersion.trim().replace(parseRegex(xRange), (ret, gtlt, major, minor, patch, preRelease)=>{\n            const isXMajor = isXVersion(major);\n            const isXMinor = isXMajor || isXVersion(minor);\n            const isXPatch = isXMinor || isXVersion(patch);\n            if (gtlt === '=' && isXPatch) {\n                gtlt = '';\n            }\n            preRelease = '';\n            if (isXMajor) {\n                if (gtlt === '>' || gtlt === '<') {\n                    // nothing is allowed\n                    return '<0.0.0-0';\n                } else {\n                    // nothing is forbidden\n                    return '*';\n                }\n            } else if (gtlt && isXPatch) {\n                // replace X with 0\n                if (isXMinor) {\n                    minor = 0;\n                }\n                patch = 0;\n                if (gtlt === '>') {\n                    // >1 => >=2.0.0\n                    // >1.2 => >=1.3.0\n                    gtlt = '>=';\n                    if (isXMinor) {\n                        major = Number(major) + 1;\n                        minor = 0;\n                        patch = 0;\n                    } else {\n                        minor = Number(minor) + 1;\n                        patch = 0;\n                    }\n                } else if (gtlt === '<=') {\n                    // <=0.7.x is actually <0.8.0, since any 0.7.x should pass\n                    // Similarly, <=7.x is actually <8.0.0, etc.\n                    gtlt = '<';\n                    if (isXMinor) {\n                        major = Number(major) + 1;\n                    } else {\n                        minor = Number(minor) + 1;\n                    }\n                }\n                if (gtlt === '<') {\n                    preRelease = '-0';\n                }\n                return `${gtlt + major}.${minor}.${patch}${preRelease}`;\n            } else if (isXMinor) {\n                return `>=${major}.0.0${preRelease} <${Number(major) + 1}.0.0-0`;\n            } else if (isXPatch) {\n                return `>=${major}.${minor}.0${preRelease} <${major}.${Number(minor) + 1}.0-0`;\n            }\n            return ret;\n        })).join(' ');\n}\nfunction parseStar(range) {\n    return range.trim().replace(parseRegex(star), '');\n}\nfunction parseGTE0(comparatorString) {\n    return comparatorString.trim().replace(parseRegex(gte0), '');\n}\n\n// fork from https://github.com/originjs/vite-plugin-federation/blob/v1.1.12/packages/lib/src/utils/semver/index.ts\n// Copyright (c)\n// vite-plugin-federation is licensed under Mulan PSL v2.\n// You can use this software according to the terms and conditions of the Mulan PSL v2.\n// You may obtain a copy of Mulan PSL v2 at:\n//      http://license.coscl.org.cn/MulanPSL2\n// THIS SOFTWARE IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.\n// See the Mulan PSL v2 for more details.\nfunction compareAtom(rangeAtom, versionAtom) {\n    rangeAtom = Number(rangeAtom) || rangeAtom;\n    versionAtom = Number(versionAtom) || versionAtom;\n    if (rangeAtom > versionAtom) {\n        return 1;\n    }\n    if (rangeAtom === versionAtom) {\n        return 0;\n    }\n    return -1;\n}\nfunction comparePreRelease(rangeAtom, versionAtom) {\n    const { preRelease: rangePreRelease } = rangeAtom;\n    const { preRelease: versionPreRelease } = versionAtom;\n    if (rangePreRelease === undefined && Boolean(versionPreRelease)) {\n        return 1;\n    }\n    if (Boolean(rangePreRelease) && versionPreRelease === undefined) {\n        return -1;\n    }\n    if (rangePreRelease === undefined && versionPreRelease === undefined) {\n        return 0;\n    }\n    for(let i = 0, n = rangePreRelease.length; i <= n; i++){\n        const rangeElement = rangePreRelease[i];\n        const versionElement = versionPreRelease[i];\n        if (rangeElement === versionElement) {\n            continue;\n        }\n        if (rangeElement === undefined && versionElement === undefined) {\n            return 0;\n        }\n        if (!rangeElement) {\n            return 1;\n        }\n        if (!versionElement) {\n            return -1;\n        }\n        return compareAtom(rangeElement, versionElement);\n    }\n    return 0;\n}\nfunction compareVersion(rangeAtom, versionAtom) {\n    return compareAtom(rangeAtom.major, versionAtom.major) || compareAtom(rangeAtom.minor, versionAtom.minor) || compareAtom(rangeAtom.patch, versionAtom.patch) || comparePreRelease(rangeAtom, versionAtom);\n}\nfunction eq(rangeAtom, versionAtom) {\n    return rangeAtom.version === versionAtom.version;\n}\nfunction compare(rangeAtom, versionAtom) {\n    switch(rangeAtom.operator){\n        case '':\n        case '=':\n            return eq(rangeAtom, versionAtom);\n        case '>':\n            return compareVersion(rangeAtom, versionAtom) < 0;\n        case '>=':\n            return eq(rangeAtom, versionAtom) || compareVersion(rangeAtom, versionAtom) < 0;\n        case '<':\n            return compareVersion(rangeAtom, versionAtom) > 0;\n        case '<=':\n            return eq(rangeAtom, versionAtom) || compareVersion(rangeAtom, versionAtom) > 0;\n        case undefined:\n            {\n                // mean * or x -> all versions\n                return true;\n            }\n        default:\n            return false;\n    }\n}\n\n// fork from https://github.com/originjs/vite-plugin-federation/blob/v1.1.12/packages/lib/src/utils/semver/index.ts\n// Copyright (c)\n// vite-plugin-federation is licensed under Mulan PSL v2.\n// You can use this software according to the terms and conditions of the Mulan PSL v2.\n// You may obtain a copy of Mulan PSL v2 at:\n//      http://license.coscl.org.cn/MulanPSL2\n// THIS SOFTWARE IS PROVIDED ON AN \"AS IS\" BASIS, WITHOUT WARRANTIES OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT, MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.\n// See the Mulan PSL v2 for more details.\nfunction parseComparatorString(range) {\n    return pipe(// handle caret\n    // ^ --> * (any, kinda silly)\n    // ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0\n    // ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0\n    // ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0\n    // ^1.2.3 --> >=1.2.3 <2.0.0-0\n    // ^1.2.0 --> >=1.2.0 <2.0.0-0\n    parseCarets, // handle tilde\n    // ~, ~> --> * (any, kinda silly)\n    // ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0\n    // ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0\n    // ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0\n    // ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0\n    // ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0\n    parseTildes, parseXRanges, parseStar)(range);\n}\nfunction parseRange(range) {\n    return pipe(// handle hyphenRange\n    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n    parseHyphen, // handle trim comparator\n    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n    parseComparatorTrim, // handle trim tilde\n    // `~ 1.2.3` => `~1.2.3`\n    parseTildeTrim, // handle trim caret\n    // `^ 1.2.3` => `^1.2.3`\n    parseCaretTrim)(range.trim()).split(/\\s+/).join(' ');\n}\nfunction satisfy(version, range) {\n    if (!version) {\n        return false;\n    }\n    // Extract version details once\n    const extractedVersion = extractComparator(version);\n    if (!extractedVersion) {\n        // If the version string is invalid, it can't satisfy any range\n        return false;\n    }\n    const [, versionOperator, , versionMajor, versionMinor, versionPatch, versionPreRelease] = extractedVersion;\n    const versionAtom = {\n        operator: versionOperator,\n        version: combineVersion(versionMajor, versionMinor, versionPatch, versionPreRelease),\n        major: versionMajor,\n        minor: versionMinor,\n        patch: versionPatch,\n        preRelease: versionPreRelease == null ? void 0 : versionPreRelease.split('.')\n    };\n    // Split the range by || to handle OR conditions\n    const orRanges = range.split('||');\n    for (const orRange of orRanges){\n        const trimmedOrRange = orRange.trim();\n        if (!trimmedOrRange) {\n            // An empty range string signifies wildcard *, satisfy any valid version\n            // (We already checked if the version itself is valid)\n            return true;\n        }\n        // Handle simple wildcards explicitly before complex parsing\n        if (trimmedOrRange === '*' || trimmedOrRange === 'x') {\n            return true;\n        }\n        try {\n            // Apply existing parsing logic to the current OR sub-range\n            const parsedSubRange = parseRange(trimmedOrRange); // Handles hyphens, trims etc.\n            // Check if the result of initial parsing is empty, which can happen\n            // for some wildcard cases handled by parseRange/parseComparatorString.\n            // E.g. `parseStar` used in `parseComparatorString` returns ''.\n            if (!parsedSubRange.trim()) {\n                // If parsing results in empty string, treat as wildcard match\n                return true;\n            }\n            const parsedComparatorString = parsedSubRange.split(' ').map((rangeVersion)=>parseComparatorString(rangeVersion)) // Expands ^, ~\n            .join(' ');\n            // Check again if the comparator string became empty after specific parsing like ^ or ~\n            if (!parsedComparatorString.trim()) {\n                return true;\n            }\n            // Split the sub-range by space for implicit AND conditions\n            const comparators = parsedComparatorString.split(/\\s+/).map((comparator)=>parseGTE0(comparator))// Filter out empty strings that might result from multiple spaces\n            .filter(Boolean);\n            // If a sub-range becomes empty after parsing (e.g., invalid characters),\n            // it cannot be satisfied. This check might be redundant now but kept for safety.\n            if (comparators.length === 0) {\n                continue;\n            }\n            let subRangeSatisfied = true;\n            for (const comparator of comparators){\n                const extractedComparator = extractComparator(comparator);\n                // If any part of the AND sub-range is invalid, the sub-range is not satisfied\n                if (!extractedComparator) {\n                    subRangeSatisfied = false;\n                    break;\n                }\n                const [, rangeOperator, , rangeMajor, rangeMinor, rangePatch, rangePreRelease] = extractedComparator;\n                const rangeAtom = {\n                    operator: rangeOperator,\n                    version: combineVersion(rangeMajor, rangeMinor, rangePatch, rangePreRelease),\n                    major: rangeMajor,\n                    minor: rangeMinor,\n                    patch: rangePatch,\n                    preRelease: rangePreRelease == null ? void 0 : rangePreRelease.split('.')\n                };\n                // Check if the version satisfies this specific comparator in the AND chain\n                if (!compare(rangeAtom, versionAtom)) {\n                    subRangeSatisfied = false; // This part of the AND condition failed\n                    break; // No need to check further comparators in this sub-range\n                }\n            }\n            // If all AND conditions within this OR sub-range were met, the overall range is satisfied\n            if (subRangeSatisfied) {\n                return true;\n            }\n        } catch (e) {\n            // Log error and treat this sub-range as unsatisfied\n            console.error(`[semver] Error processing range part \"${trimmedOrRange}\":`, e);\n            continue;\n        }\n    }\n    // If none of the OR sub-ranges were satisfied\n    return false;\n}\n\nfunction formatShare(shareArgs, from, name, shareStrategy) {\n    let get;\n    if ('get' in shareArgs) {\n        // eslint-disable-next-line prefer-destructuring\n        get = shareArgs.get;\n    } else if ('lib' in shareArgs) {\n        get = ()=>Promise.resolve(shareArgs.lib);\n    } else {\n        get = ()=>Promise.resolve(()=>{\n                throw new Error(`Can not get shared '${name}'!`);\n            });\n    }\n    var _shareArgs_version, _shareArgs_scope, _shareArgs_strategy;\n    return (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n        deps: [],\n        useIn: [],\n        from,\n        loading: null\n    }, shareArgs, {\n        shareConfig: (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n            requiredVersion: `^${shareArgs.version}`,\n            singleton: false,\n            eager: false,\n            strictVersion: false\n        }, shareArgs.shareConfig),\n        get,\n        loaded: (shareArgs == null ? void 0 : shareArgs.loaded) || 'lib' in shareArgs ? true : undefined,\n        version: (_shareArgs_version = shareArgs.version) != null ? _shareArgs_version : '0',\n        scope: Array.isArray(shareArgs.scope) ? shareArgs.scope : [\n            (_shareArgs_scope = shareArgs.scope) != null ? _shareArgs_scope : 'default'\n        ],\n        strategy: ((_shareArgs_strategy = shareArgs.strategy) != null ? _shareArgs_strategy : shareStrategy) || 'version-first'\n    });\n}\nfunction formatShareConfigs(globalOptions, userOptions) {\n    const shareArgs = userOptions.shared || {};\n    const from = userOptions.name;\n    const shareInfos = Object.keys(shareArgs).reduce((res, pkgName)=>{\n        const arrayShareArgs = arrayOptions(shareArgs[pkgName]);\n        res[pkgName] = res[pkgName] || [];\n        arrayShareArgs.forEach((shareConfig)=>{\n            res[pkgName].push(formatShare(shareConfig, from, pkgName, userOptions.shareStrategy));\n        });\n        return res;\n    }, {});\n    const shared = (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, globalOptions.shared);\n    Object.keys(shareInfos).forEach((shareKey)=>{\n        if (!shared[shareKey]) {\n            shared[shareKey] = shareInfos[shareKey];\n        } else {\n            shareInfos[shareKey].forEach((newUserSharedOptions)=>{\n                const isSameVersion = shared[shareKey].find((sharedVal)=>sharedVal.version === newUserSharedOptions.version);\n                if (!isSameVersion) {\n                    shared[shareKey].push(newUserSharedOptions);\n                }\n            });\n        }\n    });\n    return {\n        shared,\n        shareInfos\n    };\n}\nfunction versionLt(a, b) {\n    const transformInvalidVersion = (version)=>{\n        const isNumberVersion = !Number.isNaN(Number(version));\n        if (isNumberVersion) {\n            const splitArr = version.split('.');\n            let validVersion = version;\n            for(let i = 0; i < 3 - splitArr.length; i++){\n                validVersion += '.0';\n            }\n            return validVersion;\n        }\n        return version;\n    };\n    if (satisfy(transformInvalidVersion(a), `<=${transformInvalidVersion(b)}`)) {\n        return true;\n    } else {\n        return false;\n    }\n}\nconst findVersion = (shareVersionMap, cb)=>{\n    const callback = cb || function(prev, cur) {\n        return versionLt(prev, cur);\n    };\n    return Object.keys(shareVersionMap).reduce((prev, cur)=>{\n        if (!prev) {\n            return cur;\n        }\n        if (callback(prev, cur)) {\n            return cur;\n        }\n        // default version is '0' https://github.com/webpack/webpack/blob/main/lib/sharing/ProvideSharedModule.js#L136\n        if (prev === '0') {\n            return cur;\n        }\n        return prev;\n    }, 0);\n};\nconst isLoaded = (shared)=>{\n    return Boolean(shared.loaded) || typeof shared.lib === 'function';\n};\nconst isLoading = (shared)=>{\n    return Boolean(shared.loading);\n};\nfunction findSingletonVersionOrderByVersion(shareScopeMap, scope, pkgName) {\n    const versions = shareScopeMap[scope][pkgName];\n    const callback = function(prev, cur) {\n        return !isLoaded(versions[prev]) && versionLt(prev, cur);\n    };\n    return findVersion(shareScopeMap[scope][pkgName], callback);\n}\nfunction findSingletonVersionOrderByLoaded(shareScopeMap, scope, pkgName) {\n    const versions = shareScopeMap[scope][pkgName];\n    const callback = function(prev, cur) {\n        const isLoadingOrLoaded = (shared)=>{\n            return isLoaded(shared) || isLoading(shared);\n        };\n        if (isLoadingOrLoaded(versions[cur])) {\n            if (isLoadingOrLoaded(versions[prev])) {\n                return Boolean(versionLt(prev, cur));\n            } else {\n                return true;\n            }\n        }\n        if (isLoadingOrLoaded(versions[prev])) {\n            return false;\n        }\n        return versionLt(prev, cur);\n    };\n    return findVersion(shareScopeMap[scope][pkgName], callback);\n}\nfunction getFindShareFunction(strategy) {\n    if (strategy === 'loaded-first') {\n        return findSingletonVersionOrderByLoaded;\n    }\n    return findSingletonVersionOrderByVersion;\n}\nfunction getRegisteredShare(localShareScopeMap, pkgName, shareInfo, resolveShare) {\n    if (!localShareScopeMap) {\n        return;\n    }\n    const { shareConfig, scope = DEFAULT_SCOPE, strategy } = shareInfo;\n    const scopes = Array.isArray(scope) ? scope : [\n        scope\n    ];\n    for (const sc of scopes){\n        if (shareConfig && localShareScopeMap[sc] && localShareScopeMap[sc][pkgName]) {\n            const { requiredVersion } = shareConfig;\n            const findShareFunction = getFindShareFunction(strategy);\n            const maxOrSingletonVersion = findShareFunction(localShareScopeMap, sc, pkgName);\n            //@ts-ignore\n            const defaultResolver = ()=>{\n                if (shareConfig.singleton) {\n                    if (typeof requiredVersion === 'string' && !satisfy(maxOrSingletonVersion, requiredVersion)) {\n                        const msg = `Version ${maxOrSingletonVersion} from ${maxOrSingletonVersion && localShareScopeMap[sc][pkgName][maxOrSingletonVersion].from} of shared singleton module ${pkgName} does not satisfy the requirement of ${shareInfo.from} which needs ${requiredVersion})`;\n                        if (shareConfig.strictVersion) {\n                            error(msg);\n                        } else {\n                            warn(msg);\n                        }\n                    }\n                    return localShareScopeMap[sc][pkgName][maxOrSingletonVersion];\n                } else {\n                    if (requiredVersion === false || requiredVersion === '*') {\n                        return localShareScopeMap[sc][pkgName][maxOrSingletonVersion];\n                    }\n                    if (satisfy(maxOrSingletonVersion, requiredVersion)) {\n                        return localShareScopeMap[sc][pkgName][maxOrSingletonVersion];\n                    }\n                    for (const [versionKey, versionValue] of Object.entries(localShareScopeMap[sc][pkgName])){\n                        if (satisfy(versionKey, requiredVersion)) {\n                            return versionValue;\n                        }\n                    }\n                }\n            };\n            const params = {\n                shareScopeMap: localShareScopeMap,\n                scope: sc,\n                pkgName,\n                version: maxOrSingletonVersion,\n                GlobalFederation: Global.__FEDERATION__,\n                resolver: defaultResolver\n            };\n            const resolveShared = resolveShare.emit(params) || params;\n            return resolveShared.resolver();\n        }\n    }\n}\nfunction getGlobalShareScope() {\n    return Global.__FEDERATION__.__SHARE__;\n}\nfunction getTargetSharedOptions(options) {\n    const { pkgName, extraOptions, shareInfos } = options;\n    const defaultResolver = (sharedOptions)=>{\n        if (!sharedOptions) {\n            return undefined;\n        }\n        const shareVersionMap = {};\n        sharedOptions.forEach((shared)=>{\n            shareVersionMap[shared.version] = shared;\n        });\n        const callback = function(prev, cur) {\n            return !isLoaded(shareVersionMap[prev]) && versionLt(prev, cur);\n        };\n        const maxVersion = findVersion(shareVersionMap, callback);\n        return shareVersionMap[maxVersion];\n    };\n    var _extraOptions_resolver;\n    const resolver = (_extraOptions_resolver = extraOptions == null ? void 0 : extraOptions.resolver) != null ? _extraOptions_resolver : defaultResolver;\n    return Object.assign({}, resolver(shareInfos[pkgName]), extraOptions == null ? void 0 : extraOptions.customShareInfo);\n}\n\nfunction getBuilderId() {\n    //@ts-ignore\n    return  true ? \"dashboard:0.1.0\" : 0;\n}\n\n// Function to match a remote with its name and expose\n// id: pkgName(@federation/app1) + expose(button) = @federation/app1/button\n// id: alias(app1) + expose(button) = app1/button\n// id: alias(app1/utils) + expose(loadash/sort) = app1/utils/loadash/sort\nfunction matchRemoteWithNameAndExpose(remotes, id) {\n    for (const remote of remotes){\n        // match pkgName\n        const isNameMatched = id.startsWith(remote.name);\n        let expose = id.replace(remote.name, '');\n        if (isNameMatched) {\n            if (expose.startsWith('/')) {\n                const pkgNameOrAlias = remote.name;\n                expose = `.${expose}`;\n                return {\n                    pkgNameOrAlias,\n                    expose,\n                    remote\n                };\n            } else if (expose === '') {\n                return {\n                    pkgNameOrAlias: remote.name,\n                    expose: '.',\n                    remote\n                };\n            }\n        }\n        // match alias\n        const isAliasMatched = remote.alias && id.startsWith(remote.alias);\n        let exposeWithAlias = remote.alias && id.replace(remote.alias, '');\n        if (remote.alias && isAliasMatched) {\n            if (exposeWithAlias && exposeWithAlias.startsWith('/')) {\n                const pkgNameOrAlias = remote.alias;\n                exposeWithAlias = `.${exposeWithAlias}`;\n                return {\n                    pkgNameOrAlias,\n                    expose: exposeWithAlias,\n                    remote\n                };\n            } else if (exposeWithAlias === '') {\n                return {\n                    pkgNameOrAlias: remote.alias,\n                    expose: '.',\n                    remote\n                };\n            }\n        }\n    }\n    return;\n}\n// Function to match a remote with its name or alias\nfunction matchRemote(remotes, nameOrAlias) {\n    for (const remote of remotes){\n        const isNameMatched = nameOrAlias === remote.name;\n        if (isNameMatched) {\n            return remote;\n        }\n        const isAliasMatched = remote.alias && nameOrAlias === remote.alias;\n        if (isAliasMatched) {\n            return remote;\n        }\n    }\n    return;\n}\n\nfunction registerPlugins(plugins, instance) {\n    const globalPlugins = getGlobalHostPlugins();\n    const hookInstances = [\n        instance.hooks,\n        instance.remoteHandler.hooks,\n        instance.sharedHandler.hooks,\n        instance.snapshotHandler.hooks,\n        instance.loaderHook,\n        instance.bridgeHook\n    ];\n    // Incorporate global plugins\n    if (globalPlugins.length > 0) {\n        globalPlugins.forEach((plugin)=>{\n            if (plugins == null ? void 0 : plugins.find((item)=>item.name !== plugin.name)) {\n                plugins.push(plugin);\n            }\n        });\n    }\n    if (plugins && plugins.length > 0) {\n        plugins.forEach((plugin)=>{\n            hookInstances.forEach((hookInstance)=>{\n                hookInstance.applyPlugin(plugin, instance);\n            });\n        });\n    }\n    return plugins;\n}\n\nconst importCallback = '.then(callbacks[0]).catch(callbacks[1])';\nasync function loadEsmEntry({ entry, remoteEntryExports }) {\n    return new Promise((resolve, reject)=>{\n        try {\n            if (!remoteEntryExports) {\n                if (typeof FEDERATION_ALLOW_NEW_FUNCTION !== 'undefined') {\n                    new Function('callbacks', `import(\"${entry}\")${importCallback}`)([\n                        resolve,\n                        reject\n                    ]);\n                } else {\n                    import(/* webpackIgnore: true */ /* @vite-ignore */ entry).then(resolve).catch(reject);\n                }\n            } else {\n                resolve(remoteEntryExports);\n            }\n        } catch (e) {\n            reject(e);\n        }\n    });\n}\nasync function loadSystemJsEntry({ entry, remoteEntryExports }) {\n    return new Promise((resolve, reject)=>{\n        try {\n            if (!remoteEntryExports) {\n                //@ts-ignore\n                if (false) // removed by dead control flow\n{} else {\n                    new Function('callbacks', `System.import(\"${entry}\")${importCallback}`)([\n                        resolve,\n                        reject\n                    ]);\n                }\n            } else {\n                resolve(remoteEntryExports);\n            }\n        } catch (e) {\n            reject(e);\n        }\n    });\n}\nfunction handleRemoteEntryLoaded(name, globalName, entry) {\n    const { remoteEntryKey, entryExports } = getRemoteEntryExports(name, globalName);\n    assert(entryExports, (0,_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_2__.getShortErrorMsg)(_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_2__.RUNTIME_001, _module_federation_error_codes__WEBPACK_IMPORTED_MODULE_2__.runtimeDescMap, {\n        remoteName: name,\n        remoteEntryUrl: entry,\n        remoteEntryKey\n    }));\n    return entryExports;\n}\nasync function loadEntryScript({ name, globalName, entry, loaderHook }) {\n    const { entryExports: remoteEntryExports } = getRemoteEntryExports(name, globalName);\n    if (remoteEntryExports) {\n        return remoteEntryExports;\n    }\n    return (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.loadScript)(entry, {\n        attrs: {},\n        createScriptHook: (url, attrs)=>{\n            const res = loaderHook.lifecycle.createScript.emit({\n                url,\n                attrs\n            });\n            if (!res) return;\n            if (res instanceof HTMLScriptElement) {\n                return res;\n            }\n            if ('script' in res || 'timeout' in res) {\n                return res;\n            }\n            return;\n        }\n    }).then(()=>{\n        return handleRemoteEntryLoaded(name, globalName, entry);\n    }).catch((e)=>{\n        assert(undefined, (0,_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_2__.getShortErrorMsg)(_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_2__.RUNTIME_008, _module_federation_error_codes__WEBPACK_IMPORTED_MODULE_2__.runtimeDescMap, {\n            remoteName: name,\n            resourceUrl: entry\n        }));\n        throw e;\n    });\n}\nasync function loadEntryDom({ remoteInfo, remoteEntryExports, loaderHook }) {\n    const { entry, entryGlobalName: globalName, name, type } = remoteInfo;\n    switch(type){\n        case 'esm':\n        case 'module':\n            return loadEsmEntry({\n                entry,\n                remoteEntryExports\n            });\n        case 'system':\n            return loadSystemJsEntry({\n                entry,\n                remoteEntryExports\n            });\n        default:\n            return loadEntryScript({\n                entry,\n                globalName,\n                name,\n                loaderHook\n            });\n    }\n}\nasync function loadEntryNode({ remoteInfo, loaderHook }) {\n    const { entry, entryGlobalName: globalName, name, type } = remoteInfo;\n    const { entryExports: remoteEntryExports } = getRemoteEntryExports(name, globalName);\n    if (remoteEntryExports) {\n        return remoteEntryExports;\n    }\n    return (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.loadScriptNode)(entry, {\n        attrs: {\n            name,\n            globalName,\n            type\n        },\n        loaderHook: {\n            createScriptHook: (url, attrs = {})=>{\n                const res = loaderHook.lifecycle.createScript.emit({\n                    url,\n                    attrs\n                });\n                if (!res) return;\n                if ('url' in res) {\n                    return res;\n                }\n                return;\n            }\n        }\n    }).then(()=>{\n        return handleRemoteEntryLoaded(name, globalName, entry);\n    }).catch((e)=>{\n        throw e;\n    });\n}\nfunction getRemoteEntryUniqueKey(remoteInfo) {\n    const { entry, name } = remoteInfo;\n    return (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.composeKeyWithSeparator)(name, entry);\n}\nasync function getRemoteEntry({ origin, remoteEntryExports, remoteInfo }) {\n    const uniqueKey = getRemoteEntryUniqueKey(remoteInfo);\n    if (remoteEntryExports) {\n        return remoteEntryExports;\n    }\n    if (!globalLoading[uniqueKey]) {\n        const loadEntryHook = origin.remoteHandler.hooks.lifecycle.loadEntry;\n        const loaderHook = origin.loaderHook;\n        globalLoading[uniqueKey] = loadEntryHook.emit({\n            loaderHook,\n            remoteInfo,\n            remoteEntryExports\n        }).then((res)=>{\n            if (res) {\n                return res;\n            }\n            // Use ENV_TARGET if defined, otherwise fallback to isBrowserEnv, must keep this\n            const isWebEnvironment = typeof ENV_TARGET !== 'undefined' ? ENV_TARGET === 'web' : (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.isBrowserEnv)();\n            return isWebEnvironment ? loadEntryDom({\n                remoteInfo,\n                remoteEntryExports,\n                loaderHook\n            }) : loadEntryNode({\n                remoteInfo,\n                loaderHook\n            });\n        });\n    }\n    return globalLoading[uniqueKey];\n}\nfunction getRemoteInfo(remote) {\n    return (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, remote, {\n        entry: 'entry' in remote ? remote.entry : '',\n        type: remote.type || DEFAULT_REMOTE_TYPE,\n        entryGlobalName: remote.entryGlobalName || remote.name,\n        shareScope: remote.shareScope || DEFAULT_SCOPE\n    });\n}\n\nfunction defaultPreloadArgs(preloadConfig) {\n    return (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n        resourceCategory: 'sync',\n        share: true,\n        depsRemote: true,\n        prefetchInterface: false\n    }, preloadConfig);\n}\nfunction formatPreloadArgs(remotes, preloadArgs) {\n    return preloadArgs.map((args)=>{\n        const remoteInfo = matchRemote(remotes, args.nameOrAlias);\n        assert(remoteInfo, `Unable to preload ${args.nameOrAlias} as it is not included in ${!remoteInfo && (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.safeToString)({\n            remoteInfo,\n            remotes\n        })}`);\n        return {\n            remote: remoteInfo,\n            preloadConfig: defaultPreloadArgs(args)\n        };\n    });\n}\nfunction normalizePreloadExposes(exposes) {\n    if (!exposes) {\n        return [];\n    }\n    return exposes.map((expose)=>{\n        if (expose === '.') {\n            return expose;\n        }\n        if (expose.startsWith('./')) {\n            return expose.replace('./', '');\n        }\n        return expose;\n    });\n}\nfunction preloadAssets(remoteInfo, host, assets, // It is used to distinguish preload from load remote parallel loading\nuseLinkPreload = true) {\n    const { cssAssets, jsAssetsWithoutEntry, entryAssets } = assets;\n    if (host.options.inBrowser) {\n        entryAssets.forEach((asset)=>{\n            const { moduleInfo } = asset;\n            const module = host.moduleCache.get(remoteInfo.name);\n            if (module) {\n                getRemoteEntry({\n                    origin: host,\n                    remoteInfo: moduleInfo,\n                    remoteEntryExports: module.remoteEntryExports\n                });\n            } else {\n                getRemoteEntry({\n                    origin: host,\n                    remoteInfo: moduleInfo,\n                    remoteEntryExports: undefined\n                });\n            }\n        });\n        if (useLinkPreload) {\n            const defaultAttrs = {\n                rel: 'preload',\n                as: 'style'\n            };\n            cssAssets.forEach((cssUrl)=>{\n                const { link: cssEl, needAttach } = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.createLink)({\n                    url: cssUrl,\n                    cb: ()=>{\n                    // noop\n                    },\n                    attrs: defaultAttrs,\n                    createLinkHook: (url, attrs)=>{\n                        const res = host.loaderHook.lifecycle.createLink.emit({\n                            url,\n                            attrs\n                        });\n                        if (res instanceof HTMLLinkElement) {\n                            return res;\n                        }\n                        return;\n                    }\n                });\n                needAttach && document.head.appendChild(cssEl);\n            });\n        } else {\n            const defaultAttrs = {\n                rel: 'stylesheet',\n                type: 'text/css'\n            };\n            cssAssets.forEach((cssUrl)=>{\n                const { link: cssEl, needAttach } = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.createLink)({\n                    url: cssUrl,\n                    cb: ()=>{\n                    // noop\n                    },\n                    attrs: defaultAttrs,\n                    createLinkHook: (url, attrs)=>{\n                        const res = host.loaderHook.lifecycle.createLink.emit({\n                            url,\n                            attrs\n                        });\n                        if (res instanceof HTMLLinkElement) {\n                            return res;\n                        }\n                        return;\n                    },\n                    needDeleteLink: false\n                });\n                needAttach && document.head.appendChild(cssEl);\n            });\n        }\n        if (useLinkPreload) {\n            const defaultAttrs = {\n                rel: 'preload',\n                as: 'script'\n            };\n            jsAssetsWithoutEntry.forEach((jsUrl)=>{\n                const { link: linkEl, needAttach } = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.createLink)({\n                    url: jsUrl,\n                    cb: ()=>{\n                    // noop\n                    },\n                    attrs: defaultAttrs,\n                    createLinkHook: (url, attrs)=>{\n                        const res = host.loaderHook.lifecycle.createLink.emit({\n                            url,\n                            attrs\n                        });\n                        if (res instanceof HTMLLinkElement) {\n                            return res;\n                        }\n                        return;\n                    }\n                });\n                needAttach && document.head.appendChild(linkEl);\n            });\n        } else {\n            const defaultAttrs = {\n                fetchpriority: 'high',\n                type: (remoteInfo == null ? void 0 : remoteInfo.type) === 'module' ? 'module' : 'text/javascript'\n            };\n            jsAssetsWithoutEntry.forEach((jsUrl)=>{\n                const { script: scriptEl, needAttach } = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.createScript)({\n                    url: jsUrl,\n                    cb: ()=>{\n                    // noop\n                    },\n                    attrs: defaultAttrs,\n                    createScriptHook: (url, attrs)=>{\n                        const res = host.loaderHook.lifecycle.createScript.emit({\n                            url,\n                            attrs\n                        });\n                        if (res instanceof HTMLScriptElement) {\n                            return res;\n                        }\n                        return;\n                    },\n                    needDeleteScript: true\n                });\n                needAttach && document.head.appendChild(scriptEl);\n            });\n        }\n    }\n}\n\nconst ShareUtils = {\n    getRegisteredShare,\n    getGlobalShareScope\n};\nconst GlobalUtils = {\n    Global,\n    nativeGlobal,\n    resetFederationGlobalInfo,\n    setGlobalFederationInstance,\n    getGlobalFederationConstructor,\n    setGlobalFederationConstructor,\n    getInfoWithoutType,\n    getGlobalSnapshot,\n    getTargetSnapshotInfoByModuleInfo,\n    getGlobalSnapshotInfoByModuleInfo,\n    setGlobalSnapshotInfoByModuleInfo,\n    addGlobalSnapshot,\n    getRemoteEntryExports,\n    registerGlobalPlugins,\n    getGlobalHostPlugins,\n    getPreloaded,\n    setPreloaded\n};\nvar helpers = {\n    global: GlobalUtils,\n    share: ShareUtils,\n    utils: {\n        matchRemoteWithNameAndExpose,\n        preloadAssets,\n        getRemoteInfo\n    }\n};\n\nlet Module = class Module {\n    async getEntry() {\n        if (this.remoteEntryExports) {\n            return this.remoteEntryExports;\n        }\n        let remoteEntryExports;\n        try {\n            remoteEntryExports = await getRemoteEntry({\n                origin: this.host,\n                remoteInfo: this.remoteInfo,\n                remoteEntryExports: this.remoteEntryExports\n            });\n        } catch (err) {\n            const uniqueKey = getRemoteEntryUniqueKey(this.remoteInfo);\n            remoteEntryExports = await this.host.loaderHook.lifecycle.loadEntryError.emit({\n                getRemoteEntry,\n                origin: this.host,\n                remoteInfo: this.remoteInfo,\n                remoteEntryExports: this.remoteEntryExports,\n                globalLoading,\n                uniqueKey\n            });\n        }\n        assert(remoteEntryExports, `remoteEntryExports is undefined \\n ${(0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.safeToString)(this.remoteInfo)}`);\n        this.remoteEntryExports = remoteEntryExports;\n        return this.remoteEntryExports;\n    }\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n    async get(id, expose, options, remoteSnapshot) {\n        const { loadFactory = true } = options || {\n            loadFactory: true\n        };\n        // Get remoteEntry.js\n        const remoteEntryExports = await this.getEntry();\n        if (!this.inited) {\n            const localShareScopeMap = this.host.shareScopeMap;\n            const shareScopeKeys = Array.isArray(this.remoteInfo.shareScope) ? this.remoteInfo.shareScope : [\n                this.remoteInfo.shareScope\n            ];\n            if (!shareScopeKeys.length) {\n                shareScopeKeys.push('default');\n            }\n            shareScopeKeys.forEach((shareScopeKey)=>{\n                if (!localShareScopeMap[shareScopeKey]) {\n                    localShareScopeMap[shareScopeKey] = {};\n                }\n            });\n            // TODO: compate legacy init params, should use shareScopeMap if exist\n            const shareScope = localShareScopeMap[shareScopeKeys[0]];\n            const initScope = [];\n            const remoteEntryInitOptions = {\n                version: this.remoteInfo.version || '',\n                shareScopeKeys: Array.isArray(this.remoteInfo.shareScope) ? shareScopeKeys : this.remoteInfo.shareScope || 'default'\n            };\n            // Help to find host instance\n            Object.defineProperty(remoteEntryInitOptions, 'shareScopeMap', {\n                value: localShareScopeMap,\n                // remoteEntryInitOptions will be traversed and assigned during container init, ,so this attribute is not allowed to be traversed\n                enumerable: false\n            });\n            const initContainerOptions = await this.host.hooks.lifecycle.beforeInitContainer.emit({\n                shareScope,\n                // @ts-ignore shareScopeMap will be set by Object.defineProperty\n                remoteEntryInitOptions,\n                initScope,\n                remoteInfo: this.remoteInfo,\n                origin: this.host\n            });\n            if (typeof (remoteEntryExports == null ? void 0 : remoteEntryExports.init) === 'undefined') {\n                error((0,_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_2__.getShortErrorMsg)(_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_2__.RUNTIME_002, _module_federation_error_codes__WEBPACK_IMPORTED_MODULE_2__.runtimeDescMap, {\n                    hostName: this.host.name,\n                    remoteName: this.remoteInfo.name,\n                    remoteEntryUrl: this.remoteInfo.entry,\n                    remoteEntryKey: this.remoteInfo.entryGlobalName\n                }));\n            }\n            await remoteEntryExports.init(initContainerOptions.shareScope, initContainerOptions.initScope, initContainerOptions.remoteEntryInitOptions);\n            await this.host.hooks.lifecycle.initContainer.emit((0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, initContainerOptions, {\n                id,\n                remoteSnapshot,\n                remoteEntryExports\n            }));\n        }\n        this.lib = remoteEntryExports;\n        this.inited = true;\n        let moduleFactory;\n        moduleFactory = await this.host.loaderHook.lifecycle.getModuleFactory.emit({\n            remoteEntryExports,\n            expose,\n            moduleInfo: this.remoteInfo\n        });\n        // get exposeGetter\n        if (!moduleFactory) {\n            moduleFactory = await remoteEntryExports.get(expose);\n        }\n        assert(moduleFactory, `${getFMId(this.remoteInfo)} remote don't export ${expose}.`);\n        // keep symbol for module name always one format\n        const symbolName = processModuleAlias(this.remoteInfo.name, expose);\n        const wrapModuleFactory = this.wraperFactory(moduleFactory, symbolName);\n        if (!loadFactory) {\n            return wrapModuleFactory;\n        }\n        const exposeContent = await wrapModuleFactory();\n        return exposeContent;\n    }\n    wraperFactory(moduleFactory, id) {\n        function defineModuleId(res, id) {\n            if (res && typeof res === 'object' && Object.isExtensible(res) && !Object.getOwnPropertyDescriptor(res, Symbol.for('mf_module_id'))) {\n                Object.defineProperty(res, Symbol.for('mf_module_id'), {\n                    value: id,\n                    enumerable: false\n                });\n            }\n        }\n        if (moduleFactory instanceof Promise) {\n            return async ()=>{\n                const res = await moduleFactory();\n                // This parameter is used for bridge debugging\n                defineModuleId(res, id);\n                return res;\n            };\n        } else {\n            return ()=>{\n                const res = moduleFactory();\n                // This parameter is used for bridge debugging\n                defineModuleId(res, id);\n                return res;\n            };\n        }\n    }\n    constructor({ remoteInfo, host }){\n        this.inited = false;\n        this.lib = undefined;\n        this.remoteInfo = remoteInfo;\n        this.host = host;\n    }\n};\n\nclass SyncHook {\n    on(fn) {\n        if (typeof fn === 'function') {\n            this.listeners.add(fn);\n        }\n    }\n    once(fn) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this;\n        this.on(function wrapper(...args) {\n            self.remove(wrapper);\n            // eslint-disable-next-line prefer-spread\n            return fn.apply(null, args);\n        });\n    }\n    emit(...data) {\n        let result;\n        if (this.listeners.size > 0) {\n            // eslint-disable-next-line prefer-spread\n            this.listeners.forEach((fn)=>{\n                result = fn(...data);\n            });\n        }\n        return result;\n    }\n    remove(fn) {\n        this.listeners.delete(fn);\n    }\n    removeAll() {\n        this.listeners.clear();\n    }\n    constructor(type){\n        this.type = '';\n        this.listeners = new Set();\n        if (type) {\n            this.type = type;\n        }\n    }\n}\n\nclass AsyncHook extends SyncHook {\n    emit(...data) {\n        let result;\n        const ls = Array.from(this.listeners);\n        if (ls.length > 0) {\n            let i = 0;\n            const call = (prev)=>{\n                if (prev === false) {\n                    return false; // Abort process\n                } else if (i < ls.length) {\n                    return Promise.resolve(ls[i++].apply(null, data)).then(call);\n                } else {\n                    return prev;\n                }\n            };\n            result = call();\n        }\n        return Promise.resolve(result);\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nfunction checkReturnData(originalData, returnedData) {\n    if (!isObject(returnedData)) {\n        return false;\n    }\n    if (originalData !== returnedData) {\n        // eslint-disable-next-line no-restricted-syntax\n        for(const key in originalData){\n            if (!(key in returnedData)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\nclass SyncWaterfallHook extends SyncHook {\n    emit(data) {\n        if (!isObject(data)) {\n            error(`The data for the \"${this.type}\" hook should be an object.`);\n        }\n        for (const fn of this.listeners){\n            try {\n                const tempData = fn(data);\n                if (checkReturnData(data, tempData)) {\n                    data = tempData;\n                } else {\n                    this.onerror(`A plugin returned an unacceptable value for the \"${this.type}\" type.`);\n                    break;\n                }\n            } catch (e) {\n                warn(e);\n                this.onerror(e);\n            }\n        }\n        return data;\n    }\n    constructor(type){\n        super();\n        this.onerror = error;\n        this.type = type;\n    }\n}\n\nclass AsyncWaterfallHook extends SyncHook {\n    emit(data) {\n        if (!isObject(data)) {\n            error(`The response data for the \"${this.type}\" hook must be an object.`);\n        }\n        const ls = Array.from(this.listeners);\n        if (ls.length > 0) {\n            let i = 0;\n            const processError = (e)=>{\n                warn(e);\n                this.onerror(e);\n                return data;\n            };\n            const call = (prevData)=>{\n                if (checkReturnData(data, prevData)) {\n                    data = prevData;\n                    if (i < ls.length) {\n                        try {\n                            return Promise.resolve(ls[i++](data)).then(call, processError);\n                        } catch (e) {\n                            return processError(e);\n                        }\n                    }\n                } else {\n                    this.onerror(`A plugin returned an incorrect value for the \"${this.type}\" type.`);\n                }\n                return data;\n            };\n            return Promise.resolve(call(data));\n        }\n        return Promise.resolve(data);\n    }\n    constructor(type){\n        super();\n        this.onerror = error;\n        this.type = type;\n    }\n}\n\nclass PluginSystem {\n    applyPlugin(plugin, instance) {\n        assert(isPlainObject(plugin), 'Plugin configuration is invalid.');\n        // The plugin's name is mandatory and must be unique\n        const pluginName = plugin.name;\n        assert(pluginName, 'A name must be provided by the plugin.');\n        if (!this.registerPlugins[pluginName]) {\n            this.registerPlugins[pluginName] = plugin;\n            plugin.apply == null ? void 0 : plugin.apply.call(plugin, instance);\n            Object.keys(this.lifecycle).forEach((key)=>{\n                const pluginLife = plugin[key];\n                if (pluginLife) {\n                    this.lifecycle[key].on(pluginLife);\n                }\n            });\n        }\n    }\n    removePlugin(pluginName) {\n        assert(pluginName, 'A name is required.');\n        const plugin = this.registerPlugins[pluginName];\n        assert(plugin, `The plugin \"${pluginName}\" is not registered.`);\n        Object.keys(plugin).forEach((key)=>{\n            if (key !== 'name') {\n                this.lifecycle[key].remove(plugin[key]);\n            }\n        });\n    }\n    constructor(lifecycle){\n        this.registerPlugins = {};\n        this.lifecycle = lifecycle;\n        this.lifecycleKeys = Object.keys(lifecycle);\n    }\n}\n\nfunction assignRemoteInfo(remoteInfo, remoteSnapshot) {\n    const remoteEntryInfo = getRemoteEntryInfoFromSnapshot(remoteSnapshot);\n    if (!remoteEntryInfo.url) {\n        error(`The attribute remoteEntry of ${remoteInfo.name} must not be undefined.`);\n    }\n    let entryUrl = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.getResourceUrl)(remoteSnapshot, remoteEntryInfo.url);\n    if (!(0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.isBrowserEnv)() && !entryUrl.startsWith('http')) {\n        entryUrl = `https:${entryUrl}`;\n    }\n    remoteInfo.type = remoteEntryInfo.type;\n    remoteInfo.entryGlobalName = remoteEntryInfo.globalName;\n    remoteInfo.entry = entryUrl;\n    remoteInfo.version = remoteSnapshot.version;\n    remoteInfo.buildVersion = remoteSnapshot.buildVersion;\n}\nfunction snapshotPlugin() {\n    return {\n        name: 'snapshot-plugin',\n        async afterResolve (args) {\n            const { remote, pkgNameOrAlias, expose, origin, remoteInfo, id } = args;\n            if (!isRemoteInfoWithEntry(remote) || !isPureRemoteEntry(remote)) {\n                const { remoteSnapshot, globalSnapshot } = await origin.snapshotHandler.loadRemoteSnapshotInfo({\n                    moduleInfo: remote,\n                    id\n                });\n                assignRemoteInfo(remoteInfo, remoteSnapshot);\n                // preloading assets\n                const preloadOptions = {\n                    remote,\n                    preloadConfig: {\n                        nameOrAlias: pkgNameOrAlias,\n                        exposes: [\n                            expose\n                        ],\n                        resourceCategory: 'sync',\n                        share: false,\n                        depsRemote: false\n                    }\n                };\n                const assets = await origin.remoteHandler.hooks.lifecycle.generatePreloadAssets.emit({\n                    origin,\n                    preloadOptions,\n                    remoteInfo,\n                    remote,\n                    remoteSnapshot,\n                    globalSnapshot\n                });\n                if (assets) {\n                    preloadAssets(remoteInfo, origin, assets, false);\n                }\n                return (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, args, {\n                    remoteSnapshot\n                });\n            }\n            return args;\n        }\n    };\n}\n\n// name\n// name:version\nfunction splitId(id) {\n    const splitInfo = id.split(':');\n    if (splitInfo.length === 1) {\n        return {\n            name: splitInfo[0],\n            version: undefined\n        };\n    } else if (splitInfo.length === 2) {\n        return {\n            name: splitInfo[0],\n            version: splitInfo[1]\n        };\n    } else {\n        return {\n            name: splitInfo[1],\n            version: splitInfo[2]\n        };\n    }\n}\n// Traverse all nodes in moduleInfo and traverse the entire snapshot\nfunction traverseModuleInfo(globalSnapshot, remoteInfo, traverse, isRoot, memo = {}, remoteSnapshot) {\n    const id = getFMId(remoteInfo);\n    const { value: snapshotValue } = getInfoWithoutType(globalSnapshot, id);\n    const effectiveRemoteSnapshot = remoteSnapshot || snapshotValue;\n    if (effectiveRemoteSnapshot && !(0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.isManifestProvider)(effectiveRemoteSnapshot)) {\n        traverse(effectiveRemoteSnapshot, remoteInfo, isRoot);\n        if (effectiveRemoteSnapshot.remotesInfo) {\n            const remoteKeys = Object.keys(effectiveRemoteSnapshot.remotesInfo);\n            for (const key of remoteKeys){\n                if (memo[key]) {\n                    continue;\n                }\n                memo[key] = true;\n                const subRemoteInfo = splitId(key);\n                const remoteValue = effectiveRemoteSnapshot.remotesInfo[key];\n                traverseModuleInfo(globalSnapshot, {\n                    name: subRemoteInfo.name,\n                    version: remoteValue.matchedVersion\n                }, traverse, false, memo, undefined);\n            }\n        }\n    }\n}\nconst isExisted = (type, url)=>{\n    return document.querySelector(`${type}[${type === 'link' ? 'href' : 'src'}=\"${url}\"]`);\n};\n// eslint-disable-next-line max-lines-per-function\nfunction generatePreloadAssets(origin, preloadOptions, remote, globalSnapshot, remoteSnapshot) {\n    const cssAssets = [];\n    const jsAssets = [];\n    const entryAssets = [];\n    const loadedSharedJsAssets = new Set();\n    const loadedSharedCssAssets = new Set();\n    const { options } = origin;\n    const { preloadConfig: rootPreloadConfig } = preloadOptions;\n    const { depsRemote } = rootPreloadConfig;\n    const memo = {};\n    traverseModuleInfo(globalSnapshot, remote, (moduleInfoSnapshot, remoteInfo, isRoot)=>{\n        let preloadConfig;\n        if (isRoot) {\n            preloadConfig = rootPreloadConfig;\n        } else {\n            if (Array.isArray(depsRemote)) {\n                // eslint-disable-next-line array-callback-return\n                const findPreloadConfig = depsRemote.find((remoteConfig)=>{\n                    if (remoteConfig.nameOrAlias === remoteInfo.name || remoteConfig.nameOrAlias === remoteInfo.alias) {\n                        return true;\n                    }\n                    return false;\n                });\n                if (!findPreloadConfig) {\n                    return;\n                }\n                preloadConfig = defaultPreloadArgs(findPreloadConfig);\n            } else if (depsRemote === true) {\n                preloadConfig = rootPreloadConfig;\n            } else {\n                return;\n            }\n        }\n        const remoteEntryUrl = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.getResourceUrl)(moduleInfoSnapshot, getRemoteEntryInfoFromSnapshot(moduleInfoSnapshot).url);\n        if (remoteEntryUrl) {\n            entryAssets.push({\n                name: remoteInfo.name,\n                moduleInfo: {\n                    name: remoteInfo.name,\n                    entry: remoteEntryUrl,\n                    type: 'remoteEntryType' in moduleInfoSnapshot ? moduleInfoSnapshot.remoteEntryType : 'global',\n                    entryGlobalName: 'globalName' in moduleInfoSnapshot ? moduleInfoSnapshot.globalName : remoteInfo.name,\n                    shareScope: '',\n                    version: 'version' in moduleInfoSnapshot ? moduleInfoSnapshot.version : undefined\n                },\n                url: remoteEntryUrl\n            });\n        }\n        let moduleAssetsInfo = 'modules' in moduleInfoSnapshot ? moduleInfoSnapshot.modules : [];\n        const normalizedPreloadExposes = normalizePreloadExposes(preloadConfig.exposes);\n        if (normalizedPreloadExposes.length && 'modules' in moduleInfoSnapshot) {\n            var _moduleInfoSnapshot_modules;\n            moduleAssetsInfo = moduleInfoSnapshot == null ? void 0 : (_moduleInfoSnapshot_modules = moduleInfoSnapshot.modules) == null ? void 0 : _moduleInfoSnapshot_modules.reduce((assets, moduleAssetInfo)=>{\n                if ((normalizedPreloadExposes == null ? void 0 : normalizedPreloadExposes.indexOf(moduleAssetInfo.moduleName)) !== -1) {\n                    assets.push(moduleAssetInfo);\n                }\n                return assets;\n            }, []);\n        }\n        function handleAssets(assets) {\n            const assetsRes = assets.map((asset)=>(0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.getResourceUrl)(moduleInfoSnapshot, asset));\n            if (preloadConfig.filter) {\n                return assetsRes.filter(preloadConfig.filter);\n            }\n            return assetsRes;\n        }\n        if (moduleAssetsInfo) {\n            const assetsLength = moduleAssetsInfo.length;\n            for(let index = 0; index < assetsLength; index++){\n                const assetsInfo = moduleAssetsInfo[index];\n                const exposeFullPath = `${remoteInfo.name}/${assetsInfo.moduleName}`;\n                origin.remoteHandler.hooks.lifecycle.handlePreloadModule.emit({\n                    id: assetsInfo.moduleName === '.' ? remoteInfo.name : exposeFullPath,\n                    name: remoteInfo.name,\n                    remoteSnapshot: moduleInfoSnapshot,\n                    preloadConfig,\n                    remote: remoteInfo,\n                    origin\n                });\n                const preloaded = getPreloaded(exposeFullPath);\n                if (preloaded) {\n                    continue;\n                }\n                if (preloadConfig.resourceCategory === 'all') {\n                    cssAssets.push(...handleAssets(assetsInfo.assets.css.async));\n                    cssAssets.push(...handleAssets(assetsInfo.assets.css.sync));\n                    jsAssets.push(...handleAssets(assetsInfo.assets.js.async));\n                    jsAssets.push(...handleAssets(assetsInfo.assets.js.sync));\n                // eslint-disable-next-line no-constant-condition\n                } else if (preloadConfig.resourceCategory = 'sync') {\n                    cssAssets.push(...handleAssets(assetsInfo.assets.css.sync));\n                    jsAssets.push(...handleAssets(assetsInfo.assets.js.sync));\n                }\n                setPreloaded(exposeFullPath);\n            }\n        }\n    }, true, memo, remoteSnapshot);\n    if (remoteSnapshot.shared && remoteSnapshot.shared.length > 0) {\n        const collectSharedAssets = (shareInfo, snapshotShared)=>{\n            const registeredShared = getRegisteredShare(origin.shareScopeMap, snapshotShared.sharedName, shareInfo, origin.sharedHandler.hooks.lifecycle.resolveShare);\n            // If the global share does not exist, or the lib function does not exist, it means that the shared has not been loaded yet and can be preloaded.\n            if (registeredShared && typeof registeredShared.lib === 'function') {\n                snapshotShared.assets.js.sync.forEach((asset)=>{\n                    loadedSharedJsAssets.add(asset);\n                });\n                snapshotShared.assets.css.sync.forEach((asset)=>{\n                    loadedSharedCssAssets.add(asset);\n                });\n            }\n        };\n        remoteSnapshot.shared.forEach((shared)=>{\n            var _options_shared;\n            const shareInfos = (_options_shared = options.shared) == null ? void 0 : _options_shared[shared.sharedName];\n            if (!shareInfos) {\n                return;\n            }\n            // if no version, preload all shared\n            const sharedOptions = shared.version ? shareInfos.find((s)=>s.version === shared.version) : shareInfos;\n            if (!sharedOptions) {\n                return;\n            }\n            const arrayShareInfo = arrayOptions(sharedOptions);\n            arrayShareInfo.forEach((s)=>{\n                collectSharedAssets(s, shared);\n            });\n        });\n    }\n    const needPreloadJsAssets = jsAssets.filter((asset)=>!loadedSharedJsAssets.has(asset) && !isExisted('script', asset));\n    const needPreloadCssAssets = cssAssets.filter((asset)=>!loadedSharedCssAssets.has(asset) && !isExisted('link', asset));\n    return {\n        cssAssets: needPreloadCssAssets,\n        jsAssetsWithoutEntry: needPreloadJsAssets,\n        entryAssets: entryAssets.filter((entry)=>!isExisted('script', entry.url))\n    };\n}\nconst generatePreloadAssetsPlugin = function() {\n    return {\n        name: 'generate-preload-assets-plugin',\n        async generatePreloadAssets (args) {\n            const { origin, preloadOptions, remoteInfo, remote, globalSnapshot, remoteSnapshot } = args;\n            if (!(0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.isBrowserEnv)()) {\n                return {\n                    cssAssets: [],\n                    jsAssetsWithoutEntry: [],\n                    entryAssets: []\n                };\n            }\n            if (isRemoteInfoWithEntry(remote) && isPureRemoteEntry(remote)) {\n                return {\n                    cssAssets: [],\n                    jsAssetsWithoutEntry: [],\n                    entryAssets: [\n                        {\n                            name: remote.name,\n                            url: remote.entry,\n                            moduleInfo: {\n                                name: remoteInfo.name,\n                                entry: remote.entry,\n                                type: remoteInfo.type || 'global',\n                                entryGlobalName: '',\n                                shareScope: ''\n                            }\n                        }\n                    ]\n                };\n            }\n            assignRemoteInfo(remoteInfo, remoteSnapshot);\n            const assets = generatePreloadAssets(origin, preloadOptions, remoteInfo, globalSnapshot, remoteSnapshot);\n            return assets;\n        }\n    };\n};\n\nfunction getGlobalRemoteInfo(moduleInfo, origin) {\n    const hostGlobalSnapshot = getGlobalSnapshotInfoByModuleInfo({\n        name: origin.name,\n        version: origin.options.version\n    });\n    // get remote detail info from global\n    const globalRemoteInfo = hostGlobalSnapshot && 'remotesInfo' in hostGlobalSnapshot && hostGlobalSnapshot.remotesInfo && getInfoWithoutType(hostGlobalSnapshot.remotesInfo, moduleInfo.name).value;\n    if (globalRemoteInfo && globalRemoteInfo.matchedVersion) {\n        return {\n            hostGlobalSnapshot,\n            globalSnapshot: getGlobalSnapshot(),\n            remoteSnapshot: getGlobalSnapshotInfoByModuleInfo({\n                name: moduleInfo.name,\n                version: globalRemoteInfo.matchedVersion\n            })\n        };\n    }\n    return {\n        hostGlobalSnapshot: undefined,\n        globalSnapshot: getGlobalSnapshot(),\n        remoteSnapshot: getGlobalSnapshotInfoByModuleInfo({\n            name: moduleInfo.name,\n            version: 'version' in moduleInfo ? moduleInfo.version : undefined\n        })\n    };\n}\nclass SnapshotHandler {\n    // eslint-disable-next-line max-lines-per-function\n    async loadRemoteSnapshotInfo({ moduleInfo, id, expose }) {\n        const { options } = this.HostInstance;\n        await this.hooks.lifecycle.beforeLoadRemoteSnapshot.emit({\n            options,\n            moduleInfo\n        });\n        let hostSnapshot = getGlobalSnapshotInfoByModuleInfo({\n            name: this.HostInstance.options.name,\n            version: this.HostInstance.options.version\n        });\n        if (!hostSnapshot) {\n            hostSnapshot = {\n                version: this.HostInstance.options.version || '',\n                remoteEntry: '',\n                remotesInfo: {}\n            };\n            addGlobalSnapshot({\n                [this.HostInstance.options.name]: hostSnapshot\n            });\n        }\n        // In dynamic loadRemote scenarios, incomplete remotesInfo delivery may occur. In such cases, the remotesInfo in the host needs to be completed in the snapshot at runtime.\n        // This ensures the snapshot's integrity and helps the chrome plugin correctly identify all producer modules, ensuring that proxyable producer modules will not be missing.\n        if (hostSnapshot && 'remotesInfo' in hostSnapshot && !getInfoWithoutType(hostSnapshot.remotesInfo, moduleInfo.name).value) {\n            if ('version' in moduleInfo || 'entry' in moduleInfo) {\n                hostSnapshot.remotesInfo = (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, hostSnapshot == null ? void 0 : hostSnapshot.remotesInfo, {\n                    [moduleInfo.name]: {\n                        matchedVersion: 'version' in moduleInfo ? moduleInfo.version : moduleInfo.entry\n                    }\n                });\n            }\n        }\n        const { hostGlobalSnapshot, remoteSnapshot, globalSnapshot } = this.getGlobalRemoteInfo(moduleInfo);\n        const { remoteSnapshot: globalRemoteSnapshot, globalSnapshot: globalSnapshotRes } = await this.hooks.lifecycle.loadSnapshot.emit({\n            options,\n            moduleInfo,\n            hostGlobalSnapshot,\n            remoteSnapshot,\n            globalSnapshot\n        });\n        let mSnapshot;\n        let gSnapshot;\n        // global snapshot includes manifest or module info includes manifest\n        if (globalRemoteSnapshot) {\n            if ((0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.isManifestProvider)(globalRemoteSnapshot)) {\n                const remoteEntry = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.isBrowserEnv)() ? globalRemoteSnapshot.remoteEntry : globalRemoteSnapshot.ssrRemoteEntry || globalRemoteSnapshot.remoteEntry || '';\n                const moduleSnapshot = await this.getManifestJson(remoteEntry, moduleInfo, {});\n                // eslint-disable-next-line @typescript-eslint/no-shadow\n                const globalSnapshotRes = setGlobalSnapshotInfoByModuleInfo((0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, moduleInfo, {\n                    // The global remote may be overridden\n                    // Therefore, set the snapshot key to the global address of the actual request\n                    entry: remoteEntry\n                }), moduleSnapshot);\n                mSnapshot = moduleSnapshot;\n                gSnapshot = globalSnapshotRes;\n            } else {\n                const { remoteSnapshot: remoteSnapshotRes } = await this.hooks.lifecycle.loadRemoteSnapshot.emit({\n                    options: this.HostInstance.options,\n                    moduleInfo,\n                    remoteSnapshot: globalRemoteSnapshot,\n                    from: 'global'\n                });\n                mSnapshot = remoteSnapshotRes;\n                gSnapshot = globalSnapshotRes;\n            }\n        } else {\n            if (isRemoteInfoWithEntry(moduleInfo)) {\n                // get from manifest.json and merge remote info from remote server\n                const moduleSnapshot = await this.getManifestJson(moduleInfo.entry, moduleInfo, {});\n                // eslint-disable-next-line @typescript-eslint/no-shadow\n                const globalSnapshotRes = setGlobalSnapshotInfoByModuleInfo(moduleInfo, moduleSnapshot);\n                const { remoteSnapshot: remoteSnapshotRes } = await this.hooks.lifecycle.loadRemoteSnapshot.emit({\n                    options: this.HostInstance.options,\n                    moduleInfo,\n                    remoteSnapshot: moduleSnapshot,\n                    from: 'global'\n                });\n                mSnapshot = remoteSnapshotRes;\n                gSnapshot = globalSnapshotRes;\n            } else {\n                error((0,_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_2__.getShortErrorMsg)(_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_2__.RUNTIME_007, _module_federation_error_codes__WEBPACK_IMPORTED_MODULE_2__.runtimeDescMap, {\n                    hostName: moduleInfo.name,\n                    hostVersion: moduleInfo.version,\n                    globalSnapshot: JSON.stringify(globalSnapshotRes)\n                }));\n            }\n        }\n        await this.hooks.lifecycle.afterLoadSnapshot.emit({\n            id,\n            host: this.HostInstance,\n            options,\n            moduleInfo,\n            remoteSnapshot: mSnapshot\n        });\n        return {\n            remoteSnapshot: mSnapshot,\n            globalSnapshot: gSnapshot\n        };\n    }\n    getGlobalRemoteInfo(moduleInfo) {\n        return getGlobalRemoteInfo(moduleInfo, this.HostInstance);\n    }\n    async getManifestJson(manifestUrl, moduleInfo, extraOptions) {\n        const getManifest = async ()=>{\n            let manifestJson = this.manifestCache.get(manifestUrl);\n            if (manifestJson) {\n                return manifestJson;\n            }\n            try {\n                let res = await this.loaderHook.lifecycle.fetch.emit(manifestUrl, {});\n                if (!res || !(res instanceof Response)) {\n                    res = await fetch(manifestUrl, {});\n                }\n                manifestJson = await res.json();\n            } catch (err) {\n                manifestJson = await this.HostInstance.remoteHandler.hooks.lifecycle.errorLoadRemote.emit({\n                    id: manifestUrl,\n                    error: err,\n                    from: 'runtime',\n                    lifecycle: 'afterResolve',\n                    origin: this.HostInstance\n                });\n                if (!manifestJson) {\n                    delete this.manifestLoading[manifestUrl];\n                    error((0,_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_2__.getShortErrorMsg)(_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_2__.RUNTIME_003, _module_federation_error_codes__WEBPACK_IMPORTED_MODULE_2__.runtimeDescMap, {\n                        manifestUrl,\n                        moduleName: moduleInfo.name,\n                        hostName: this.HostInstance.options.name\n                    }, `${err}`));\n                }\n            }\n            assert(manifestJson.metaData && manifestJson.exposes && manifestJson.shared, `${manifestUrl} is not a federation manifest`);\n            this.manifestCache.set(manifestUrl, manifestJson);\n            return manifestJson;\n        };\n        const asyncLoadProcess = async ()=>{\n            const manifestJson = await getManifest();\n            const remoteSnapshot = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.generateSnapshotFromManifest)(manifestJson, {\n                version: manifestUrl\n            });\n            const { remoteSnapshot: remoteSnapshotRes } = await this.hooks.lifecycle.loadRemoteSnapshot.emit({\n                options: this.HostInstance.options,\n                moduleInfo,\n                manifestJson,\n                remoteSnapshot,\n                manifestUrl,\n                from: 'manifest'\n            });\n            return remoteSnapshotRes;\n        };\n        if (!this.manifestLoading[manifestUrl]) {\n            this.manifestLoading[manifestUrl] = asyncLoadProcess().then((res)=>res);\n        }\n        return this.manifestLoading[manifestUrl];\n    }\n    constructor(HostInstance){\n        this.loadingHostSnapshot = null;\n        this.manifestCache = new Map();\n        this.hooks = new PluginSystem({\n            beforeLoadRemoteSnapshot: new AsyncHook('beforeLoadRemoteSnapshot'),\n            loadSnapshot: new AsyncWaterfallHook('loadGlobalSnapshot'),\n            loadRemoteSnapshot: new AsyncWaterfallHook('loadRemoteSnapshot'),\n            afterLoadSnapshot: new AsyncWaterfallHook('afterLoadSnapshot')\n        });\n        this.manifestLoading = Global.__FEDERATION__.__MANIFEST_LOADING__;\n        this.HostInstance = HostInstance;\n        this.loaderHook = HostInstance.loaderHook;\n    }\n}\n\nclass SharedHandler {\n    // register shared in shareScopeMap\n    registerShared(globalOptions, userOptions) {\n        const { shareInfos, shared } = formatShareConfigs(globalOptions, userOptions);\n        const sharedKeys = Object.keys(shareInfos);\n        sharedKeys.forEach((sharedKey)=>{\n            const sharedVals = shareInfos[sharedKey];\n            sharedVals.forEach((sharedVal)=>{\n                const registeredShared = getRegisteredShare(this.shareScopeMap, sharedKey, sharedVal, this.hooks.lifecycle.resolveShare);\n                if (!registeredShared && sharedVal && sharedVal.lib) {\n                    this.setShared({\n                        pkgName: sharedKey,\n                        lib: sharedVal.lib,\n                        get: sharedVal.get,\n                        loaded: true,\n                        shared: sharedVal,\n                        from: userOptions.name\n                    });\n                }\n            });\n        });\n        return {\n            shareInfos,\n            shared\n        };\n    }\n    async loadShare(pkgName, extraOptions) {\n        const { host } = this;\n        // This function performs the following steps:\n        // 1. Checks if the currently loaded share already exists, if not, it throws an error\n        // 2. Searches globally for a matching share, if found, it uses it directly\n        // 3. If not found, it retrieves it from the current share and stores the obtained share globally.\n        const shareOptions = getTargetSharedOptions({\n            pkgName,\n            extraOptions,\n            shareInfos: host.options.shared\n        });\n        if (shareOptions == null ? void 0 : shareOptions.scope) {\n            await Promise.all(shareOptions.scope.map(async (shareScope)=>{\n                await Promise.all(this.initializeSharing(shareScope, {\n                    strategy: shareOptions.strategy\n                }));\n                return;\n            }));\n        }\n        const loadShareRes = await this.hooks.lifecycle.beforeLoadShare.emit({\n            pkgName,\n            shareInfo: shareOptions,\n            shared: host.options.shared,\n            origin: host\n        });\n        const { shareInfo: shareOptionsRes } = loadShareRes;\n        // Assert that shareInfoRes exists, if not, throw an error\n        assert(shareOptionsRes, `Cannot find ${pkgName} Share in the ${host.options.name}. Please ensure that the ${pkgName} Share parameters have been injected`);\n        // Retrieve from cache\n        const registeredShared = getRegisteredShare(this.shareScopeMap, pkgName, shareOptionsRes, this.hooks.lifecycle.resolveShare);\n        const addUseIn = (shared)=>{\n            if (!shared.useIn) {\n                shared.useIn = [];\n            }\n            addUniqueItem(shared.useIn, host.options.name);\n        };\n        if (registeredShared && registeredShared.lib) {\n            addUseIn(registeredShared);\n            return registeredShared.lib;\n        } else if (registeredShared && registeredShared.loading && !registeredShared.loaded) {\n            const factory = await registeredShared.loading;\n            registeredShared.loaded = true;\n            if (!registeredShared.lib) {\n                registeredShared.lib = factory;\n            }\n            addUseIn(registeredShared);\n            return factory;\n        } else if (registeredShared) {\n            const asyncLoadProcess = async ()=>{\n                const factory = await registeredShared.get();\n                addUseIn(registeredShared);\n                registeredShared.loaded = true;\n                registeredShared.lib = factory;\n                return factory;\n            };\n            const loading = asyncLoadProcess();\n            this.setShared({\n                pkgName,\n                loaded: false,\n                shared: registeredShared,\n                from: host.options.name,\n                lib: null,\n                loading\n            });\n            return loading;\n        } else {\n            if (extraOptions == null ? void 0 : extraOptions.customShareInfo) {\n                return false;\n            }\n            const asyncLoadProcess = async ()=>{\n                const factory = await shareOptionsRes.get();\n                shareOptionsRes.lib = factory;\n                shareOptionsRes.loaded = true;\n                addUseIn(shareOptionsRes);\n                const gShared = getRegisteredShare(this.shareScopeMap, pkgName, shareOptionsRes, this.hooks.lifecycle.resolveShare);\n                if (gShared) {\n                    gShared.lib = factory;\n                    gShared.loaded = true;\n                    gShared.from = shareOptionsRes.from;\n                }\n                return factory;\n            };\n            const loading = asyncLoadProcess();\n            this.setShared({\n                pkgName,\n                loaded: false,\n                shared: shareOptionsRes,\n                from: host.options.name,\n                lib: null,\n                loading\n            });\n            return loading;\n        }\n    }\n    /**\n     * This function initializes the sharing sequence (executed only once per share scope).\n     * It accepts one argument, the name of the share scope.\n     * If the share scope does not exist, it creates one.\n     */ // eslint-disable-next-line @typescript-eslint/member-ordering\n    initializeSharing(shareScopeName = DEFAULT_SCOPE, extraOptions) {\n        const { host } = this;\n        const from = extraOptions == null ? void 0 : extraOptions.from;\n        const strategy = extraOptions == null ? void 0 : extraOptions.strategy;\n        let initScope = extraOptions == null ? void 0 : extraOptions.initScope;\n        const promises = [];\n        if (from !== 'build') {\n            const { initTokens } = this;\n            if (!initScope) initScope = [];\n            let initToken = initTokens[shareScopeName];\n            if (!initToken) initToken = initTokens[shareScopeName] = {\n                from: this.host.name\n            };\n            if (initScope.indexOf(initToken) >= 0) return promises;\n            initScope.push(initToken);\n        }\n        const shareScope = this.shareScopeMap;\n        const hostName = host.options.name;\n        // Creates a new share scope if necessary\n        if (!shareScope[shareScopeName]) {\n            shareScope[shareScopeName] = {};\n        }\n        // Executes all initialization snippets from all accessible modules\n        const scope = shareScope[shareScopeName];\n        const register = (name, shared)=>{\n            var _activeVersion_shareConfig;\n            const { version, eager } = shared;\n            scope[name] = scope[name] || {};\n            const versions = scope[name];\n            const activeVersion = versions[version];\n            const activeVersionEager = Boolean(activeVersion && (activeVersion.eager || ((_activeVersion_shareConfig = activeVersion.shareConfig) == null ? void 0 : _activeVersion_shareConfig.eager)));\n            if (!activeVersion || activeVersion.strategy !== 'loaded-first' && !activeVersion.loaded && (Boolean(!eager) !== !activeVersionEager ? eager : hostName > activeVersion.from)) {\n                versions[version] = shared;\n            }\n        };\n        const initFn = (mod)=>mod && mod.init && mod.init(shareScope[shareScopeName], initScope);\n        const initRemoteModule = async (key)=>{\n            const { module } = await host.remoteHandler.getRemoteModuleAndOptions({\n                id: key\n            });\n            if (module.getEntry) {\n                let remoteEntryExports;\n                try {\n                    remoteEntryExports = await module.getEntry();\n                } catch (error) {\n                    remoteEntryExports = await host.remoteHandler.hooks.lifecycle.errorLoadRemote.emit({\n                        id: key,\n                        error,\n                        from: 'runtime',\n                        lifecycle: 'beforeLoadShare',\n                        origin: host\n                    });\n                }\n                if (!module.inited) {\n                    await initFn(remoteEntryExports);\n                    module.inited = true;\n                }\n            }\n        };\n        Object.keys(host.options.shared).forEach((shareName)=>{\n            const sharedArr = host.options.shared[shareName];\n            sharedArr.forEach((shared)=>{\n                if (shared.scope.includes(shareScopeName)) {\n                    register(shareName, shared);\n                }\n            });\n        });\n        // TODO: strategy==='version-first' need to be removed in the future\n        if (host.options.shareStrategy === 'version-first' || strategy === 'version-first') {\n            host.options.remotes.forEach((remote)=>{\n                if (remote.shareScope === shareScopeName) {\n                    promises.push(initRemoteModule(remote.name));\n                }\n            });\n        }\n        return promises;\n    }\n    // The lib function will only be available if the shared set by eager or runtime init is set or the shared is successfully loaded.\n    // 1. If the loaded shared already exists globally, then it will be reused\n    // 2. If lib exists in local shared, it will be used directly\n    // 3. If the local get returns something other than Promise, then it will be used directly\n    loadShareSync(pkgName, extraOptions) {\n        const { host } = this;\n        const shareOptions = getTargetSharedOptions({\n            pkgName,\n            extraOptions,\n            shareInfos: host.options.shared\n        });\n        if (shareOptions == null ? void 0 : shareOptions.scope) {\n            shareOptions.scope.forEach((shareScope)=>{\n                this.initializeSharing(shareScope, {\n                    strategy: shareOptions.strategy\n                });\n            });\n        }\n        const registeredShared = getRegisteredShare(this.shareScopeMap, pkgName, shareOptions, this.hooks.lifecycle.resolveShare);\n        const addUseIn = (shared)=>{\n            if (!shared.useIn) {\n                shared.useIn = [];\n            }\n            addUniqueItem(shared.useIn, host.options.name);\n        };\n        if (registeredShared) {\n            if (typeof registeredShared.lib === 'function') {\n                addUseIn(registeredShared);\n                if (!registeredShared.loaded) {\n                    registeredShared.loaded = true;\n                    if (registeredShared.from === host.options.name) {\n                        shareOptions.loaded = true;\n                    }\n                }\n                return registeredShared.lib;\n            }\n            if (typeof registeredShared.get === 'function') {\n                const module = registeredShared.get();\n                if (!(module instanceof Promise)) {\n                    addUseIn(registeredShared);\n                    this.setShared({\n                        pkgName,\n                        loaded: true,\n                        from: host.options.name,\n                        lib: module,\n                        shared: registeredShared\n                    });\n                    return module;\n                }\n            }\n        }\n        if (shareOptions.lib) {\n            if (!shareOptions.loaded) {\n                shareOptions.loaded = true;\n            }\n            return shareOptions.lib;\n        }\n        if (shareOptions.get) {\n            const module = shareOptions.get();\n            if (module instanceof Promise) {\n                const errorCode = (extraOptions == null ? void 0 : extraOptions.from) === 'build' ? _module_federation_error_codes__WEBPACK_IMPORTED_MODULE_2__.RUNTIME_005 : _module_federation_error_codes__WEBPACK_IMPORTED_MODULE_2__.RUNTIME_006;\n                throw new Error((0,_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_2__.getShortErrorMsg)(errorCode, _module_federation_error_codes__WEBPACK_IMPORTED_MODULE_2__.runtimeDescMap, {\n                    hostName: host.options.name,\n                    sharedPkgName: pkgName\n                }));\n            }\n            shareOptions.lib = module;\n            this.setShared({\n                pkgName,\n                loaded: true,\n                from: host.options.name,\n                lib: shareOptions.lib,\n                shared: shareOptions\n            });\n            return shareOptions.lib;\n        }\n        throw new Error((0,_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_2__.getShortErrorMsg)(_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_2__.RUNTIME_006, _module_federation_error_codes__WEBPACK_IMPORTED_MODULE_2__.runtimeDescMap, {\n            hostName: host.options.name,\n            sharedPkgName: pkgName\n        }));\n    }\n    initShareScopeMap(scopeName, shareScope, extraOptions = {}) {\n        const { host } = this;\n        this.shareScopeMap[scopeName] = shareScope;\n        this.hooks.lifecycle.initContainerShareScopeMap.emit({\n            shareScope,\n            options: host.options,\n            origin: host,\n            scopeName,\n            hostShareScopeMap: extraOptions.hostShareScopeMap\n        });\n    }\n    setShared({ pkgName, shared, from, lib, loading, loaded, get }) {\n        const { version, scope = 'default' } = shared, shareInfo = (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__.a)(shared, [\n            \"version\",\n            \"scope\"\n        ]);\n        const scopes = Array.isArray(scope) ? scope : [\n            scope\n        ];\n        scopes.forEach((sc)=>{\n            if (!this.shareScopeMap[sc]) {\n                this.shareScopeMap[sc] = {};\n            }\n            if (!this.shareScopeMap[sc][pkgName]) {\n                this.shareScopeMap[sc][pkgName] = {};\n            }\n            if (!this.shareScopeMap[sc][pkgName][version]) {\n                this.shareScopeMap[sc][pkgName][version] = (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n                    version,\n                    scope: [\n                        'default'\n                    ]\n                }, shareInfo, {\n                    lib,\n                    loaded,\n                    loading\n                });\n                if (get) {\n                    this.shareScopeMap[sc][pkgName][version].get = get;\n                }\n                return;\n            }\n            const registeredShared = this.shareScopeMap[sc][pkgName][version];\n            if (loading && !registeredShared.loading) {\n                registeredShared.loading = loading;\n            }\n            if (loaded && !registeredShared.loaded) {\n                registeredShared.loaded = loaded;\n            }\n            if (from && registeredShared.from !== from) {\n                registeredShared.from = from;\n            }\n        });\n    }\n    _setGlobalShareScopeMap(hostOptions) {\n        const globalShareScopeMap = getGlobalShareScope();\n        const identifier = hostOptions.id || hostOptions.name;\n        if (identifier && !globalShareScopeMap[identifier]) {\n            globalShareScopeMap[identifier] = this.shareScopeMap;\n        }\n    }\n    constructor(host){\n        this.hooks = new PluginSystem({\n            afterResolve: new AsyncWaterfallHook('afterResolve'),\n            beforeLoadShare: new AsyncWaterfallHook('beforeLoadShare'),\n            // not used yet\n            loadShare: new AsyncHook(),\n            resolveShare: new SyncWaterfallHook('resolveShare'),\n            // maybe will change, temporarily for internal use only\n            initContainerShareScopeMap: new SyncWaterfallHook('initContainerShareScopeMap')\n        });\n        this.host = host;\n        this.shareScopeMap = {};\n        this.initTokens = {};\n        this._setGlobalShareScopeMap(host.options);\n    }\n}\n\nclass RemoteHandler {\n    formatAndRegisterRemote(globalOptions, userOptions) {\n        const userRemotes = userOptions.remotes || [];\n        return userRemotes.reduce((res, remote)=>{\n            this.registerRemote(remote, res, {\n                force: false\n            });\n            return res;\n        }, globalOptions.remotes);\n    }\n    setIdToRemoteMap(id, remoteMatchInfo) {\n        const { remote, expose } = remoteMatchInfo;\n        const { name, alias } = remote;\n        this.idToRemoteMap[id] = {\n            name: remote.name,\n            expose\n        };\n        if (alias && id.startsWith(name)) {\n            const idWithAlias = id.replace(name, alias);\n            this.idToRemoteMap[idWithAlias] = {\n                name: remote.name,\n                expose\n            };\n            return;\n        }\n        if (alias && id.startsWith(alias)) {\n            const idWithName = id.replace(alias, name);\n            this.idToRemoteMap[idWithName] = {\n                name: remote.name,\n                expose\n            };\n        }\n    }\n    // eslint-disable-next-line max-lines-per-function\n    // eslint-disable-next-line @typescript-eslint/member-ordering\n    async loadRemote(id, options) {\n        const { host } = this;\n        try {\n            const { loadFactory = true } = options || {\n                loadFactory: true\n            };\n            // 1. Validate the parameters of the retrieved module. There are two module request methods: pkgName + expose and alias + expose.\n            // 2. Request the snapshot information of the current host and globally store the obtained snapshot information. The retrieved module information is partially offline and partially online. The online module information will retrieve the modules used online.\n            // 3. Retrieve the detailed information of the current module from global (remoteEntry address, expose resource address)\n            // 4. After retrieving remoteEntry, call the init of the module, and then retrieve the exported content of the module through get\n            // id: pkgName(@federation/app1) + expose(button) = @federation/app1/button\n            // id: alias(app1) + expose(button) = app1/button\n            // id: alias(app1/utils) + expose(loadash/sort) = app1/utils/loadash/sort\n            const { module, moduleOptions, remoteMatchInfo } = await this.getRemoteModuleAndOptions({\n                id\n            });\n            const { pkgNameOrAlias, remote, expose, id: idRes, remoteSnapshot } = remoteMatchInfo;\n            const moduleOrFactory = await module.get(idRes, expose, options, remoteSnapshot);\n            const moduleWrapper = await this.hooks.lifecycle.onLoad.emit({\n                id: idRes,\n                pkgNameOrAlias,\n                expose,\n                exposeModule: loadFactory ? moduleOrFactory : undefined,\n                exposeModuleFactory: loadFactory ? undefined : moduleOrFactory,\n                remote,\n                options: moduleOptions,\n                moduleInstance: module,\n                origin: host\n            });\n            this.setIdToRemoteMap(id, remoteMatchInfo);\n            if (typeof moduleWrapper === 'function') {\n                return moduleWrapper;\n            }\n            return moduleOrFactory;\n        } catch (error) {\n            const { from = 'runtime' } = options || {\n                from: 'runtime'\n            };\n            const failOver = await this.hooks.lifecycle.errorLoadRemote.emit({\n                id,\n                error,\n                from,\n                lifecycle: 'onLoad',\n                origin: host\n            });\n            if (!failOver) {\n                throw error;\n            }\n            return failOver;\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/member-ordering\n    async preloadRemote(preloadOptions) {\n        const { host } = this;\n        await this.hooks.lifecycle.beforePreloadRemote.emit({\n            preloadOps: preloadOptions,\n            options: host.options,\n            origin: host\n        });\n        const preloadOps = formatPreloadArgs(host.options.remotes, preloadOptions);\n        await Promise.all(preloadOps.map(async (ops)=>{\n            const { remote } = ops;\n            const remoteInfo = getRemoteInfo(remote);\n            const { globalSnapshot, remoteSnapshot } = await host.snapshotHandler.loadRemoteSnapshotInfo({\n                moduleInfo: remote\n            });\n            const assets = await this.hooks.lifecycle.generatePreloadAssets.emit({\n                origin: host,\n                preloadOptions: ops,\n                remote,\n                remoteInfo,\n                globalSnapshot,\n                remoteSnapshot\n            });\n            if (!assets) {\n                return;\n            }\n            preloadAssets(remoteInfo, host, assets);\n        }));\n    }\n    registerRemotes(remotes, options) {\n        const { host } = this;\n        remotes.forEach((remote)=>{\n            this.registerRemote(remote, host.options.remotes, {\n                force: options == null ? void 0 : options.force\n            });\n        });\n    }\n    async getRemoteModuleAndOptions(options) {\n        const { host } = this;\n        const { id } = options;\n        let loadRemoteArgs;\n        try {\n            loadRemoteArgs = await this.hooks.lifecycle.beforeRequest.emit({\n                id,\n                options: host.options,\n                origin: host\n            });\n        } catch (error) {\n            loadRemoteArgs = await this.hooks.lifecycle.errorLoadRemote.emit({\n                id,\n                options: host.options,\n                origin: host,\n                from: 'runtime',\n                error,\n                lifecycle: 'beforeRequest'\n            });\n            if (!loadRemoteArgs) {\n                throw error;\n            }\n        }\n        const { id: idRes } = loadRemoteArgs;\n        const remoteSplitInfo = matchRemoteWithNameAndExpose(host.options.remotes, idRes);\n        assert(remoteSplitInfo, (0,_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_2__.getShortErrorMsg)(_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_2__.RUNTIME_004, _module_federation_error_codes__WEBPACK_IMPORTED_MODULE_2__.runtimeDescMap, {\n            hostName: host.options.name,\n            requestId: idRes\n        }));\n        const { remote: rawRemote } = remoteSplitInfo;\n        const remoteInfo = getRemoteInfo(rawRemote);\n        const matchInfo = await host.sharedHandler.hooks.lifecycle.afterResolve.emit((0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n            id: idRes\n        }, remoteSplitInfo, {\n            options: host.options,\n            origin: host,\n            remoteInfo\n        }));\n        const { remote, expose } = matchInfo;\n        assert(remote && expose, `The 'beforeRequest' hook was executed, but it failed to return the correct 'remote' and 'expose' values while loading ${idRes}.`);\n        let module = host.moduleCache.get(remote.name);\n        const moduleOptions = {\n            host: host,\n            remoteInfo\n        };\n        if (!module) {\n            module = new Module(moduleOptions);\n            host.moduleCache.set(remote.name, module);\n        }\n        return {\n            module,\n            moduleOptions,\n            remoteMatchInfo: matchInfo\n        };\n    }\n    registerRemote(remote, targetRemotes, options) {\n        const { host } = this;\n        const normalizeRemote = ()=>{\n            if (remote.alias) {\n                // Validate if alias equals the prefix of remote.name and remote.alias, if so, throw an error\n                // As multi-level path references cannot guarantee unique names, alias being a prefix of remote.name is not supported\n                const findEqual = targetRemotes.find((item)=>{\n                    var _item_alias;\n                    return remote.alias && (item.name.startsWith(remote.alias) || ((_item_alias = item.alias) == null ? void 0 : _item_alias.startsWith(remote.alias)));\n                });\n                assert(!findEqual, `The alias ${remote.alias} of remote ${remote.name} is not allowed to be the prefix of ${findEqual && findEqual.name} name or alias`);\n            }\n            // Set the remote entry to a complete path\n            if ('entry' in remote) {\n                if ((0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.isBrowserEnv)() && !remote.entry.startsWith('http')) {\n                    remote.entry = new URL(remote.entry, window.location.origin).href;\n                }\n            }\n            if (!remote.shareScope) {\n                remote.shareScope = DEFAULT_SCOPE;\n            }\n            if (!remote.type) {\n                remote.type = DEFAULT_REMOTE_TYPE;\n            }\n        };\n        this.hooks.lifecycle.beforeRegisterRemote.emit({\n            remote,\n            origin: host\n        });\n        const registeredRemote = targetRemotes.find((item)=>item.name === remote.name);\n        if (!registeredRemote) {\n            normalizeRemote();\n            targetRemotes.push(remote);\n            this.hooks.lifecycle.registerRemote.emit({\n                remote,\n                origin: host\n            });\n        } else {\n            const messages = [\n                `The remote \"${remote.name}\" is already registered.`,\n                'Please note that overriding it may cause unexpected errors.'\n            ];\n            if (options == null ? void 0 : options.force) {\n                // remove registered remote\n                this.removeRemote(registeredRemote);\n                normalizeRemote();\n                targetRemotes.push(remote);\n                this.hooks.lifecycle.registerRemote.emit({\n                    remote,\n                    origin: host\n                });\n                (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.warn)(messages.join(' '));\n            }\n        }\n    }\n    removeRemote(remote) {\n        try {\n            const { host } = this;\n            const { name } = remote;\n            const remoteIndex = host.options.remotes.findIndex((item)=>item.name === name);\n            if (remoteIndex !== -1) {\n                host.options.remotes.splice(remoteIndex, 1);\n            }\n            const loadedModule = host.moduleCache.get(remote.name);\n            if (loadedModule) {\n                const remoteInfo = loadedModule.remoteInfo;\n                const key = remoteInfo.entryGlobalName;\n                if (CurrentGlobal[key]) {\n                    var _Object_getOwnPropertyDescriptor;\n                    if ((_Object_getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor(CurrentGlobal, key)) == null ? void 0 : _Object_getOwnPropertyDescriptor.configurable) {\n                        delete CurrentGlobal[key];\n                    } else {\n                        // @ts-ignore\n                        CurrentGlobal[key] = undefined;\n                    }\n                }\n                const remoteEntryUniqueKey = getRemoteEntryUniqueKey(loadedModule.remoteInfo);\n                if (globalLoading[remoteEntryUniqueKey]) {\n                    delete globalLoading[remoteEntryUniqueKey];\n                }\n                host.snapshotHandler.manifestCache.delete(remoteInfo.entry);\n                // delete unloaded shared and instance\n                let remoteInsId = remoteInfo.buildVersion ? (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.composeKeyWithSeparator)(remoteInfo.name, remoteInfo.buildVersion) : remoteInfo.name;\n                const remoteInsIndex = CurrentGlobal.__FEDERATION__.__INSTANCES__.findIndex((ins)=>{\n                    if (remoteInfo.buildVersion) {\n                        return ins.options.id === remoteInsId;\n                    } else {\n                        return ins.name === remoteInsId;\n                    }\n                });\n                if (remoteInsIndex !== -1) {\n                    const remoteIns = CurrentGlobal.__FEDERATION__.__INSTANCES__[remoteInsIndex];\n                    remoteInsId = remoteIns.options.id || remoteInsId;\n                    const globalShareScopeMap = getGlobalShareScope();\n                    let isAllSharedNotUsed = true;\n                    const needDeleteKeys = [];\n                    Object.keys(globalShareScopeMap).forEach((instId)=>{\n                        const shareScopeMap = globalShareScopeMap[instId];\n                        shareScopeMap && Object.keys(shareScopeMap).forEach((shareScope)=>{\n                            const shareScopeVal = shareScopeMap[shareScope];\n                            shareScopeVal && Object.keys(shareScopeVal).forEach((shareName)=>{\n                                const sharedPkgs = shareScopeVal[shareName];\n                                sharedPkgs && Object.keys(sharedPkgs).forEach((shareVersion)=>{\n                                    const shared = sharedPkgs[shareVersion];\n                                    if (shared && typeof shared === 'object' && shared.from === remoteInfo.name) {\n                                        if (shared.loaded || shared.loading) {\n                                            shared.useIn = shared.useIn.filter((usedHostName)=>usedHostName !== remoteInfo.name);\n                                            if (shared.useIn.length) {\n                                                isAllSharedNotUsed = false;\n                                            } else {\n                                                needDeleteKeys.push([\n                                                    instId,\n                                                    shareScope,\n                                                    shareName,\n                                                    shareVersion\n                                                ]);\n                                            }\n                                        } else {\n                                            needDeleteKeys.push([\n                                                instId,\n                                                shareScope,\n                                                shareName,\n                                                shareVersion\n                                            ]);\n                                        }\n                                    }\n                                });\n                            });\n                        });\n                    });\n                    if (isAllSharedNotUsed) {\n                        remoteIns.shareScopeMap = {};\n                        delete globalShareScopeMap[remoteInsId];\n                    }\n                    needDeleteKeys.forEach(([insId, shareScope, shareName, shareVersion])=>{\n                        var _globalShareScopeMap_insId_shareScope_shareName, _globalShareScopeMap_insId_shareScope, _globalShareScopeMap_insId;\n                        (_globalShareScopeMap_insId = globalShareScopeMap[insId]) == null ? true : (_globalShareScopeMap_insId_shareScope = _globalShareScopeMap_insId[shareScope]) == null ? true : (_globalShareScopeMap_insId_shareScope_shareName = _globalShareScopeMap_insId_shareScope[shareName]) == null ? true : delete _globalShareScopeMap_insId_shareScope_shareName[shareVersion];\n                    });\n                    CurrentGlobal.__FEDERATION__.__INSTANCES__.splice(remoteInsIndex, 1);\n                }\n                const { hostGlobalSnapshot } = getGlobalRemoteInfo(remote, host);\n                if (hostGlobalSnapshot) {\n                    const remoteKey = hostGlobalSnapshot && 'remotesInfo' in hostGlobalSnapshot && hostGlobalSnapshot.remotesInfo && getInfoWithoutType(hostGlobalSnapshot.remotesInfo, remote.name).key;\n                    if (remoteKey) {\n                        delete hostGlobalSnapshot.remotesInfo[remoteKey];\n                        if (//eslint-disable-next-line no-extra-boolean-cast\n                        Boolean(Global.__FEDERATION__.__MANIFEST_LOADING__[remoteKey])) {\n                            delete Global.__FEDERATION__.__MANIFEST_LOADING__[remoteKey];\n                        }\n                    }\n                }\n                host.moduleCache.delete(remote.name);\n            }\n        } catch (err) {\n            logger.log('removeRemote fail: ', err);\n        }\n    }\n    constructor(host){\n        this.hooks = new PluginSystem({\n            beforeRegisterRemote: new SyncWaterfallHook('beforeRegisterRemote'),\n            registerRemote: new SyncWaterfallHook('registerRemote'),\n            beforeRequest: new AsyncWaterfallHook('beforeRequest'),\n            onLoad: new AsyncHook('onLoad'),\n            handlePreloadModule: new SyncHook('handlePreloadModule'),\n            errorLoadRemote: new AsyncHook('errorLoadRemote'),\n            beforePreloadRemote: new AsyncHook('beforePreloadRemote'),\n            generatePreloadAssets: new AsyncHook('generatePreloadAssets'),\n            // not used yet\n            afterPreloadRemote: new AsyncHook(),\n            loadEntry: new AsyncHook()\n        });\n        this.host = host;\n        this.idToRemoteMap = {};\n    }\n}\n\nconst USE_SNAPSHOT =  true ? !false : 0; // Default to true (use snapshot) when not explicitly defined\nclass ModuleFederation {\n    initOptions(userOptions) {\n        this.registerPlugins(userOptions.plugins);\n        const options = this.formatOptions(this.options, userOptions);\n        this.options = options;\n        return options;\n    }\n    async loadShare(pkgName, extraOptions) {\n        return this.sharedHandler.loadShare(pkgName, extraOptions);\n    }\n    // The lib function will only be available if the shared set by eager or runtime init is set or the shared is successfully loaded.\n    // 1. If the loaded shared already exists globally, then it will be reused\n    // 2. If lib exists in local shared, it will be used directly\n    // 3. If the local get returns something other than Promise, then it will be used directly\n    loadShareSync(pkgName, extraOptions) {\n        return this.sharedHandler.loadShareSync(pkgName, extraOptions);\n    }\n    initializeSharing(shareScopeName = DEFAULT_SCOPE, extraOptions) {\n        return this.sharedHandler.initializeSharing(shareScopeName, extraOptions);\n    }\n    initRawContainer(name, url, container) {\n        const remoteInfo = getRemoteInfo({\n            name,\n            entry: url\n        });\n        const module = new Module({\n            host: this,\n            remoteInfo\n        });\n        module.remoteEntryExports = container;\n        this.moduleCache.set(name, module);\n        return module;\n    }\n    // eslint-disable-next-line max-lines-per-function\n    // eslint-disable-next-line @typescript-eslint/member-ordering\n    async loadRemote(id, options) {\n        return this.remoteHandler.loadRemote(id, options);\n    }\n    // eslint-disable-next-line @typescript-eslint/member-ordering\n    async preloadRemote(preloadOptions) {\n        return this.remoteHandler.preloadRemote(preloadOptions);\n    }\n    initShareScopeMap(scopeName, shareScope, extraOptions = {}) {\n        this.sharedHandler.initShareScopeMap(scopeName, shareScope, extraOptions);\n    }\n    formatOptions(globalOptions, userOptions) {\n        const { shared } = formatShareConfigs(globalOptions, userOptions);\n        const { userOptions: userOptionsRes, options: globalOptionsRes } = this.hooks.lifecycle.beforeInit.emit({\n            origin: this,\n            userOptions,\n            options: globalOptions,\n            shareInfo: shared\n        });\n        const remotes = this.remoteHandler.formatAndRegisterRemote(globalOptionsRes, userOptionsRes);\n        const { shared: handledShared } = this.sharedHandler.registerShared(globalOptionsRes, userOptionsRes);\n        const plugins = [\n            ...globalOptionsRes.plugins\n        ];\n        if (userOptionsRes.plugins) {\n            userOptionsRes.plugins.forEach((plugin)=>{\n                if (!plugins.includes(plugin)) {\n                    plugins.push(plugin);\n                }\n            });\n        }\n        const optionsRes = (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, globalOptions, userOptions, {\n            plugins,\n            remotes,\n            shared: handledShared\n        });\n        this.hooks.lifecycle.init.emit({\n            origin: this,\n            options: optionsRes\n        });\n        return optionsRes;\n    }\n    registerPlugins(plugins) {\n        const pluginRes = registerPlugins(plugins, this);\n        // Merge plugin\n        this.options.plugins = this.options.plugins.reduce((res, plugin)=>{\n            if (!plugin) return res;\n            if (res && !res.find((item)=>item.name === plugin.name)) {\n                res.push(plugin);\n            }\n            return res;\n        }, pluginRes || []);\n    }\n    registerRemotes(remotes, options) {\n        return this.remoteHandler.registerRemotes(remotes, options);\n    }\n    registerShared(shared) {\n        this.sharedHandler.registerShared(this.options, (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, this.options, {\n            shared\n        }));\n    }\n    constructor(userOptions){\n        this.hooks = new PluginSystem({\n            beforeInit: new SyncWaterfallHook('beforeInit'),\n            init: new SyncHook(),\n            // maybe will change, temporarily for internal use only\n            beforeInitContainer: new AsyncWaterfallHook('beforeInitContainer'),\n            // maybe will change, temporarily for internal use only\n            initContainer: new AsyncWaterfallHook('initContainer')\n        });\n        this.version = \"0.18.3\";\n        this.moduleCache = new Map();\n        this.loaderHook = new PluginSystem({\n            // FIXME: may not be suitable , not open to the public yet\n            getModuleInfo: new SyncHook(),\n            createScript: new SyncHook(),\n            createLink: new SyncHook(),\n            fetch: new AsyncHook(),\n            loadEntryError: new AsyncHook(),\n            getModuleFactory: new AsyncHook()\n        });\n        this.bridgeHook = new PluginSystem({\n            beforeBridgeRender: new SyncHook(),\n            afterBridgeRender: new SyncHook(),\n            beforeBridgeDestroy: new SyncHook(),\n            afterBridgeDestroy: new SyncHook()\n        });\n        const plugins = USE_SNAPSHOT ? [\n            snapshotPlugin(),\n            generatePreloadAssetsPlugin()\n        ] : [];\n        // TODO: Validate the details of the options\n        // Initialize options with default values\n        const defaultOptions = {\n            id: getBuilderId(),\n            name: userOptions.name,\n            plugins,\n            remotes: [],\n            shared: {},\n            inBrowser: (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_1__.isBrowserEnv)()\n        };\n        this.name = userOptions.name;\n        this.options = defaultOptions;\n        this.snapshotHandler = new SnapshotHandler(this);\n        this.sharedHandler = new SharedHandler(this);\n        this.remoteHandler = new RemoteHandler(this);\n        this.shareScopeMap = this.sharedHandler.shareScopeMap;\n        this.registerPlugins([\n            ...defaultOptions.plugins,\n            ...userOptions.plugins || []\n        ]);\n        this.options = this.formatOptions(defaultOptions, userOptions);\n    }\n}\n\nvar index = /*#__PURE__*/Object.freeze({\n    __proto__: null\n});\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@module-federation/runtime-core/dist/index.esm.js\n");

/***/ }),

/***/ "./node_modules/@module-federation/runtime-core/dist/polyfills.esm.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@module-federation/runtime-core/dist/polyfills.esm.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: () => (/* binding */ _extends),\n/* harmony export */   a: () => (/* binding */ _object_without_properties_loose)\n/* harmony export */ });\nfunction _extends() {\n    _extends = Object.assign || function assign(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\n\nfunction _object_without_properties_loose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for(i = 0; i < sourceKeys.length; i++){\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1vZHVsZS1mZWRlcmF0aW9uL3J1bnRpbWUtY29yZS9kaXN0L3BvbHlmaWxscy5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0EsdUJBQXVCLHNCQUFzQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSx1QkFBdUI7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVnRSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxXaW4gMTFcXERlc2t0b3BcXFJlYWN0LU1pY3JvRnJvbnRlbmRcXG1pY3JvLWZyb250ZW5kXFxkYXNoYm9hcmRcXG5vZGVfbW9kdWxlc1xcQG1vZHVsZS1mZWRlcmF0aW9uXFxydW50aW1lLWNvcmVcXGRpc3RcXHBvbHlmaWxscy5lc20uanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gICAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQpIHtcbiAgICAgICAgZm9yKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yKHZhciBrZXkgaW4gc291cmNlKWlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfTtcbiAgICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gX29iamVjdF93aXRob3V0X3Byb3BlcnRpZXNfbG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICAgIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICAgIHZhciB0YXJnZXQgPSB7fTtcbiAgICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gICAgdmFyIGtleSwgaTtcbiAgICBmb3IoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKXtcbiAgICAgICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cblxuZXhwb3J0IHsgX2V4dGVuZHMgYXMgXywgX29iamVjdF93aXRob3V0X3Byb3BlcnRpZXNfbG9vc2UgYXMgYSB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@module-federation/runtime-core/dist/polyfills.esm.js\n");

/***/ }),

/***/ "./node_modules/@module-federation/runtime/dist/index.esm.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@module-federation/runtime/dist/index.esm.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Module: () => (/* reexport safe */ _module_federation_runtime_core__WEBPACK_IMPORTED_MODULE_0__.Module),\n/* harmony export */   ModuleFederation: () => (/* reexport safe */ _module_federation_runtime_core__WEBPACK_IMPORTED_MODULE_0__.ModuleFederation),\n/* harmony export */   createInstance: () => (/* binding */ createInstance),\n/* harmony export */   getInstance: () => (/* binding */ getInstance),\n/* harmony export */   getRemoteEntry: () => (/* reexport safe */ _module_federation_runtime_core__WEBPACK_IMPORTED_MODULE_0__.getRemoteEntry),\n/* harmony export */   getRemoteInfo: () => (/* reexport safe */ _module_federation_runtime_core__WEBPACK_IMPORTED_MODULE_0__.getRemoteInfo),\n/* harmony export */   init: () => (/* binding */ init),\n/* harmony export */   loadRemote: () => (/* binding */ loadRemote),\n/* harmony export */   loadScript: () => (/* reexport safe */ _module_federation_runtime_core__WEBPACK_IMPORTED_MODULE_0__.loadScript),\n/* harmony export */   loadScriptNode: () => (/* reexport safe */ _module_federation_runtime_core__WEBPACK_IMPORTED_MODULE_0__.loadScriptNode),\n/* harmony export */   loadShare: () => (/* binding */ loadShare),\n/* harmony export */   loadShareSync: () => (/* binding */ loadShareSync),\n/* harmony export */   preloadRemote: () => (/* binding */ preloadRemote),\n/* harmony export */   registerGlobalPlugins: () => (/* reexport safe */ _module_federation_runtime_core__WEBPACK_IMPORTED_MODULE_0__.registerGlobalPlugins),\n/* harmony export */   registerPlugins: () => (/* binding */ registerPlugins),\n/* harmony export */   registerRemotes: () => (/* binding */ registerRemotes),\n/* harmony export */   registerShared: () => (/* binding */ registerShared)\n/* harmony export */ });\n/* harmony import */ var _module_federation_runtime_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @module-federation/runtime-core */ \"./node_modules/@module-federation/runtime-core/dist/index.esm.js\");\n/* harmony import */ var _module_federation_error_codes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @module-federation/error-codes */ \"./node_modules/@module-federation/error-codes/dist/index.esm.mjs\");\n/* harmony import */ var _utils_esm_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.esm.js */ \"./node_modules/@module-federation/runtime/dist/utils.esm.js\");\n\n\n\n\n\nfunction createInstance(options) {\n    // Retrieve debug constructor\n    const ModuleFederationConstructor = (0,_module_federation_runtime_core__WEBPACK_IMPORTED_MODULE_0__.getGlobalFederationConstructor)() || _module_federation_runtime_core__WEBPACK_IMPORTED_MODULE_0__.ModuleFederation;\n    const instance = new ModuleFederationConstructor(options);\n    (0,_module_federation_runtime_core__WEBPACK_IMPORTED_MODULE_0__.setGlobalFederationInstance)(instance);\n    return instance;\n}\nlet FederationInstance = null;\n/**\n * @deprecated Use createInstance or getInstance instead\n */ function init(options) {\n    // Retrieve the same instance with the same name\n    const instance = (0,_utils_esm_js__WEBPACK_IMPORTED_MODULE_2__.g)(options.name, options.version);\n    if (!instance) {\n        FederationInstance = createInstance(options);\n        return FederationInstance;\n    } else {\n        // Merge options\n        instance.initOptions(options);\n        if (!FederationInstance) {\n            FederationInstance = instance;\n        }\n        return instance;\n    }\n}\nfunction loadRemote(...args) {\n    (0,_module_federation_runtime_core__WEBPACK_IMPORTED_MODULE_0__.assert)(FederationInstance, (0,_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_1__.getShortErrorMsg)(_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_1__.RUNTIME_009, _module_federation_error_codes__WEBPACK_IMPORTED_MODULE_1__.runtimeDescMap));\n    const loadRemote1 = FederationInstance.loadRemote;\n    // eslint-disable-next-line prefer-spread\n    return loadRemote1.apply(FederationInstance, args);\n}\nfunction loadShare(...args) {\n    (0,_module_federation_runtime_core__WEBPACK_IMPORTED_MODULE_0__.assert)(FederationInstance, (0,_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_1__.getShortErrorMsg)(_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_1__.RUNTIME_009, _module_federation_error_codes__WEBPACK_IMPORTED_MODULE_1__.runtimeDescMap));\n    // eslint-disable-next-line prefer-spread\n    const loadShare1 = FederationInstance.loadShare;\n    return loadShare1.apply(FederationInstance, args);\n}\nfunction loadShareSync(...args) {\n    (0,_module_federation_runtime_core__WEBPACK_IMPORTED_MODULE_0__.assert)(FederationInstance, (0,_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_1__.getShortErrorMsg)(_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_1__.RUNTIME_009, _module_federation_error_codes__WEBPACK_IMPORTED_MODULE_1__.runtimeDescMap));\n    const loadShareSync1 = FederationInstance.loadShareSync;\n    // eslint-disable-next-line prefer-spread\n    return loadShareSync1.apply(FederationInstance, args);\n}\nfunction preloadRemote(...args) {\n    (0,_module_federation_runtime_core__WEBPACK_IMPORTED_MODULE_0__.assert)(FederationInstance, (0,_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_1__.getShortErrorMsg)(_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_1__.RUNTIME_009, _module_federation_error_codes__WEBPACK_IMPORTED_MODULE_1__.runtimeDescMap));\n    // eslint-disable-next-line prefer-spread\n    return FederationInstance.preloadRemote.apply(FederationInstance, args);\n}\nfunction registerRemotes(...args) {\n    (0,_module_federation_runtime_core__WEBPACK_IMPORTED_MODULE_0__.assert)(FederationInstance, (0,_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_1__.getShortErrorMsg)(_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_1__.RUNTIME_009, _module_federation_error_codes__WEBPACK_IMPORTED_MODULE_1__.runtimeDescMap));\n    // eslint-disable-next-line prefer-spread\n    return FederationInstance.registerRemotes.apply(FederationInstance, args);\n}\nfunction registerPlugins(...args) {\n    (0,_module_federation_runtime_core__WEBPACK_IMPORTED_MODULE_0__.assert)(FederationInstance, (0,_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_1__.getShortErrorMsg)(_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_1__.RUNTIME_009, _module_federation_error_codes__WEBPACK_IMPORTED_MODULE_1__.runtimeDescMap));\n    // eslint-disable-next-line prefer-spread\n    return FederationInstance.registerPlugins.apply(FederationInstance, args);\n}\nfunction getInstance() {\n    return FederationInstance;\n}\nfunction registerShared(...args) {\n    (0,_module_federation_runtime_core__WEBPACK_IMPORTED_MODULE_0__.assert)(FederationInstance, (0,_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_1__.getShortErrorMsg)(_module_federation_error_codes__WEBPACK_IMPORTED_MODULE_1__.RUNTIME_009, _module_federation_error_codes__WEBPACK_IMPORTED_MODULE_1__.runtimeDescMap));\n    // eslint-disable-next-line prefer-spread\n    return FederationInstance.registerShared.apply(FederationInstance, args);\n}\n// Inject for debug\n(0,_module_federation_runtime_core__WEBPACK_IMPORTED_MODULE_0__.setGlobalFederationConstructor)(_module_federation_runtime_core__WEBPACK_IMPORTED_MODULE_0__.ModuleFederation);\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1vZHVsZS1mZWRlcmF0aW9uL3J1bnRpbWUvZGlzdC9pbmRleC5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBd0s7QUFDWDtBQUM5RDtBQUM3Qjs7QUFFbEU7QUFDQTtBQUNBLHdDQUF3QywrRkFBOEIsTUFBTSw2RUFBZ0I7QUFDNUY7QUFDQSxJQUFJLDRGQUEyQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixnREFBMkI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksdUVBQU0scUJBQXFCLGdGQUFnQixDQUFDLHVFQUFXLEVBQUUsMEVBQWM7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksdUVBQU0scUJBQXFCLGdGQUFnQixDQUFDLHVFQUFXLEVBQUUsMEVBQWM7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksdUVBQU0scUJBQXFCLGdGQUFnQixDQUFDLHVFQUFXLEVBQUUsMEVBQWM7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksdUVBQU0scUJBQXFCLGdGQUFnQixDQUFDLHVFQUFXLEVBQUUsMEVBQWM7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLHVFQUFNLHFCQUFxQixnRkFBZ0IsQ0FBQyx1RUFBVyxFQUFFLDBFQUFjO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSx1RUFBTSxxQkFBcUIsZ0ZBQWdCLENBQUMsdUVBQVcsRUFBRSwwRUFBYztBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksdUVBQU0scUJBQXFCLGdGQUFnQixDQUFDLHVFQUFXLEVBQUUsMEVBQWM7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRkFBOEIsQ0FBQyw2RUFBZ0I7O0FBRXFHIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFdpbiAxMVxcRGVza3RvcFxcUmVhY3QtTWljcm9Gcm9udGVuZFxcbWljcm8tZnJvbnRlbmRcXGRhc2hib2FyZFxcbm9kZV9tb2R1bGVzXFxAbW9kdWxlLWZlZGVyYXRpb25cXHJ1bnRpbWVcXGRpc3RcXGluZGV4LmVzbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzZXRHbG9iYWxGZWRlcmF0aW9uQ29uc3RydWN0b3IsIE1vZHVsZUZlZGVyYXRpb24sIGdldEdsb2JhbEZlZGVyYXRpb25Db25zdHJ1Y3Rvciwgc2V0R2xvYmFsRmVkZXJhdGlvbkluc3RhbmNlLCBhc3NlcnQgfSBmcm9tICdAbW9kdWxlLWZlZGVyYXRpb24vcnVudGltZS1jb3JlJztcbmV4cG9ydCB7IE1vZHVsZSwgTW9kdWxlRmVkZXJhdGlvbiwgZ2V0UmVtb3RlRW50cnksIGdldFJlbW90ZUluZm8sIGxvYWRTY3JpcHQsIGxvYWRTY3JpcHROb2RlLCByZWdpc3Rlckdsb2JhbFBsdWdpbnMgfSBmcm9tICdAbW9kdWxlLWZlZGVyYXRpb24vcnVudGltZS1jb3JlJztcbmltcG9ydCB7IGdldFNob3J0RXJyb3JNc2csIFJVTlRJTUVfMDA5LCBydW50aW1lRGVzY01hcCB9IGZyb20gJ0Btb2R1bGUtZmVkZXJhdGlvbi9lcnJvci1jb2Rlcyc7XG5pbXBvcnQgeyBnIGFzIGdldEdsb2JhbEZlZGVyYXRpb25JbnN0YW5jZSB9IGZyb20gJy4vdXRpbHMuZXNtLmpzJztcblxuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2Uob3B0aW9ucykge1xuICAgIC8vIFJldHJpZXZlIGRlYnVnIGNvbnN0cnVjdG9yXG4gICAgY29uc3QgTW9kdWxlRmVkZXJhdGlvbkNvbnN0cnVjdG9yID0gZ2V0R2xvYmFsRmVkZXJhdGlvbkNvbnN0cnVjdG9yKCkgfHwgTW9kdWxlRmVkZXJhdGlvbjtcbiAgICBjb25zdCBpbnN0YW5jZSA9IG5ldyBNb2R1bGVGZWRlcmF0aW9uQ29uc3RydWN0b3Iob3B0aW9ucyk7XG4gICAgc2V0R2xvYmFsRmVkZXJhdGlvbkluc3RhbmNlKGluc3RhbmNlKTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG59XG5sZXQgRmVkZXJhdGlvbkluc3RhbmNlID0gbnVsbDtcbi8qKlxuICogQGRlcHJlY2F0ZWQgVXNlIGNyZWF0ZUluc3RhbmNlIG9yIGdldEluc3RhbmNlIGluc3RlYWRcbiAqLyBmdW5jdGlvbiBpbml0KG9wdGlvbnMpIHtcbiAgICAvLyBSZXRyaWV2ZSB0aGUgc2FtZSBpbnN0YW5jZSB3aXRoIHRoZSBzYW1lIG5hbWVcbiAgICBjb25zdCBpbnN0YW5jZSA9IGdldEdsb2JhbEZlZGVyYXRpb25JbnN0YW5jZShvcHRpb25zLm5hbWUsIG9wdGlvbnMudmVyc2lvbik7XG4gICAgaWYgKCFpbnN0YW5jZSkge1xuICAgICAgICBGZWRlcmF0aW9uSW5zdGFuY2UgPSBjcmVhdGVJbnN0YW5jZShvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIEZlZGVyYXRpb25JbnN0YW5jZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNZXJnZSBvcHRpb25zXG4gICAgICAgIGluc3RhbmNlLmluaXRPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICBpZiAoIUZlZGVyYXRpb25JbnN0YW5jZSkge1xuICAgICAgICAgICAgRmVkZXJhdGlvbkluc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGxvYWRSZW1vdGUoLi4uYXJncykge1xuICAgIGFzc2VydChGZWRlcmF0aW9uSW5zdGFuY2UsIGdldFNob3J0RXJyb3JNc2coUlVOVElNRV8wMDksIHJ1bnRpbWVEZXNjTWFwKSk7XG4gICAgY29uc3QgbG9hZFJlbW90ZTEgPSBGZWRlcmF0aW9uSW5zdGFuY2UubG9hZFJlbW90ZTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXNwcmVhZFxuICAgIHJldHVybiBsb2FkUmVtb3RlMS5hcHBseShGZWRlcmF0aW9uSW5zdGFuY2UsIGFyZ3MpO1xufVxuZnVuY3Rpb24gbG9hZFNoYXJlKC4uLmFyZ3MpIHtcbiAgICBhc3NlcnQoRmVkZXJhdGlvbkluc3RhbmNlLCBnZXRTaG9ydEVycm9yTXNnKFJVTlRJTUVfMDA5LCBydW50aW1lRGVzY01hcCkpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItc3ByZWFkXG4gICAgY29uc3QgbG9hZFNoYXJlMSA9IEZlZGVyYXRpb25JbnN0YW5jZS5sb2FkU2hhcmU7XG4gICAgcmV0dXJuIGxvYWRTaGFyZTEuYXBwbHkoRmVkZXJhdGlvbkluc3RhbmNlLCBhcmdzKTtcbn1cbmZ1bmN0aW9uIGxvYWRTaGFyZVN5bmMoLi4uYXJncykge1xuICAgIGFzc2VydChGZWRlcmF0aW9uSW5zdGFuY2UsIGdldFNob3J0RXJyb3JNc2coUlVOVElNRV8wMDksIHJ1bnRpbWVEZXNjTWFwKSk7XG4gICAgY29uc3QgbG9hZFNoYXJlU3luYzEgPSBGZWRlcmF0aW9uSW5zdGFuY2UubG9hZFNoYXJlU3luYztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXNwcmVhZFxuICAgIHJldHVybiBsb2FkU2hhcmVTeW5jMS5hcHBseShGZWRlcmF0aW9uSW5zdGFuY2UsIGFyZ3MpO1xufVxuZnVuY3Rpb24gcHJlbG9hZFJlbW90ZSguLi5hcmdzKSB7XG4gICAgYXNzZXJ0KEZlZGVyYXRpb25JbnN0YW5jZSwgZ2V0U2hvcnRFcnJvck1zZyhSVU5USU1FXzAwOSwgcnVudGltZURlc2NNYXApKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXNwcmVhZFxuICAgIHJldHVybiBGZWRlcmF0aW9uSW5zdGFuY2UucHJlbG9hZFJlbW90ZS5hcHBseShGZWRlcmF0aW9uSW5zdGFuY2UsIGFyZ3MpO1xufVxuZnVuY3Rpb24gcmVnaXN0ZXJSZW1vdGVzKC4uLmFyZ3MpIHtcbiAgICBhc3NlcnQoRmVkZXJhdGlvbkluc3RhbmNlLCBnZXRTaG9ydEVycm9yTXNnKFJVTlRJTUVfMDA5LCBydW50aW1lRGVzY01hcCkpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItc3ByZWFkXG4gICAgcmV0dXJuIEZlZGVyYXRpb25JbnN0YW5jZS5yZWdpc3RlclJlbW90ZXMuYXBwbHkoRmVkZXJhdGlvbkluc3RhbmNlLCBhcmdzKTtcbn1cbmZ1bmN0aW9uIHJlZ2lzdGVyUGx1Z2lucyguLi5hcmdzKSB7XG4gICAgYXNzZXJ0KEZlZGVyYXRpb25JbnN0YW5jZSwgZ2V0U2hvcnRFcnJvck1zZyhSVU5USU1FXzAwOSwgcnVudGltZURlc2NNYXApKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXNwcmVhZFxuICAgIHJldHVybiBGZWRlcmF0aW9uSW5zdGFuY2UucmVnaXN0ZXJQbHVnaW5zLmFwcGx5KEZlZGVyYXRpb25JbnN0YW5jZSwgYXJncyk7XG59XG5mdW5jdGlvbiBnZXRJbnN0YW5jZSgpIHtcbiAgICByZXR1cm4gRmVkZXJhdGlvbkluc3RhbmNlO1xufVxuZnVuY3Rpb24gcmVnaXN0ZXJTaGFyZWQoLi4uYXJncykge1xuICAgIGFzc2VydChGZWRlcmF0aW9uSW5zdGFuY2UsIGdldFNob3J0RXJyb3JNc2coUlVOVElNRV8wMDksIHJ1bnRpbWVEZXNjTWFwKSk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1zcHJlYWRcbiAgICByZXR1cm4gRmVkZXJhdGlvbkluc3RhbmNlLnJlZ2lzdGVyU2hhcmVkLmFwcGx5KEZlZGVyYXRpb25JbnN0YW5jZSwgYXJncyk7XG59XG4vLyBJbmplY3QgZm9yIGRlYnVnXG5zZXRHbG9iYWxGZWRlcmF0aW9uQ29uc3RydWN0b3IoTW9kdWxlRmVkZXJhdGlvbik7XG5cbmV4cG9ydCB7IGNyZWF0ZUluc3RhbmNlLCBnZXRJbnN0YW5jZSwgaW5pdCwgbG9hZFJlbW90ZSwgbG9hZFNoYXJlLCBsb2FkU2hhcmVTeW5jLCBwcmVsb2FkUmVtb3RlLCByZWdpc3RlclBsdWdpbnMsIHJlZ2lzdGVyUmVtb3RlcywgcmVnaXN0ZXJTaGFyZWQgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@module-federation/runtime/dist/index.esm.js\n");

/***/ }),

/***/ "./node_modules/@module-federation/runtime/dist/utils.esm.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@module-federation/runtime/dist/utils.esm.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   g: () => (/* binding */ getGlobalFederationInstance)\n/* harmony export */ });\n/* harmony import */ var _module_federation_runtime_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @module-federation/runtime-core */ \"./node_modules/@module-federation/runtime-core/dist/index.esm.js\");\n\n\n// injected by bundler, so it can not use runtime-core stuff\nfunction getBuilderId() {\n    //@ts-ignore\n    return  true ? \"dashboard:0.1.0\" : 0;\n}\nfunction getGlobalFederationInstance(name, version) {\n    const buildId = getBuilderId();\n    return _module_federation_runtime_core__WEBPACK_IMPORTED_MODULE_0__.CurrentGlobal.__FEDERATION__.__INSTANCES__.find((GMInstance)=>{\n        if (buildId && GMInstance.options.id === buildId) {\n            return true;\n        }\n        if (GMInstance.options.name === name && !GMInstance.options.version && !version) {\n            return true;\n        }\n        if (GMInstance.options.name === name && version && GMInstance.options.version === version) {\n            return true;\n        }\n        return false;\n    });\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1vZHVsZS1mZWRlcmF0aW9uL3J1bnRpbWUvZGlzdC91dGlscy5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBZ0U7O0FBRWhFO0FBQ0E7QUFDQTtBQUNBLFdBQVcsS0FBa0QsR0FBRyxpQkFBMkIsR0FBRyxDQUFFO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBLFdBQVcsMEVBQWE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRTRDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFdpbiAxMVxcRGVza3RvcFxcUmVhY3QtTWljcm9Gcm9udGVuZFxcbWljcm8tZnJvbnRlbmRcXGRhc2hib2FyZFxcbm9kZV9tb2R1bGVzXFxAbW9kdWxlLWZlZGVyYXRpb25cXHJ1bnRpbWVcXGRpc3RcXHV0aWxzLmVzbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDdXJyZW50R2xvYmFsIH0gZnJvbSAnQG1vZHVsZS1mZWRlcmF0aW9uL3J1bnRpbWUtY29yZSc7XG5cbi8vIGluamVjdGVkIGJ5IGJ1bmRsZXIsIHNvIGl0IGNhbiBub3QgdXNlIHJ1bnRpbWUtY29yZSBzdHVmZlxuZnVuY3Rpb24gZ2V0QnVpbGRlcklkKCkge1xuICAgIC8vQHRzLWlnbm9yZVxuICAgIHJldHVybiB0eXBlb2YgRkVERVJBVElPTl9CVUlMRF9JREVOVElGSUVSICE9PSAndW5kZWZpbmVkJyA/IEZFREVSQVRJT05fQlVJTERfSURFTlRJRklFUiA6ICcnO1xufVxuZnVuY3Rpb24gZ2V0R2xvYmFsRmVkZXJhdGlvbkluc3RhbmNlKG5hbWUsIHZlcnNpb24pIHtcbiAgICBjb25zdCBidWlsZElkID0gZ2V0QnVpbGRlcklkKCk7XG4gICAgcmV0dXJuIEN1cnJlbnRHbG9iYWwuX19GRURFUkFUSU9OX18uX19JTlNUQU5DRVNfXy5maW5kKChHTUluc3RhbmNlKT0+e1xuICAgICAgICBpZiAoYnVpbGRJZCAmJiBHTUluc3RhbmNlLm9wdGlvbnMuaWQgPT09IGJ1aWxkSWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChHTUluc3RhbmNlLm9wdGlvbnMubmFtZSA9PT0gbmFtZSAmJiAhR01JbnN0YW5jZS5vcHRpb25zLnZlcnNpb24gJiYgIXZlcnNpb24pIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChHTUluc3RhbmNlLm9wdGlvbnMubmFtZSA9PT0gbmFtZSAmJiB2ZXJzaW9uICYmIEdNSW5zdGFuY2Uub3B0aW9ucy52ZXJzaW9uID09PSB2ZXJzaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSk7XG59XG5cbmV4cG9ydCB7IGdldEdsb2JhbEZlZGVyYXRpb25JbnN0YW5jZSBhcyBnIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@module-federation/runtime/dist/utils.esm.js\n");

/***/ }),

/***/ "./node_modules/@module-federation/sdk/dist/index.esm.js":
/*!***************************************************************!*\
  !*** ./node_modules/@module-federation/sdk/dist/index.esm.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BROWSER_LOG_KEY: () => (/* binding */ BROWSER_LOG_KEY),\n/* harmony export */   ENCODE_NAME_PREFIX: () => (/* binding */ ENCODE_NAME_PREFIX),\n/* harmony export */   EncodedNameTransformMap: () => (/* binding */ EncodedNameTransformMap),\n/* harmony export */   FederationModuleManifest: () => (/* binding */ FederationModuleManifest),\n/* harmony export */   MANIFEST_EXT: () => (/* binding */ MANIFEST_EXT),\n/* harmony export */   MFModuleType: () => (/* binding */ MFModuleType),\n/* harmony export */   MFPrefetchCommon: () => (/* binding */ MFPrefetchCommon),\n/* harmony export */   MODULE_DEVTOOL_IDENTIFIER: () => (/* binding */ MODULE_DEVTOOL_IDENTIFIER),\n/* harmony export */   ManifestFileName: () => (/* binding */ ManifestFileName),\n/* harmony export */   NameTransformMap: () => (/* binding */ NameTransformMap),\n/* harmony export */   NameTransformSymbol: () => (/* binding */ NameTransformSymbol),\n/* harmony export */   SEPARATOR: () => (/* binding */ SEPARATOR),\n/* harmony export */   StatsFileName: () => (/* binding */ StatsFileName),\n/* harmony export */   TEMP_DIR: () => (/* binding */ TEMP_DIR),\n/* harmony export */   assert: () => (/* binding */ assert),\n/* harmony export */   composeKeyWithSeparator: () => (/* binding */ composeKeyWithSeparator),\n/* harmony export */   containerPlugin: () => (/* binding */ ContainerPlugin),\n/* harmony export */   containerReferencePlugin: () => (/* binding */ ContainerReferencePlugin),\n/* harmony export */   createLink: () => (/* binding */ createLink),\n/* harmony export */   createLogger: () => (/* binding */ createLogger),\n/* harmony export */   createModuleFederationConfig: () => (/* binding */ createModuleFederationConfig),\n/* harmony export */   createScript: () => (/* binding */ createScript),\n/* harmony export */   createScriptNode: () => (/* binding */ createScriptNode),\n/* harmony export */   decodeName: () => (/* binding */ decodeName),\n/* harmony export */   encodeName: () => (/* binding */ encodeName),\n/* harmony export */   error: () => (/* binding */ error),\n/* harmony export */   generateExposeFilename: () => (/* binding */ generateExposeFilename),\n/* harmony export */   generateShareFilename: () => (/* binding */ generateShareFilename),\n/* harmony export */   generateSnapshotFromManifest: () => (/* binding */ generateSnapshotFromManifest),\n/* harmony export */   getProcessEnv: () => (/* binding */ getProcessEnv),\n/* harmony export */   getResourceUrl: () => (/* binding */ getResourceUrl),\n/* harmony export */   inferAutoPublicPath: () => (/* binding */ inferAutoPublicPath),\n/* harmony export */   isBrowserEnv: () => (/* binding */ isBrowserEnv),\n/* harmony export */   isDebugMode: () => (/* binding */ isDebugMode),\n/* harmony export */   isManifestProvider: () => (/* binding */ isManifestProvider),\n/* harmony export */   isReactNativeEnv: () => (/* binding */ isReactNativeEnv),\n/* harmony export */   isRequiredVersion: () => (/* binding */ isRequiredVersion),\n/* harmony export */   isStaticResourcesEqual: () => (/* binding */ isStaticResourcesEqual),\n/* harmony export */   loadScript: () => (/* binding */ loadScript),\n/* harmony export */   loadScriptNode: () => (/* binding */ loadScriptNode),\n/* harmony export */   logger: () => (/* binding */ logger),\n/* harmony export */   moduleFederationPlugin: () => (/* binding */ ModuleFederationPlugin),\n/* harmony export */   normalizeOptions: () => (/* binding */ normalizeOptions),\n/* harmony export */   parseEntry: () => (/* binding */ parseEntry),\n/* harmony export */   safeToString: () => (/* binding */ safeToString),\n/* harmony export */   safeWrapper: () => (/* binding */ safeWrapper),\n/* harmony export */   sharePlugin: () => (/* binding */ SharePlugin),\n/* harmony export */   simpleJoinRemoteEntry: () => (/* binding */ simpleJoinRemoteEntry),\n/* harmony export */   warn: () => (/* binding */ warn)\n/* harmony export */ });\n/* harmony import */ var _polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./polyfills.esm.js */ \"./node_modules/@module-federation/sdk/dist/polyfills.esm.js\");\n\n\nconst FederationModuleManifest = 'federation-manifest.json';\nconst MANIFEST_EXT = '.json';\nconst BROWSER_LOG_KEY = 'FEDERATION_DEBUG';\nconst NameTransformSymbol = {\n    AT: '@',\n    HYPHEN: '-',\n    SLASH: '/'\n};\nconst NameTransformMap = {\n    [NameTransformSymbol.AT]: 'scope_',\n    [NameTransformSymbol.HYPHEN]: '_',\n    [NameTransformSymbol.SLASH]: '__'\n};\nconst EncodedNameTransformMap = {\n    [NameTransformMap[NameTransformSymbol.AT]]: NameTransformSymbol.AT,\n    [NameTransformMap[NameTransformSymbol.HYPHEN]]: NameTransformSymbol.HYPHEN,\n    [NameTransformMap[NameTransformSymbol.SLASH]]: NameTransformSymbol.SLASH\n};\nconst SEPARATOR = ':';\nconst ManifestFileName = 'mf-manifest.json';\nconst StatsFileName = 'mf-stats.json';\nconst MFModuleType = {\n    NPM: 'npm',\n    APP: 'app'\n};\nconst MODULE_DEVTOOL_IDENTIFIER = '__MF_DEVTOOLS_MODULE_INFO__';\nconst ENCODE_NAME_PREFIX = 'ENCODE_NAME_PREFIX';\nconst TEMP_DIR = '.federation';\nconst MFPrefetchCommon = {\n    identifier: 'MFDataPrefetch',\n    globalKey: '__PREFETCH__',\n    library: 'mf-data-prefetch',\n    exportsKey: '__PREFETCH_EXPORTS__',\n    fileName: 'bootstrap.js'\n};\n\nvar ContainerPlugin = /*#__PURE__*/Object.freeze({\n    __proto__: null\n});\n\nvar ContainerReferencePlugin = /*#__PURE__*/Object.freeze({\n    __proto__: null\n});\n\nvar ModuleFederationPlugin = /*#__PURE__*/Object.freeze({\n    __proto__: null\n});\n\nvar SharePlugin = /*#__PURE__*/Object.freeze({\n    __proto__: null\n});\n\nfunction isBrowserEnv() {\n    return typeof window !== 'undefined' && typeof window.document !== 'undefined';\n}\nfunction isReactNativeEnv() {\n    var _navigator;\n    return typeof navigator !== 'undefined' && ((_navigator = navigator) == null ? void 0 : _navigator.product) === 'ReactNative';\n}\nfunction isBrowserDebug() {\n    try {\n        if (isBrowserEnv() && window.localStorage) {\n            return Boolean(localStorage.getItem(BROWSER_LOG_KEY));\n        }\n    } catch (error) {\n        return false;\n    }\n    return false;\n}\nfunction isDebugMode() {\n    if (typeof process !== 'undefined' && process.env && process.env['FEDERATION_DEBUG']) {\n        return Boolean(process.env['FEDERATION_DEBUG']);\n    }\n    if (typeof FEDERATION_DEBUG !== 'undefined' && Boolean(FEDERATION_DEBUG)) {\n        return true;\n    }\n    return isBrowserDebug();\n}\nconst getProcessEnv = function() {\n    return typeof process !== 'undefined' && process.env ? process.env : {};\n};\n\nconst LOG_CATEGORY = '[ Federation Runtime ]';\n// entry: name:version   version : 1.0.0 | ^1.2.3\n// entry: name:entry  entry:  https://localhost:9000/federation-manifest.json\nconst parseEntry = (str, devVerOrUrl, separator = SEPARATOR)=>{\n    const strSplit = str.split(separator);\n    const devVersionOrUrl = getProcessEnv()['NODE_ENV'] === 'development' && devVerOrUrl;\n    const defaultVersion = '*';\n    const isEntry = (s)=>s.startsWith('http') || s.includes(MANIFEST_EXT);\n    // Check if the string starts with a type\n    if (strSplit.length >= 2) {\n        let [name, ...versionOrEntryArr] = strSplit;\n        // @name@manifest-url.json\n        if (str.startsWith(separator)) {\n            name = strSplit.slice(0, 2).join(separator);\n            versionOrEntryArr = [\n                devVersionOrUrl || strSplit.slice(2).join(separator)\n            ];\n        }\n        let versionOrEntry = devVersionOrUrl || versionOrEntryArr.join(separator);\n        if (isEntry(versionOrEntry)) {\n            return {\n                name,\n                entry: versionOrEntry\n            };\n        } else {\n            // Apply version rule\n            // devVersionOrUrl => inputVersion => defaultVersion\n            return {\n                name,\n                version: versionOrEntry || defaultVersion\n            };\n        }\n    } else if (strSplit.length === 1) {\n        const [name] = strSplit;\n        if (devVersionOrUrl && isEntry(devVersionOrUrl)) {\n            return {\n                name,\n                entry: devVersionOrUrl\n            };\n        }\n        return {\n            name,\n            version: devVersionOrUrl || defaultVersion\n        };\n    } else {\n        throw `Invalid entry value: ${str}`;\n    }\n};\nconst composeKeyWithSeparator = function(...args) {\n    if (!args.length) {\n        return '';\n    }\n    return args.reduce((sum, cur)=>{\n        if (!cur) {\n            return sum;\n        }\n        if (!sum) {\n            return cur;\n        }\n        return `${sum}${SEPARATOR}${cur}`;\n    }, '');\n};\nconst encodeName = function(name, prefix = '', withExt = false) {\n    try {\n        const ext = withExt ? '.js' : '';\n        return `${prefix}${name.replace(new RegExp(`${NameTransformSymbol.AT}`, 'g'), NameTransformMap[NameTransformSymbol.AT]).replace(new RegExp(`${NameTransformSymbol.HYPHEN}`, 'g'), NameTransformMap[NameTransformSymbol.HYPHEN]).replace(new RegExp(`${NameTransformSymbol.SLASH}`, 'g'), NameTransformMap[NameTransformSymbol.SLASH])}${ext}`;\n    } catch (err) {\n        throw err;\n    }\n};\nconst decodeName = function(name, prefix, withExt) {\n    try {\n        let decodedName = name;\n        if (prefix) {\n            if (!decodedName.startsWith(prefix)) {\n                return decodedName;\n            }\n            decodedName = decodedName.replace(new RegExp(prefix, 'g'), '');\n        }\n        decodedName = decodedName.replace(new RegExp(`${NameTransformMap[NameTransformSymbol.AT]}`, 'g'), EncodedNameTransformMap[NameTransformMap[NameTransformSymbol.AT]]).replace(new RegExp(`${NameTransformMap[NameTransformSymbol.SLASH]}`, 'g'), EncodedNameTransformMap[NameTransformMap[NameTransformSymbol.SLASH]]).replace(new RegExp(`${NameTransformMap[NameTransformSymbol.HYPHEN]}`, 'g'), EncodedNameTransformMap[NameTransformMap[NameTransformSymbol.HYPHEN]]);\n        if (withExt) {\n            decodedName = decodedName.replace('.js', '');\n        }\n        return decodedName;\n    } catch (err) {\n        throw err;\n    }\n};\nconst generateExposeFilename = (exposeName, withExt)=>{\n    if (!exposeName) {\n        return '';\n    }\n    let expose = exposeName;\n    if (expose === '.') {\n        expose = 'default_export';\n    }\n    if (expose.startsWith('./')) {\n        expose = expose.replace('./', '');\n    }\n    return encodeName(expose, '__federation_expose_', withExt);\n};\nconst generateShareFilename = (pkgName, withExt)=>{\n    if (!pkgName) {\n        return '';\n    }\n    return encodeName(pkgName, '__federation_shared_', withExt);\n};\nconst getResourceUrl = (module, sourceUrl)=>{\n    if ('getPublicPath' in module) {\n        let publicPath;\n        if (!module.getPublicPath.startsWith('function')) {\n            publicPath = new Function(module.getPublicPath)();\n        } else {\n            publicPath = new Function('return ' + module.getPublicPath)()();\n        }\n        return `${publicPath}${sourceUrl}`;\n    } else if ('publicPath' in module) {\n        if (!isBrowserEnv() && !isReactNativeEnv() && 'ssrPublicPath' in module) {\n            return `${module.ssrPublicPath}${sourceUrl}`;\n        }\n        return `${module.publicPath}${sourceUrl}`;\n    } else {\n        console.warn('Cannot get resource URL. If in debug mode, please ignore.', module, sourceUrl);\n        return '';\n    }\n};\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst assert = (condition, msg)=>{\n    if (!condition) {\n        error(msg);\n    }\n};\nconst error = (msg)=>{\n    throw new Error(`${LOG_CATEGORY}: ${msg}`);\n};\nconst warn = (msg)=>{\n    console.warn(`${LOG_CATEGORY}: ${msg}`);\n};\nfunction safeToString(info) {\n    try {\n        return JSON.stringify(info, null, 2);\n    } catch (e) {\n        return '';\n    }\n}\n// RegExp for version string\nconst VERSION_PATTERN_REGEXP = /^([\\d^=v<>~]|[*xX]$)/;\nfunction isRequiredVersion(str) {\n    return VERSION_PATTERN_REGEXP.test(str);\n}\n\nconst simpleJoinRemoteEntry = (rPath, rName)=>{\n    if (!rPath) {\n        return rName;\n    }\n    const transformPath = (str)=>{\n        if (str === '.') {\n            return '';\n        }\n        if (str.startsWith('./')) {\n            return str.replace('./', '');\n        }\n        if (str.startsWith('/')) {\n            const strWithoutSlash = str.slice(1);\n            if (strWithoutSlash.endsWith('/')) {\n                return strWithoutSlash.slice(0, -1);\n            }\n            return strWithoutSlash;\n        }\n        return str;\n    };\n    const transformedPath = transformPath(rPath);\n    if (!transformedPath) {\n        return rName;\n    }\n    if (transformedPath.endsWith('/')) {\n        return `${transformedPath}${rName}`;\n    }\n    return `${transformedPath}/${rName}`;\n};\nfunction inferAutoPublicPath(url) {\n    return url.replace(/#.*$/, '').replace(/\\?.*$/, '').replace(/\\/[^\\/]+$/, '/');\n}\n// Priority: overrides > remotes\n// eslint-disable-next-line max-lines-per-function\nfunction generateSnapshotFromManifest(manifest, options = {}) {\n    var _manifest_metaData, _manifest_metaData1;\n    const { remotes = {}, overrides = {}, version } = options;\n    let remoteSnapshot;\n    const getPublicPath = ()=>{\n        if ('publicPath' in manifest.metaData) {\n            if (manifest.metaData.publicPath === 'auto' && version) {\n                // use same implementation as publicPath auto runtime module implements\n                return inferAutoPublicPath(version);\n            }\n            return manifest.metaData.publicPath;\n        } else {\n            return manifest.metaData.getPublicPath;\n        }\n    };\n    const overridesKeys = Object.keys(overrides);\n    let remotesInfo = {};\n    // If remotes are not provided, only the remotes in the manifest will be read\n    if (!Object.keys(remotes).length) {\n        var _manifest_remotes;\n        remotesInfo = ((_manifest_remotes = manifest.remotes) == null ? void 0 : _manifest_remotes.reduce((res, next)=>{\n            let matchedVersion;\n            const name = next.federationContainerName;\n            // overrides have higher priority\n            if (overridesKeys.includes(name)) {\n                matchedVersion = overrides[name];\n            } else {\n                if ('version' in next) {\n                    matchedVersion = next.version;\n                } else {\n                    matchedVersion = next.entry;\n                }\n            }\n            res[name] = {\n                matchedVersion\n            };\n            return res;\n        }, {})) || {};\n    }\n    // If remotes (deploy scenario) are specified, they need to be traversed again\n    Object.keys(remotes).forEach((key)=>remotesInfo[key] = {\n            // overrides will override dependencies\n            matchedVersion: overridesKeys.includes(key) ? overrides[key] : remotes[key]\n        });\n    const { remoteEntry: { path: remoteEntryPath, name: remoteEntryName, type: remoteEntryType }, types: remoteTypes, buildInfo: { buildVersion }, globalName, ssrRemoteEntry } = manifest.metaData;\n    const { exposes } = manifest;\n    let basicRemoteSnapshot = {\n        version: version ? version : '',\n        buildVersion,\n        globalName,\n        remoteEntry: simpleJoinRemoteEntry(remoteEntryPath, remoteEntryName),\n        remoteEntryType,\n        remoteTypes: simpleJoinRemoteEntry(remoteTypes.path, remoteTypes.name),\n        remoteTypesZip: remoteTypes.zip || '',\n        remoteTypesAPI: remoteTypes.api || '',\n        remotesInfo,\n        shared: manifest == null ? void 0 : manifest.shared.map((item)=>({\n                assets: item.assets,\n                sharedName: item.name,\n                version: item.version\n            })),\n        modules: exposes == null ? void 0 : exposes.map((expose)=>({\n                moduleName: expose.name,\n                modulePath: expose.path,\n                assets: expose.assets\n            }))\n    };\n    if ((_manifest_metaData = manifest.metaData) == null ? void 0 : _manifest_metaData.prefetchInterface) {\n        const prefetchInterface = manifest.metaData.prefetchInterface;\n        basicRemoteSnapshot = (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, basicRemoteSnapshot, {\n            prefetchInterface\n        });\n    }\n    if ((_manifest_metaData1 = manifest.metaData) == null ? void 0 : _manifest_metaData1.prefetchEntry) {\n        const { path, name, type } = manifest.metaData.prefetchEntry;\n        basicRemoteSnapshot = (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, basicRemoteSnapshot, {\n            prefetchEntry: simpleJoinRemoteEntry(path, name),\n            prefetchEntryType: type\n        });\n    }\n    if ('publicPath' in manifest.metaData) {\n        remoteSnapshot = (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, basicRemoteSnapshot, {\n            publicPath: getPublicPath(),\n            ssrPublicPath: manifest.metaData.ssrPublicPath\n        });\n    } else {\n        remoteSnapshot = (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, basicRemoteSnapshot, {\n            getPublicPath: getPublicPath()\n        });\n    }\n    if (ssrRemoteEntry) {\n        const fullSSRRemoteEntry = simpleJoinRemoteEntry(ssrRemoteEntry.path, ssrRemoteEntry.name);\n        remoteSnapshot.ssrRemoteEntry = fullSSRRemoteEntry;\n        remoteSnapshot.ssrRemoteEntryType = ssrRemoteEntry.type || 'commonjs-module';\n    }\n    return remoteSnapshot;\n}\nfunction isManifestProvider(moduleInfo) {\n    if ('remoteEntry' in moduleInfo && moduleInfo.remoteEntry.includes(MANIFEST_EXT)) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconst PREFIX = '[ Module Federation ]';\nlet Logger = class Logger {\n    setPrefix(prefix) {\n        this.prefix = prefix;\n    }\n    log(...args) {\n        console.log(this.prefix, ...args);\n    }\n    warn(...args) {\n        console.log(this.prefix, ...args);\n    }\n    error(...args) {\n        console.log(this.prefix, ...args);\n    }\n    success(...args) {\n        console.log(this.prefix, ...args);\n    }\n    info(...args) {\n        console.log(this.prefix, ...args);\n    }\n    ready(...args) {\n        console.log(this.prefix, ...args);\n    }\n    debug(...args) {\n        if (isDebugMode()) {\n            console.log(this.prefix, ...args);\n        }\n    }\n    constructor(prefix){\n        this.prefix = prefix;\n    }\n};\nfunction createLogger(prefix) {\n    return new Logger(prefix);\n}\nconst logger = createLogger(PREFIX);\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nasync function safeWrapper(callback, disableWarn) {\n    try {\n        const res = await callback();\n        return res;\n    } catch (e) {\n        !disableWarn && warn(e);\n        return;\n    }\n}\nfunction isStaticResourcesEqual(url1, url2) {\n    const REG_EXP = /^(https?:)?\\/\\//i;\n    // Transform url1 and url2 into relative paths\n    const relativeUrl1 = url1.replace(REG_EXP, '').replace(/\\/$/, '');\n    const relativeUrl2 = url2.replace(REG_EXP, '').replace(/\\/$/, '');\n    // Check if the relative paths are identical\n    return relativeUrl1 === relativeUrl2;\n}\nfunction createScript(info) {\n    // Retrieve the existing script element by its src attribute\n    let script = null;\n    let needAttach = true;\n    let timeout = 20000;\n    let timeoutId;\n    const scripts = document.getElementsByTagName('script');\n    for(let i = 0; i < scripts.length; i++){\n        const s = scripts[i];\n        const scriptSrc = s.getAttribute('src');\n        if (scriptSrc && isStaticResourcesEqual(scriptSrc, info.url)) {\n            script = s;\n            needAttach = false;\n            break;\n        }\n    }\n    if (!script) {\n        const attrs = info.attrs;\n        script = document.createElement('script');\n        script.type = (attrs == null ? void 0 : attrs['type']) === 'module' ? 'module' : 'text/javascript';\n        let createScriptRes = undefined;\n        if (info.createScriptHook) {\n            createScriptRes = info.createScriptHook(info.url, info.attrs);\n            if (createScriptRes instanceof HTMLScriptElement) {\n                script = createScriptRes;\n            } else if (typeof createScriptRes === 'object') {\n                if ('script' in createScriptRes && createScriptRes.script) {\n                    script = createScriptRes.script;\n                }\n                if ('timeout' in createScriptRes && createScriptRes.timeout) {\n                    timeout = createScriptRes.timeout;\n                }\n            }\n        }\n        if (!script.src) {\n            script.src = info.url;\n        }\n        if (attrs && !createScriptRes) {\n            Object.keys(attrs).forEach((name)=>{\n                if (script) {\n                    if (name === 'async' || name === 'defer') {\n                        script[name] = attrs[name];\n                    // Attributes that do not exist are considered overridden\n                    } else if (!script.getAttribute(name)) {\n                        script.setAttribute(name, attrs[name]);\n                    }\n                }\n            });\n        }\n    }\n    const onScriptComplete = async (prev, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    event)=>{\n        clearTimeout(timeoutId);\n        const onScriptCompleteCallback = ()=>{\n            if ((event == null ? void 0 : event.type) === 'error') {\n                (info == null ? void 0 : info.onErrorCallback) && (info == null ? void 0 : info.onErrorCallback(event));\n            } else {\n                (info == null ? void 0 : info.cb) && (info == null ? void 0 : info.cb());\n            }\n        };\n        // Prevent memory leaks in IE.\n        if (script) {\n            script.onerror = null;\n            script.onload = null;\n            safeWrapper(()=>{\n                const { needDeleteScript = true } = info;\n                if (needDeleteScript) {\n                    (script == null ? void 0 : script.parentNode) && script.parentNode.removeChild(script);\n                }\n            });\n            if (prev && typeof prev === 'function') {\n                const result = prev(event);\n                if (result instanceof Promise) {\n                    const res = await result;\n                    onScriptCompleteCallback();\n                    return res;\n                }\n                onScriptCompleteCallback();\n                return result;\n            }\n        }\n        onScriptCompleteCallback();\n    };\n    script.onerror = onScriptComplete.bind(null, script.onerror);\n    script.onload = onScriptComplete.bind(null, script.onload);\n    timeoutId = setTimeout(()=>{\n        onScriptComplete(null, new Error(`Remote script \"${info.url}\" time-outed.`));\n    }, timeout);\n    return {\n        script,\n        needAttach\n    };\n}\nfunction createLink(info) {\n    // <link rel=\"preload\" href=\"script.js\" as=\"script\">\n    // Retrieve the existing script element by its src attribute\n    let link = null;\n    let needAttach = true;\n    const links = document.getElementsByTagName('link');\n    for(let i = 0; i < links.length; i++){\n        const l = links[i];\n        const linkHref = l.getAttribute('href');\n        const linkRel = l.getAttribute('rel');\n        if (linkHref && isStaticResourcesEqual(linkHref, info.url) && linkRel === info.attrs['rel']) {\n            link = l;\n            needAttach = false;\n            break;\n        }\n    }\n    if (!link) {\n        link = document.createElement('link');\n        link.setAttribute('href', info.url);\n        let createLinkRes = undefined;\n        const attrs = info.attrs;\n        if (info.createLinkHook) {\n            createLinkRes = info.createLinkHook(info.url, attrs);\n            if (createLinkRes instanceof HTMLLinkElement) {\n                link = createLinkRes;\n            }\n        }\n        if (attrs && !createLinkRes) {\n            Object.keys(attrs).forEach((name)=>{\n                if (link && !link.getAttribute(name)) {\n                    link.setAttribute(name, attrs[name]);\n                }\n            });\n        }\n    }\n    const onLinkComplete = (prev, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    event)=>{\n        const onLinkCompleteCallback = ()=>{\n            if ((event == null ? void 0 : event.type) === 'error') {\n                (info == null ? void 0 : info.onErrorCallback) && (info == null ? void 0 : info.onErrorCallback(event));\n            } else {\n                (info == null ? void 0 : info.cb) && (info == null ? void 0 : info.cb());\n            }\n        };\n        // Prevent memory leaks in IE.\n        if (link) {\n            link.onerror = null;\n            link.onload = null;\n            safeWrapper(()=>{\n                const { needDeleteLink = true } = info;\n                if (needDeleteLink) {\n                    (link == null ? void 0 : link.parentNode) && link.parentNode.removeChild(link);\n                }\n            });\n            if (prev) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                const res = prev(event);\n                onLinkCompleteCallback();\n                return res;\n            }\n        }\n        onLinkCompleteCallback();\n    };\n    link.onerror = onLinkComplete.bind(null, link.onerror);\n    link.onload = onLinkComplete.bind(null, link.onload);\n    return {\n        link,\n        needAttach\n    };\n}\nfunction loadScript(url, info) {\n    const { attrs = {}, createScriptHook } = info;\n    return new Promise((resolve, reject)=>{\n        const { script, needAttach } = createScript({\n            url,\n            cb: resolve,\n            onErrorCallback: reject,\n            attrs: (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({\n                fetchpriority: 'high'\n            }, attrs),\n            createScriptHook,\n            needDeleteScript: true\n        });\n        needAttach && document.head.appendChild(script);\n    });\n}\n\nconst sdkImportCache = new Map();\nfunction importNodeModule(name) {\n    if (!name) {\n        throw new Error('import specifier is required');\n    }\n    // Check cache to prevent infinite recursion\n    if (sdkImportCache.has(name)) {\n        return sdkImportCache.get(name);\n    }\n    const importModule = new Function('name', `return import(name)`);\n    const promise = importModule(name).then((res)=>res).catch((error)=>{\n        console.error(`Error importing module ${name}:`, error);\n        // Remove from cache on error so it can be retried\n        sdkImportCache.delete(name);\n        throw error;\n    });\n    // Cache the promise to prevent recursive calls\n    sdkImportCache.set(name, promise);\n    return promise;\n}\nconst loadNodeFetch = async ()=>{\n    const fetchModule = await importNodeModule('node-fetch');\n    return fetchModule.default || fetchModule;\n};\nconst lazyLoaderHookFetch = async (input, init, loaderHook)=>{\n    const hook = (url, init)=>{\n        return loaderHook.lifecycle.fetch.emit(url, init);\n    };\n    const res = await hook(input, init || {});\n    if (!res || !(res instanceof Response)) {\n        const fetchFunction = typeof fetch === 'undefined' ? await loadNodeFetch() : fetch;\n        return fetchFunction(input, init || {});\n    }\n    return res;\n};\nconst createScriptNode = typeof ENV_TARGET === 'undefined' || ENV_TARGET !== 'web' ? (url, cb, attrs, loaderHook)=>{\n    if (loaderHook == null ? void 0 : loaderHook.createScriptHook) {\n        const hookResult = loaderHook.createScriptHook(url);\n        if (hookResult && typeof hookResult === 'object' && 'url' in hookResult) {\n            url = hookResult.url;\n        }\n    }\n    let urlObj;\n    try {\n        urlObj = new URL(url);\n    } catch (e) {\n        console.error('Error constructing URL:', e);\n        cb(new Error(`Invalid URL: ${e}`));\n        return;\n    }\n    const getFetch = async ()=>{\n        if (loaderHook == null ? void 0 : loaderHook.fetch) {\n            return (input, init)=>lazyLoaderHookFetch(input, init, loaderHook);\n        }\n        return typeof fetch === 'undefined' ? loadNodeFetch() : fetch;\n    };\n    const handleScriptFetch = async (f, urlObj)=>{\n        try {\n            var //@ts-ignore\n            _vm_constants;\n            const res = await f(urlObj.href);\n            const data = await res.text();\n            const [path, vm] = await Promise.all([\n                importNodeModule('path'),\n                importNodeModule('vm')\n            ]);\n            const scriptContext = {\n                exports: {},\n                module: {\n                    exports: {}\n                }\n            };\n            const urlDirname = urlObj.pathname.split('/').slice(0, -1).join('/');\n            const filename = path.basename(urlObj.pathname);\n            var _vm_constants_USE_MAIN_CONTEXT_DEFAULT_LOADER;\n            const script = new vm.Script(`(function(exports, module, require, __dirname, __filename) {${data}\\n})`, {\n                filename,\n                importModuleDynamically: (_vm_constants_USE_MAIN_CONTEXT_DEFAULT_LOADER = (_vm_constants = vm.constants) == null ? void 0 : _vm_constants.USE_MAIN_CONTEXT_DEFAULT_LOADER) != null ? _vm_constants_USE_MAIN_CONTEXT_DEFAULT_LOADER : importNodeModule\n            });\n            script.runInThisContext()(scriptContext.exports, scriptContext.module, eval('require'), urlDirname, filename);\n            const exportedInterface = scriptContext.module.exports || scriptContext.exports;\n            if (attrs && exportedInterface && attrs['globalName']) {\n                const container = exportedInterface[attrs['globalName']] || exportedInterface;\n                cb(undefined, container);\n                return;\n            }\n            cb(undefined, exportedInterface);\n        } catch (e) {\n            cb(e instanceof Error ? e : new Error(`Script execution error: ${e}`));\n        }\n    };\n    getFetch().then(async (f)=>{\n        if ((attrs == null ? void 0 : attrs['type']) === 'esm' || (attrs == null ? void 0 : attrs['type']) === 'module') {\n            return loadModule(urlObj.href, {\n                fetch: f,\n                vm: await importNodeModule('vm')\n            }).then(async (module)=>{\n                await module.evaluate();\n                cb(undefined, module.namespace);\n            }).catch((e)=>{\n                cb(e instanceof Error ? e : new Error(`Script execution error: ${e}`));\n            });\n        }\n        handleScriptFetch(f, urlObj);\n    }).catch((err)=>{\n        cb(err);\n    });\n} : (url, cb, attrs, loaderHook)=>{\n    cb(new Error('createScriptNode is disabled in non-Node.js environment'));\n};\nconst loadScriptNode = typeof ENV_TARGET === 'undefined' || ENV_TARGET !== 'web' ? (url, info)=>{\n    return new Promise((resolve, reject)=>{\n        createScriptNode(url, (error, scriptContext)=>{\n            if (error) {\n                reject(error);\n            } else {\n                var _info_attrs, _info_attrs1;\n                const remoteEntryKey = (info == null ? void 0 : (_info_attrs = info.attrs) == null ? void 0 : _info_attrs['globalName']) || `__FEDERATION_${info == null ? void 0 : (_info_attrs1 = info.attrs) == null ? void 0 : _info_attrs1['name']}:custom__`;\n                const entryExports = globalThis[remoteEntryKey] = scriptContext;\n                resolve(entryExports);\n            }\n        }, info.attrs, info.loaderHook);\n    });\n} : (url, info)=>{\n    throw new Error('loadScriptNode is disabled in non-Node.js environment');\n};\nconst esmModuleCache = new Map();\nasync function loadModule(url, options) {\n    // Check cache to prevent infinite recursion in ESM loading\n    if (esmModuleCache.has(url)) {\n        return esmModuleCache.get(url);\n    }\n    const { fetch: fetch1, vm } = options;\n    const response = await fetch1(url);\n    const code = await response.text();\n    const module = new vm.SourceTextModule(code, {\n        // @ts-ignore\n        importModuleDynamically: async (specifier, script)=>{\n            const resolvedUrl = new URL(specifier, url).href;\n            return loadModule(resolvedUrl, options);\n        }\n    });\n    // Cache the module before linking to prevent cycles\n    esmModuleCache.set(url, module);\n    await module.link(async (specifier)=>{\n        const resolvedUrl = new URL(specifier, url).href;\n        const module = await loadModule(resolvedUrl, options);\n        return module;\n    });\n    return module;\n}\n\nfunction normalizeOptions(enableDefault, defaultOptions, key) {\n    return function(options) {\n        if (options === false) {\n            return false;\n        }\n        if (typeof options === 'undefined') {\n            if (enableDefault) {\n                return defaultOptions;\n            } else {\n                return false;\n            }\n        }\n        if (options === true) {\n            return defaultOptions;\n        }\n        if (options && typeof options === 'object') {\n            return (0,_polyfills_esm_js__WEBPACK_IMPORTED_MODULE_0__._)({}, defaultOptions, options);\n        }\n        throw new Error(`Unexpected type for \\`${key}\\`, expect boolean/undefined/object, got: ${typeof options}`);\n    };\n}\n\nconst createModuleFederationConfig = (options)=>{\n    return options;\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@module-federation/sdk/dist/index.esm.js\n");

/***/ }),

/***/ "./node_modules/@module-federation/sdk/dist/polyfills.esm.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@module-federation/sdk/dist/polyfills.esm.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: () => (/* binding */ _extends)\n/* harmony export */ });\nfunction _extends() {\n    _extends = Object.assign || function assign(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1vZHVsZS1mZWRlcmF0aW9uL3Nkay9kaXN0L3BvbHlmaWxscy5lc20uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQSx1QkFBdUIsc0JBQXNCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUV5QiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxXaW4gMTFcXERlc2t0b3BcXFJlYWN0LU1pY3JvRnJvbnRlbmRcXG1pY3JvLWZyb250ZW5kXFxkYXNoYm9hcmRcXG5vZGVfbW9kdWxlc1xcQG1vZHVsZS1mZWRlcmF0aW9uXFxzZGtcXGRpc3RcXHBvbHlmaWxscy5lc20uanMiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gICAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQpIHtcbiAgICAgICAgZm9yKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yKHZhciBrZXkgaW4gc291cmNlKWlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfTtcbiAgICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZXhwb3J0IHsgX2V4dGVuZHMgYXMgXyB9O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@module-federation/sdk/dist/polyfills.esm.js\n");

/***/ }),

/***/ "./node_modules/@module-federation/webpack-bundler-runtime/dist/constant.esm.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@module-federation/webpack-bundler-runtime/dist/constant.esm.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FEDERATION_SUPPORTED_TYPES: () => (/* binding */ FEDERATION_SUPPORTED_TYPES)\n/* harmony export */ });\nconst FEDERATION_SUPPORTED_TYPES = [\n    'script'\n];\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1vZHVsZS1mZWRlcmF0aW9uL3dlYnBhY2stYnVuZGxlci1ydW50aW1lL2Rpc3QvY29uc3RhbnQuZXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7O0FBRXNDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFdpbiAxMVxcRGVza3RvcFxcUmVhY3QtTWljcm9Gcm9udGVuZFxcbWljcm8tZnJvbnRlbmRcXGRhc2hib2FyZFxcbm9kZV9tb2R1bGVzXFxAbW9kdWxlLWZlZGVyYXRpb25cXHdlYnBhY2stYnVuZGxlci1ydW50aW1lXFxkaXN0XFxjb25zdGFudC5lc20uanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgRkVERVJBVElPTl9TVVBQT1JURURfVFlQRVMgPSBbXG4gICAgJ3NjcmlwdCdcbl07XG5cbmV4cG9ydCB7IEZFREVSQVRJT05fU1VQUE9SVEVEX1RZUEVTIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@module-federation/webpack-bundler-runtime/dist/constant.esm.js\n");

/***/ }),

/***/ "./node_modules/@module-federation/webpack-bundler-runtime/dist/index.esm.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@module-federation/webpack-bundler-runtime/dist/index.esm.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ federation)\n/* harmony export */ });\n/* harmony import */ var _module_federation_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @module-federation/runtime */ \"./node_modules/@module-federation/runtime/dist/index.esm.js\");\n/* harmony import */ var _constant_esm_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constant.esm.js */ \"./node_modules/@module-federation/webpack-bundler-runtime/dist/constant.esm.js\");\n/* harmony import */ var _module_federation_sdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @module-federation/sdk */ \"./node_modules/@module-federation/sdk/dist/index.esm.js\");\n\n\n\n\nfunction attachShareScopeMap(webpackRequire) {\n    if (!webpackRequire.S || webpackRequire.federation.hasAttachShareScopeMap || !webpackRequire.federation.instance || !webpackRequire.federation.instance.shareScopeMap) {\n        return;\n    }\n    webpackRequire.S = webpackRequire.federation.instance.shareScopeMap;\n    webpackRequire.federation.hasAttachShareScopeMap = true;\n}\n\nfunction remotes(options) {\n    const { chunkId, promises, chunkMapping, idToExternalAndNameMapping, webpackRequire, idToRemoteMap } = options;\n    attachShareScopeMap(webpackRequire);\n    if (webpackRequire.o(chunkMapping, chunkId)) {\n        chunkMapping[chunkId].forEach((id)=>{\n            let getScope = webpackRequire.R;\n            if (!getScope) {\n                getScope = [];\n            }\n            const data = idToExternalAndNameMapping[id];\n            const remoteInfos = idToRemoteMap[id];\n            // @ts-ignore seems not work\n            if (getScope.indexOf(data) >= 0) {\n                return;\n            }\n            // @ts-ignore seems not work\n            getScope.push(data);\n            if (data.p) {\n                return promises.push(data.p);\n            }\n            const onError = (error)=>{\n                if (!error) {\n                    error = new Error('Container missing');\n                }\n                if (typeof error.message === 'string') {\n                    error.message += `\\nwhile loading \"${data[1]}\" from ${data[2]}`;\n                }\n                webpackRequire.m[id] = ()=>{\n                    throw error;\n                };\n                data.p = 0;\n            };\n            const handleFunction = (fn, arg1, arg2, d, next, first)=>{\n                try {\n                    const promise = fn(arg1, arg2);\n                    if (promise && promise.then) {\n                        const p = promise.then((result)=>next(result, d), onError);\n                        if (first) {\n                            promises.push(data.p = p);\n                        } else {\n                            return p;\n                        }\n                    } else {\n                        return next(promise, d, first);\n                    }\n                } catch (error) {\n                    onError(error);\n                }\n            };\n            const onExternal = (external, _, first)=>external ? handleFunction(webpackRequire.I, data[0], 0, external, onInitialized, first) : onError();\n            // eslint-disable-next-line no-var\n            var onInitialized = (_, external, first)=>handleFunction(external.get, data[1], getScope, 0, onFactory, first);\n            // eslint-disable-next-line no-var\n            var onFactory = (factory)=>{\n                data.p = 1;\n                webpackRequire.m[id] = (module)=>{\n                    module.exports = factory();\n                };\n            };\n            const onRemoteLoaded = ()=>{\n                try {\n                    const remoteName = (0,_module_federation_sdk__WEBPACK_IMPORTED_MODULE_2__.decodeName)(remoteInfos[0].name, _module_federation_sdk__WEBPACK_IMPORTED_MODULE_2__.ENCODE_NAME_PREFIX);\n                    const remoteModuleName = remoteName + data[1].slice(1);\n                    const instance = webpackRequire.federation.instance;\n                    const loadRemote = ()=>webpackRequire.federation.instance.loadRemote(remoteModuleName, {\n                            loadFactory: false,\n                            from: 'build'\n                        });\n                    if (instance.options.shareStrategy === 'version-first') {\n                        return Promise.all(instance.sharedHandler.initializeSharing(data[0])).then(()=>{\n                            return loadRemote();\n                        });\n                    }\n                    return loadRemote();\n                } catch (error) {\n                    onError(error);\n                }\n            };\n            const useRuntimeLoad = remoteInfos.length === 1 && _constant_esm_js__WEBPACK_IMPORTED_MODULE_1__.FEDERATION_SUPPORTED_TYPES.includes(remoteInfos[0].externalType) && remoteInfos[0].name;\n            if (useRuntimeLoad) {\n                handleFunction(onRemoteLoaded, data[2], 0, 0, onFactory, 1);\n            } else {\n                handleFunction(webpackRequire, data[2], 0, 0, onExternal, 1);\n            }\n        });\n    }\n}\n\nfunction consumes(options) {\n    const { chunkId, promises, chunkMapping, installedModules, moduleToHandlerMapping, webpackRequire } = options;\n    attachShareScopeMap(webpackRequire);\n    if (webpackRequire.o(chunkMapping, chunkId)) {\n        chunkMapping[chunkId].forEach((id)=>{\n            if (webpackRequire.o(installedModules, id)) {\n                return promises.push(installedModules[id]);\n            }\n            const onFactory = (factory)=>{\n                installedModules[id] = 0;\n                webpackRequire.m[id] = (module)=>{\n                    var _shareInfo_shareConfig;\n                    delete webpackRequire.c[id];\n                    const result = factory();\n                    // Add layer property from shareConfig if available\n                    const { shareInfo } = moduleToHandlerMapping[id];\n                    if ((shareInfo == null ? void 0 : (_shareInfo_shareConfig = shareInfo.shareConfig) == null ? void 0 : _shareInfo_shareConfig.layer) && result && typeof result === 'object') {\n                        try {\n                            // Only set layer if it's not already defined or if it's undefined\n                            if (!result.hasOwnProperty('layer') || result.layer === undefined) {\n                                result.layer = shareInfo.shareConfig.layer;\n                            }\n                        } catch (e) {\n                        // Ignore if layer property is read-only\n                        }\n                    }\n                    module.exports = result;\n                };\n            };\n            const onError = (error)=>{\n                delete installedModules[id];\n                webpackRequire.m[id] = (module)=>{\n                    delete webpackRequire.c[id];\n                    throw error;\n                };\n            };\n            try {\n                const federationInstance = webpackRequire.federation.instance;\n                if (!federationInstance) {\n                    throw new Error('Federation instance not found!');\n                }\n                const { shareKey, getter, shareInfo } = moduleToHandlerMapping[id];\n                const promise = federationInstance.loadShare(shareKey, {\n                    customShareInfo: shareInfo\n                }).then((factory)=>{\n                    if (factory === false) {\n                        return getter();\n                    }\n                    return factory;\n                });\n                if (promise.then) {\n                    promises.push(installedModules[id] = promise.then(onFactory).catch(onError));\n                } else {\n                    // @ts-ignore maintain previous logic\n                    onFactory(promise);\n                }\n            } catch (e) {\n                onError(e);\n            }\n        });\n    }\n}\n\nfunction initializeSharing({ shareScopeName, webpackRequire, initPromises, initTokens, initScope }) {\n    const shareScopeKeys = Array.isArray(shareScopeName) ? shareScopeName : [\n        shareScopeName\n    ];\n    var initializeSharingPromises = [];\n    var _initializeSharing = function(shareScopeKey) {\n        if (!initScope) initScope = [];\n        const mfInstance = webpackRequire.federation.instance;\n        // handling circular init calls\n        var initToken = initTokens[shareScopeKey];\n        if (!initToken) initToken = initTokens[shareScopeKey] = {\n            from: mfInstance.name\n        };\n        if (initScope.indexOf(initToken) >= 0) return;\n        initScope.push(initToken);\n        const promise = initPromises[shareScopeKey];\n        if (promise) return promise;\n        var warn = (msg)=>typeof console !== 'undefined' && console.warn && console.warn(msg);\n        var initExternal = (id)=>{\n            var handleError = (err)=>warn('Initialization of sharing external failed: ' + err);\n            try {\n                var module = webpackRequire(id);\n                if (!module) return;\n                var initFn = (module)=>module && module.init && // @ts-ignore compat legacy mf shared behavior\n                    module.init(webpackRequire.S[shareScopeKey], initScope, {\n                        shareScopeMap: webpackRequire.S || {},\n                        shareScopeKeys: shareScopeName\n                    });\n                if (module.then) return promises.push(module.then(initFn, handleError));\n                var initResult = initFn(module);\n                // @ts-ignore\n                if (initResult && typeof initResult !== 'boolean' && initResult.then) // @ts-ignore\n                return promises.push(initResult['catch'](handleError));\n            } catch (err) {\n                handleError(err);\n            }\n        };\n        const promises = mfInstance.initializeSharing(shareScopeKey, {\n            strategy: mfInstance.options.shareStrategy,\n            initScope,\n            from: 'build'\n        });\n        attachShareScopeMap(webpackRequire);\n        const bundlerRuntimeRemotesOptions = webpackRequire.federation.bundlerRuntimeOptions.remotes;\n        if (bundlerRuntimeRemotesOptions) {\n            Object.keys(bundlerRuntimeRemotesOptions.idToRemoteMap).forEach((moduleId)=>{\n                const info = bundlerRuntimeRemotesOptions.idToRemoteMap[moduleId];\n                const externalModuleId = bundlerRuntimeRemotesOptions.idToExternalAndNameMapping[moduleId][2];\n                if (info.length > 1) {\n                    initExternal(externalModuleId);\n                } else if (info.length === 1) {\n                    const remoteInfo = info[0];\n                    if (!_constant_esm_js__WEBPACK_IMPORTED_MODULE_1__.FEDERATION_SUPPORTED_TYPES.includes(remoteInfo.externalType)) {\n                        initExternal(externalModuleId);\n                    }\n                }\n            });\n        }\n        if (!promises.length) {\n            return initPromises[shareScopeKey] = true;\n        }\n        return initPromises[shareScopeKey] = Promise.all(promises).then(()=>initPromises[shareScopeKey] = true);\n    };\n    shareScopeKeys.forEach((key)=>{\n        initializeSharingPromises.push(_initializeSharing(key));\n    });\n    return Promise.all(initializeSharingPromises).then(()=>true);\n}\n\nfunction handleInitialConsumes(options) {\n    const { moduleId, moduleToHandlerMapping, webpackRequire } = options;\n    const federationInstance = webpackRequire.federation.instance;\n    if (!federationInstance) {\n        throw new Error('Federation instance not found!');\n    }\n    const { shareKey, shareInfo } = moduleToHandlerMapping[moduleId];\n    try {\n        return federationInstance.loadShareSync(shareKey, {\n            customShareInfo: shareInfo\n        });\n    } catch (err) {\n        console.error('loadShareSync failed! The function should not be called unless you set \"eager:true\". If you do not set it, and encounter this issue, you can check whether an async boundary is implemented.');\n        console.error('The original error message is as follows: ');\n        throw err;\n    }\n}\nfunction installInitialConsumes(options) {\n    const { moduleToHandlerMapping, webpackRequire, installedModules, initialConsumes } = options;\n    initialConsumes.forEach((id)=>{\n        webpackRequire.m[id] = (module)=>{\n            var _shareInfo_shareConfig;\n            // Handle scenario when module is used synchronously\n            installedModules[id] = 0;\n            delete webpackRequire.c[id];\n            const factory = handleInitialConsumes({\n                moduleId: id,\n                moduleToHandlerMapping,\n                webpackRequire\n            });\n            if (typeof factory !== 'function') {\n                throw new Error(`Shared module is not available for eager consumption: ${id}`);\n            }\n            const result = factory();\n            // Add layer property from shareConfig if available\n            const { shareInfo } = moduleToHandlerMapping[id];\n            if ((shareInfo == null ? void 0 : (_shareInfo_shareConfig = shareInfo.shareConfig) == null ? void 0 : _shareInfo_shareConfig.layer) && result && typeof result === 'object') {\n                try {\n                    // Only set layer if it's not already defined or if it's undefined\n                    if (!result.hasOwnProperty('layer') || result.layer === undefined) {\n                        result.layer = shareInfo.shareConfig.layer;\n                    }\n                } catch (e) {\n                // Ignore if layer property is read-only\n                }\n            }\n            module.exports = result;\n        };\n    });\n}\n\nfunction _extends() {\n    _extends = Object.assign || function assign(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\n\nfunction initContainerEntry(options) {\n    const { webpackRequire, shareScope, initScope, shareScopeKey, remoteEntryInitOptions } = options;\n    if (!webpackRequire.S) return;\n    if (!webpackRequire.federation || !webpackRequire.federation.instance || !webpackRequire.federation.initOptions) return;\n    const federationInstance = webpackRequire.federation.instance;\n    federationInstance.initOptions(_extends({\n        name: webpackRequire.federation.initOptions.name,\n        remotes: []\n    }, remoteEntryInitOptions));\n    const hostShareScopeKeys = remoteEntryInitOptions == null ? void 0 : remoteEntryInitOptions.shareScopeKeys;\n    const hostShareScopeMap = remoteEntryInitOptions == null ? void 0 : remoteEntryInitOptions.shareScopeMap;\n    // host: 'default' remote: 'default'  remote['default'] = hostShareScopeMap['default']\n    // host: ['default', 'scope1'] remote: 'default'  remote['default'] = hostShareScopeMap['default']; remote['scope1'] = hostShareScopeMap['scop1']\n    // host: 'default' remote: ['default','scope1']  remote['default'] = hostShareScopeMap['default']; remote['scope1'] = hostShareScopeMap['scope1'] = {}\n    // host: ['scope1','default'] remote: ['scope1','scope2'] => remote['scope1'] = hostShareScopeMap['scope1']; remote['scope2'] = hostShareScopeMap['scope2'] = {};\n    if (!shareScopeKey || typeof shareScopeKey === 'string') {\n        const key = shareScopeKey || 'default';\n        if (Array.isArray(hostShareScopeKeys)) {\n            // const sc = hostShareScopeMap![key];\n            // if (!sc) {\n            //   throw new Error('shareScopeKey is not exist in hostShareScopeMap');\n            // }\n            // federationInstance.initShareScopeMap(key, sc, {\n            //   hostShareScopeMap: remoteEntryInitOptions?.shareScopeMap || {},\n            // });\n            hostShareScopeKeys.forEach((hostKey)=>{\n                if (!hostShareScopeMap[hostKey]) {\n                    hostShareScopeMap[hostKey] = {};\n                }\n                const sc = hostShareScopeMap[hostKey];\n                federationInstance.initShareScopeMap(hostKey, sc, {\n                    hostShareScopeMap: (remoteEntryInitOptions == null ? void 0 : remoteEntryInitOptions.shareScopeMap) || {}\n                });\n            });\n        } else {\n            federationInstance.initShareScopeMap(key, shareScope, {\n                hostShareScopeMap: (remoteEntryInitOptions == null ? void 0 : remoteEntryInitOptions.shareScopeMap) || {}\n            });\n        }\n    } else {\n        shareScopeKey.forEach((key)=>{\n            if (!hostShareScopeKeys || !hostShareScopeMap) {\n                federationInstance.initShareScopeMap(key, shareScope, {\n                    hostShareScopeMap: (remoteEntryInitOptions == null ? void 0 : remoteEntryInitOptions.shareScopeMap) || {}\n                });\n                return;\n            }\n            if (!hostShareScopeMap[key]) {\n                hostShareScopeMap[key] = {};\n            }\n            const sc = hostShareScopeMap[key];\n            federationInstance.initShareScopeMap(key, sc, {\n                hostShareScopeMap: (remoteEntryInitOptions == null ? void 0 : remoteEntryInitOptions.shareScopeMap) || {}\n            });\n        });\n    }\n    if (webpackRequire.federation.attachShareScopeMap) {\n        webpackRequire.federation.attachShareScopeMap(webpackRequire);\n    }\n    if (typeof webpackRequire.federation.prefetch === 'function') {\n        webpackRequire.federation.prefetch();\n    }\n    if (!Array.isArray(shareScopeKey)) {\n        // @ts-ignore\n        return webpackRequire.I(shareScopeKey || 'default', initScope);\n    }\n    var proxyInitializeSharing = Boolean(webpackRequire.federation.initOptions.shared);\n    if (proxyInitializeSharing) {\n        // @ts-ignore\n        return webpackRequire.I(shareScopeKey, initScope);\n    }\n    // @ts-ignore\n    return Promise.all(shareScopeKey.map((key)=>{\n        // @ts-ignore\n        return webpackRequire.I(key, initScope);\n    })).then(()=>true);\n}\n\nconst federation = {\n    runtime: _module_federation_runtime__WEBPACK_IMPORTED_MODULE_0__,\n    instance: undefined,\n    initOptions: undefined,\n    bundlerRuntime: {\n        remotes,\n        consumes,\n        I: initializeSharing,\n        S: {},\n        installInitialConsumes,\n        initContainerEntry\n    },\n    attachShareScopeMap,\n    bundlerRuntimeOptions: {}\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@module-federation/webpack-bundler-runtime/dist/index.esm.js\n");

/***/ }),

/***/ "webpack/container/reference/chart_app":
/*!**********************************************************************************!*\
  !*** external "chart_app@http://localhost:3001/_next/static/ssr/remoteEntry.js" ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var __webpack_error__ = new Error();
module.exports = new Promise((resolve, reject) => {
	if(typeof chart_app !== "undefined") return resolve();
	__webpack_require__.l("http://localhost:3001/_next/static/ssr/remoteEntry.js", (event) => {
		if(typeof chart_app !== "undefined") return resolve();
		var errorType = event && (event.type === 'load' ? 'missing' : event.type);
		var realSrc = event && event.target && event.target.src;
		__webpack_error__.message = 'Loading script failed.\n(' + errorType + ': ' + realSrc + ')';
		__webpack_error__.name = 'ScriptExternalLoadError';
		__webpack_error__.type = errorType;
		__webpack_error__.request = realSrc;
		reject(__webpack_error__);
	}, "chart_app");
}).then(() => (chart_app));

/***/ }),

/***/ "webpack/container/reference/notifications_app":
/*!******************************************************************************************!*\
  !*** external "notifications_app@http://localhost:3003/_next/static/ssr/remoteEntry.js" ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var __webpack_error__ = new Error();
module.exports = new Promise((resolve, reject) => {
	if(typeof notifications_app !== "undefined") return resolve();
	__webpack_require__.l("http://localhost:3003/_next/static/ssr/remoteEntry.js", (event) => {
		if(typeof notifications_app !== "undefined") return resolve();
		var errorType = event && (event.type === 'load' ? 'missing' : event.type);
		var realSrc = event && event.target && event.target.src;
		__webpack_error__.message = 'Loading script failed.\n(' + errorType + ': ' + realSrc + ')';
		__webpack_error__.name = 'ScriptExternalLoadError';
		__webpack_error__.type = errorType;
		__webpack_error__.request = realSrc;
		reject(__webpack_error__);
	}, "notifications_app");
}).then(() => (notifications_app));

/***/ }),

/***/ "webpack/container/reference/profile_app":
/*!************************************************************************************!*\
  !*** external "profile_app@http://localhost:3002/_next/static/ssr/remoteEntry.js" ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var __webpack_error__ = new Error();
module.exports = new Promise((resolve, reject) => {
	if(typeof profile_app !== "undefined") return resolve();
	__webpack_require__.l("http://localhost:3002/_next/static/ssr/remoteEntry.js", (event) => {
		if(typeof profile_app !== "undefined") return resolve();
		var errorType = event && (event.type === 'load' ? 'missing' : event.type);
		var realSrc = event && event.target && event.target.src;
		__webpack_error__.message = 'Loading script failed.\n(' + errorType + ': ' + realSrc + ')';
		__webpack_error__.name = 'ScriptExternalLoadError';
		__webpack_error__.type = errorType;
		__webpack_error__.request = realSrc;
		reject(__webpack_error__);
	}, "profile_app");
}).then(() => (profile_app));

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			var execOptions = { id: moduleId, module: module, factory: __webpack_modules__[moduleId], require: __webpack_require__ };
/******/ 			__webpack_require__.i.forEach(function(handler) { handler(execOptions); });
/******/ 			module = execOptions.module;
/******/ 			execOptions.factory.call(module.exports, module, module.exports, execOptions.require);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete __webpack_module_cache__[moduleId];
/******/ 		}
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = __webpack_module_cache__;
/******/ 	
/******/ 	// expose the module execution interceptor
/******/ 	__webpack_require__.i = [];
/******/ 	
/******/ 	// the startup function
/******/ 	// It's empty as no entry modules are in this chunk
/******/ 	__webpack_require__.x = x => {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/federation runtime */
/******/ 	(() => {
/******/ 		if(!__webpack_require__.federation){
/******/ 			__webpack_require__.federation = {
/******/ 				initOptions: {"name":"dashboard","remotes":[{"alias":"chart_app","name":"chart_app","entry":"http://localhost:3001/_next/static/ssr/remoteEntry.js","shareScope":"default"},{"alias":"profile_app","name":"profile_app","entry":"http://localhost:3002/_next/static/ssr/remoteEntry.js","shareScope":"default"},{"alias":"notifications_app","name":"notifications_app","entry":"http://localhost:3003/_next/static/ssr/remoteEntry.js","shareScope":"default"}],"shareStrategy":"loaded-first"},
/******/ 				chunkMatcher: function(chunkId) {return /^(pages\/(_(app|document|error)|index)|vendor\-chunks\/(react(|\-dom)|@module\-federation|@swc|next|styled\-jsx)|webpack\-runtime)$/.test(chunkId)},
/******/ 				rootOutputDir: "",
/******/ 				initialConsumes: undefined,
/******/ 				bundlerRuntimeOptions: {}
/******/ 			};
/******/ 		}
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/create fake namespace object */
/******/ 	(() => {
/******/ 		var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);
/******/ 		var leafPrototypes;
/******/ 		// create a fake namespace object
/******/ 		// mode & 1: value is a module id, require it
/******/ 		// mode & 2: merge all properties of value into the ns
/******/ 		// mode & 4: return value when already ns object
/******/ 		// mode & 16: return value when it's Promise-like
/******/ 		// mode & 8|1: behave like require
/******/ 		__webpack_require__.t = function(value, mode) {
/******/ 			if(mode & 1) value = this(value);
/******/ 			if(mode & 8) return value;
/******/ 			if(typeof value === 'object' && value) {
/******/ 				if((mode & 4) && value.__esModule) return value;
/******/ 				if((mode & 16) && typeof value.then === 'function') return value;
/******/ 			}
/******/ 			var ns = Object.create(null);
/******/ 			__webpack_require__.r(ns);
/******/ 			var def = {};
/******/ 			leafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];
/******/ 			for(var current = mode & 2 && value; (typeof current == 'object' || typeof current == 'function') && !~leafPrototypes.indexOf(current); current = getProto(current)) {
/******/ 				Object.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));
/******/ 			}
/******/ 			def['default'] = () => (value);
/******/ 			__webpack_require__.d(ns, def);
/******/ 			return ns;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks and chunks that the entrypoint depends on
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames not based on template
/******/ 			if ({"vendor-chunks/next":1,"vendor-chunks/@swc":1,"vendor-chunks/@module-federation":1}[chunkId]) return "" + chunkId + ".js";
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + "-" + {"vendor-chunks/react":"28b23072ff70a8d0","vendor-chunks/react-dom":"f0fba393cb182cc5","vendor-chunks/styled-jsx":"aee6fd205f120c3d"}[chunkId] + ".js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/load script */
/******/ 	(() => {
/******/ 		var inProgress = {};
/******/ 		var dataWebpackPrefix = "dashboard:";
/******/ 		// loadScript function to load a script via script tag
/******/ 		__webpack_require__.l = (url, done, key, chunkId) => {
/******/ 			if(inProgress[url]) { inProgress[url].push(done); return; }
/******/ 			var script, needAttach;
/******/ 			if(key !== undefined) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				for(var i = 0; i < scripts.length; i++) {
/******/ 					var s = scripts[i];
/******/ 					if(s.getAttribute("src") == url || s.getAttribute("data-webpack") == dataWebpackPrefix + key) { script = s; break; }
/******/ 				}
/******/ 			}
/******/ 			if(!script) {
/******/ 				needAttach = true;
/******/ 				script = document.createElement('script');
/******/ 		
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.setAttribute("data-webpack", dataWebpackPrefix + key);
/******/ 		
/******/ 				script.src = url;
/******/ 			}
/******/ 			inProgress[url] = [done];
/******/ 			var onScriptComplete = (prev, event) => {
/******/ 				// avoid mem leaks in IE.
/******/ 				script.onerror = script.onload = null;
/******/ 				clearTimeout(timeout);
/******/ 				var doneFns = inProgress[url];
/******/ 				delete inProgress[url];
/******/ 				script.parentNode && script.parentNode.removeChild(script);
/******/ 				doneFns && doneFns.forEach((fn) => (fn(event)));
/******/ 				if(prev) return prev(event);
/******/ 			}
/******/ 			var timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);
/******/ 			script.onerror = onScriptComplete.bind(null, script.onerror);
/******/ 			script.onload = onScriptComplete.bind(null, script.onload);
/******/ 			needAttach && document.head.appendChild(script);
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/remotes loading */
/******/ 	(() => {
/******/ 		var chunkMapping = {
/******/ 			"webpack_container_remote_chart_app_ChartApp": [
/******/ 				"webpack/container/remote/chart_app/ChartApp"
/******/ 			],
/******/ 			"webpack_container_remote_profile_app_ProfileApp": [
/******/ 				"webpack/container/remote/profile_app/ProfileApp"
/******/ 			],
/******/ 			"webpack_container_remote_notifications_app_NotificationsApp": [
/******/ 				"webpack/container/remote/notifications_app/NotificationsApp"
/******/ 			]
/******/ 		};
/******/ 		var idToExternalAndNameMapping = {
/******/ 			"webpack/container/remote/chart_app/ChartApp": [
/******/ 				"default",
/******/ 				"./ChartApp",
/******/ 				"webpack/container/reference/chart_app"
/******/ 			],
/******/ 			"webpack/container/remote/profile_app/ProfileApp": [
/******/ 				"default",
/******/ 				"./ProfileApp",
/******/ 				"webpack/container/reference/profile_app"
/******/ 			],
/******/ 			"webpack/container/remote/notifications_app/NotificationsApp": [
/******/ 				"default",
/******/ 				"./NotificationsApp",
/******/ 				"webpack/container/reference/notifications_app"
/******/ 			]
/******/ 		};
/******/ 		var idToRemoteMap = {
/******/ 			"webpack/container/remote/chart_app/ChartApp": [
/******/ 				{
/******/ 					"externalType": "script",
/******/ 					"name": "chart_app",
/******/ 					"externalModuleId": "webpack/container/reference/chart_app"
/******/ 				}
/******/ 			],
/******/ 			"webpack/container/remote/profile_app/ProfileApp": [
/******/ 				{
/******/ 					"externalType": "script",
/******/ 					"name": "profile_app",
/******/ 					"externalModuleId": "webpack/container/reference/profile_app"
/******/ 				}
/******/ 			],
/******/ 			"webpack/container/remote/notifications_app/NotificationsApp": [
/******/ 				{
/******/ 					"externalType": "script",
/******/ 					"name": "notifications_app",
/******/ 					"externalModuleId": "webpack/container/reference/notifications_app"
/******/ 				}
/******/ 			]
/******/ 		};
/******/ 		__webpack_require__.federation.bundlerRuntimeOptions.remotes = {idToRemoteMap,chunkMapping, idToExternalAndNameMapping, webpackRequire:__webpack_require__};
/******/ 		__webpack_require__.f.remotes = (chunkId, promises) => {
/******/ 			__webpack_require__.federation.bundlerRuntime.remotes({idToRemoteMap,chunkMapping, idToExternalAndNameMapping, chunkId, promises, webpackRequire:__webpack_require__});
/******/ 		}
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/runtimeId */
/******/ 	(() => {
/******/ 		__webpack_require__.j = "webpack-runtime";
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/sharing */
/******/ 	(() => {
/******/ 		__webpack_require__.S = {};
/******/ 		var initPromises = {};
/******/ 		var initTokens = {};
/******/ 		__webpack_require__.I = (name, initScope) => {
/******/ 			if(!initScope) initScope = [];
/******/ 			// handling circular init calls
/******/ 			var initToken = initTokens[name];
/******/ 			if(!initToken) initToken = initTokens[name] = {};
/******/ 			if(initScope.indexOf(initToken) >= 0) return;
/******/ 			initScope.push(initToken);
/******/ 			// only runs once
/******/ 			if(initPromises[name]) return initPromises[name];
/******/ 			// creates a new share scope if needed
/******/ 			if(!__webpack_require__.o(__webpack_require__.S, name)) __webpack_require__.S[name] = {};
/******/ 			// runs all init snippets from all modules reachable
/******/ 			var scope = __webpack_require__.S[name];
/******/ 			var warn = (msg) => {
/******/ 				if (typeof console !== "undefined" && console.warn) console.warn(msg);
/******/ 			};
/******/ 			var uniqueName = "dashboard";
/******/ 			var register = (name, version, factory, eager) => {
/******/ 				var versions = scope[name] = scope[name] || {};
/******/ 				var activeVersion = versions[version];
/******/ 				if(!activeVersion || (!activeVersion.loaded && (!eager != !activeVersion.eager ? eager : uniqueName > activeVersion.from))) versions[version] = { get: factory, from: uniqueName, eager: !!eager };
/******/ 			};
/******/ 			var initExternal = (id) => {
/******/ 				var handleError = (err) => (warn("Initialization of sharing external failed: " + err));
/******/ 				try {
/******/ 					var module = __webpack_require__(id);
/******/ 					if(!module) return;
/******/ 					var initFn = (module) => (module && module.init && module.init(__webpack_require__.S[name], initScope))
/******/ 					if(module.then) return promises.push(module.then(initFn, handleError));
/******/ 					var initResult = initFn(module);
/******/ 					if(initResult && initResult.then) return promises.push(initResult['catch'](handleError));
/******/ 				} catch(err) { handleError(err); }
/******/ 			}
/******/ 			var promises = [];
/******/ 			switch(name) {
/******/ 				case "default": {
/******/ 					register("next/dynamic", "15.5.0", () => (Promise.all([__webpack_require__.e("vendor-chunks/next"), __webpack_require__.e("vendor-chunks/@swc"), __webpack_require__.e("webpack_sharing_consume_default_react_react-_bc8f2")]).then(() => (() => (__webpack_require__(/*! ./node_modules/next/dynamic.js */ "./node_modules/next/dynamic.js"))))));
/******/ 					register("next/head", "15.5.0", () => (Promise.all([__webpack_require__.e("vendor-chunks/next"), __webpack_require__.e("vendor-chunks/@swc"), __webpack_require__.e("webpack_sharing_consume_default_react_react-_bc8f0")]).then(() => (() => (__webpack_require__(/*! ./node_modules/next/head.js */ "./node_modules/next/head.js"))))));
/******/ 					register("next/image", "15.5.0", () => (Promise.all([__webpack_require__.e("vendor-chunks/next"), __webpack_require__.e("vendor-chunks/@swc"), __webpack_require__.e("webpack_sharing_consume_default_react-dom_react-dom-webpack_sharing_consume_default_react_rea-b25f762")]).then(() => (() => (__webpack_require__(/*! ./node_modules/next/image.js */ "./node_modules/next/image.js"))))));
/******/ 					register("next/link", "15.5.0", () => (Promise.all([__webpack_require__.e("vendor-chunks/next"), __webpack_require__.e("vendor-chunks/@swc"), __webpack_require__.e("webpack_sharing_consume_default_react_react-_bc8f1")]).then(() => (() => (__webpack_require__(/*! ./node_modules/next/link.js */ "./node_modules/next/link.js"))))));
/******/ 					register("next/router", "15.5.0", () => (Promise.all([__webpack_require__.e("vendor-chunks/next"), __webpack_require__.e("vendor-chunks/@swc"), __webpack_require__.e("webpack_sharing_consume_default_react-dom_react-dom-webpack_sharing_consume_default_react_rea-b25f760")]).then(() => (() => (__webpack_require__(/*! ./node_modules/next/router.js */ "./node_modules/next/router.js"))))));
/******/ 					register("next/script", "15.5.0", () => (Promise.all([__webpack_require__.e("vendor-chunks/next"), __webpack_require__.e("vendor-chunks/@swc"), __webpack_require__.e("webpack_sharing_consume_default_react-dom_react-dom-webpack_sharing_consume_default_react_rea-b25f761")]).then(() => (() => (__webpack_require__(/*! ./node_modules/next/script.js */ "./node_modules/next/script.js"))))));
/******/ 					register("react-dom", "19.1.0", () => (Promise.all([__webpack_require__.e("vendor-chunks/react-dom"), __webpack_require__.e("webpack_sharing_consume_default_react_react-_2f6e")]).then(() => (() => (__webpack_require__(/*! ./node_modules/react-dom/index.js */ "./node_modules/react-dom/index.js"))))));
/******/ 					register("react/jsx-dev-runtime", "19.1.0", () => (Promise.all([__webpack_require__.e("vendor-chunks/react"), __webpack_require__.e("webpack_sharing_consume_default_react_react-_7ca41")]).then(() => (() => (__webpack_require__(/*! ./node_modules/react/jsx-dev-runtime.js */ "./node_modules/react/jsx-dev-runtime.js"))))));
/******/ 					register("react/jsx-runtime", "19.1.0", () => (Promise.all([__webpack_require__.e("vendor-chunks/react"), __webpack_require__.e("webpack_sharing_consume_default_react_react-_7ca40")]).then(() => (() => (__webpack_require__(/*! ./node_modules/react/jsx-runtime.js */ "./node_modules/react/jsx-runtime.js"))))));
/******/ 					register("react", "19.1.0", () => (__webpack_require__.e("vendor-chunks/react").then(() => (() => (__webpack_require__(/*! ./node_modules/react/index.js */ "./node_modules/react/index.js"))))));
/******/ 					register("styled-jsx", "5.1.6", () => (Promise.all([__webpack_require__.e("vendor-chunks/next"), __webpack_require__.e("vendor-chunks/styled-jsx"), __webpack_require__.e("webpack_sharing_consume_default_react_react-_bce7")]).then(() => (() => (__webpack_require__(/*! ./node_modules/styled-jsx/index.js */ "./node_modules/styled-jsx/index.js"))))));
/******/ 					initExternal("webpack/container/reference/chart_app");
/******/ 					initExternal("webpack/container/reference/profile_app");
/******/ 					initExternal("webpack/container/reference/notifications_app");
/******/ 				}
/******/ 				break;
/******/ 			}
/******/ 			if(!promises.length) return initPromises[name] = 1;
/******/ 			return initPromises[name] = Promise.all(promises).then(() => (initPromises[name] = 1));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/startup entrypoint */
/******/ 	(() => {
/******/ 		__webpack_require__.X = (result, chunkIds, fn) => {
/******/ 			// arguments: chunkIds, moduleId are deprecated
/******/ 			var moduleId = chunkIds;
/******/ 			if(!fn) chunkIds = result, fn = () => (__webpack_require__(__webpack_require__.s = moduleId));
/******/ 			return Promise.all(chunkIds.map(__webpack_require__.e, __webpack_require__)).then(() => {
/******/ 				var r = fn();
/******/ 				return r === undefined ? result : r;
/******/ 			})
/******/ 		}
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/startup entrypoint */
/******/ 	(() => {
/******/ 		__webpack_require__.X = (result, chunkIds, fn) => {
/******/ 			// arguments: chunkIds, moduleId are deprecated
/******/ 			var moduleId = chunkIds;
/******/ 			if(!fn) chunkIds = result, fn = () => (__webpack_require__(__webpack_require__.s = moduleId));
/******/ 			return Promise.all(chunkIds.map(__webpack_require__.e, __webpack_require__)).then(() => {
/******/ 				var r = fn();
/******/ 				return r === undefined ? result : r;
/******/ 			})
/******/ 		}
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/sharing */
/******/ 	(() => {
/******/ 		__webpack_require__.federation.initOptions.shared = {	"next/dynamic": [{	version: "15.5.0",
/******/ 				get: () => (Promise.all([__webpack_require__.e("vendor-chunks/next"), __webpack_require__.e("vendor-chunks/@swc"), __webpack_require__.e("webpack_sharing_consume_default_react_react-_bc8f2")]).then(() => (() => (__webpack_require__(/*! ./node_modules/next/dynamic.js */ "./node_modules/next/dynamic.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"singleton":true,"layer":null}},],	"next/head": [{	version: "15.5.0",
/******/ 				get: () => (Promise.all([__webpack_require__.e("vendor-chunks/next"), __webpack_require__.e("vendor-chunks/@swc"), __webpack_require__.e("webpack_sharing_consume_default_react_react-_bc8f0")]).then(() => (() => (__webpack_require__(/*! ./node_modules/next/head.js */ "./node_modules/next/head.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"singleton":true,"layer":null}},],	"next/image": [{	version: "15.5.0",
/******/ 				get: () => (Promise.all([__webpack_require__.e("vendor-chunks/next"), __webpack_require__.e("vendor-chunks/@swc"), __webpack_require__.e("webpack_sharing_consume_default_react-dom_react-dom-webpack_sharing_consume_default_react_rea-b25f762")]).then(() => (() => (__webpack_require__(/*! ./node_modules/next/image.js */ "./node_modules/next/image.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"singleton":true,"layer":null}},],	"next/link": [{	version: "15.5.0",
/******/ 				get: () => (Promise.all([__webpack_require__.e("vendor-chunks/next"), __webpack_require__.e("vendor-chunks/@swc"), __webpack_require__.e("webpack_sharing_consume_default_react_react-_bc8f1")]).then(() => (() => (__webpack_require__(/*! ./node_modules/next/link.js */ "./node_modules/next/link.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"singleton":true,"layer":null}},],	"next/router": [{	version: "15.5.0",
/******/ 				get: () => (Promise.all([__webpack_require__.e("vendor-chunks/next"), __webpack_require__.e("vendor-chunks/@swc"), __webpack_require__.e("webpack_sharing_consume_default_react-dom_react-dom-webpack_sharing_consume_default_react_rea-b25f760")]).then(() => (() => (__webpack_require__(/*! ./node_modules/next/router.js */ "./node_modules/next/router.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"singleton":true,"layer":null}},],	"next/script": [{	version: "15.5.0",
/******/ 				get: () => (Promise.all([__webpack_require__.e("vendor-chunks/next"), __webpack_require__.e("vendor-chunks/@swc"), __webpack_require__.e("webpack_sharing_consume_default_react-dom_react-dom-webpack_sharing_consume_default_react_rea-b25f761")]).then(() => (() => (__webpack_require__(/*! ./node_modules/next/script.js */ "./node_modules/next/script.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"singleton":true,"layer":null}},],	"react-dom": [{	version: "19.1.0",
/******/ 				get: () => (Promise.all([__webpack_require__.e("vendor-chunks/react-dom"), __webpack_require__.e("webpack_sharing_consume_default_react_react-_2f6e")]).then(() => (() => (__webpack_require__(/*! ./node_modules/react-dom/index.js */ "./node_modules/react-dom/index.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"singleton":true,"layer":null}},],	"react/jsx-dev-runtime": [{	version: "19.1.0",
/******/ 				get: () => (Promise.all([__webpack_require__.e("vendor-chunks/react"), __webpack_require__.e("webpack_sharing_consume_default_react_react-_7ca41")]).then(() => (() => (__webpack_require__(/*! ./node_modules/react/jsx-dev-runtime.js */ "./node_modules/react/jsx-dev-runtime.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"singleton":true,"layer":null}},],	"react/jsx-runtime": [{	version: "19.1.0",
/******/ 				get: () => (Promise.all([__webpack_require__.e("vendor-chunks/react"), __webpack_require__.e("webpack_sharing_consume_default_react_react-_7ca40")]).then(() => (() => (__webpack_require__(/*! ./node_modules/react/jsx-runtime.js */ "./node_modules/react/jsx-runtime.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":false,"singleton":true,"layer":null}},],	"react": [{	version: "19.1.0",
/******/ 				get: () => (__webpack_require__.e("vendor-chunks/react").then(() => (() => (__webpack_require__(/*! ./node_modules/react/index.js */ "./node_modules/react/index.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"singleton":true,"layer":null}},],	"styled-jsx": [{	version: "5.1.6",
/******/ 				get: () => (Promise.all([__webpack_require__.e("vendor-chunks/next"), __webpack_require__.e("vendor-chunks/styled-jsx"), __webpack_require__.e("webpack_sharing_consume_default_react_react-_bce7")]).then(() => (() => (__webpack_require__(/*! ./node_modules/styled-jsx/index.js */ "./node_modules/styled-jsx/index.js"))))),
/******/ 				scope: ["default"],
/******/ 				shareConfig: {"eager":false,"requiredVersion":"^5.1.6","singleton":true,"layer":null}},],}
/******/ 		__webpack_require__.S = {};
/******/ 		var initPromises = {};
/******/ 		var initTokens = {};
/******/ 		__webpack_require__.I = (name, initScope) => {
/******/ 			return __webpack_require__.federation.bundlerRuntime.I({	shareScopeName: name,
/******/ 				webpackRequire: __webpack_require__,
/******/ 				initPromises: initPromises,
/******/ 				initTokens: initTokens,
/******/ 				initScope: initScope,
/******/ 			})
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/consumes */
/******/ 	(() => {
/******/ 		var installedModules = {};
/******/ 		var moduleToHandlerMapping = {
/******/ 			"webpack/sharing/consume/default/react/jsx-runtime/react/jsx-runtime": {
/******/ 				getter: () => (Promise.all([__webpack_require__.e("vendor-chunks/react"), __webpack_require__.e("webpack_sharing_consume_default_react_react-_7ca40")]).then(() => (() => (__webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": false,
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "react/jsx-runtime",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/react/react?bc8f": {
/******/ 				getter: () => (__webpack_require__.e("vendor-chunks/react").then(() => (() => (__webpack_require__(/*! react */ "./node_modules/react/index.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": "^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0",
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "react",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/react/jsx-dev-runtime/react/jsx-dev-runtime": {
/******/ 				getter: () => (Promise.all([__webpack_require__.e("vendor-chunks/react"), __webpack_require__.e("webpack_sharing_consume_default_react_react-_7ca41")]).then(() => (() => (__webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/react/jsx-dev-runtime.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": false,
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "react/jsx-dev-runtime",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/react/react?56c3": {
/******/ 				getter: () => (__webpack_require__.e("vendor-chunks/react").then(() => (() => (__webpack_require__(/*! react */ "./node_modules/react/index.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": "19.1.0",
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "react",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/next/dynamic/next/dynamic?de65": {
/******/ 				getter: () => (Promise.all([__webpack_require__.e("vendor-chunks/next"), __webpack_require__.e("vendor-chunks/@swc")]).then(() => (() => (__webpack_require__(/*! next/dynamic */ "./node_modules/next/dynamic.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": "15.5.0",
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "next/dynamic",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/react/react?7ca4": {
/******/ 				getter: () => (__webpack_require__.e("vendor-chunks/react").then(() => (() => (__webpack_require__(/*! react */ "./node_modules/react/index.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": false,
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "react",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/react-dom/react-dom": {
/******/ 				getter: () => (Promise.all([__webpack_require__.e("vendor-chunks/react-dom"), __webpack_require__.e("webpack_sharing_consume_default_react_react-_2f6e")]).then(() => (() => (__webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": "^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0",
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "react-dom",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/react/react?2f6e": {
/******/ 				getter: () => (__webpack_require__.e("vendor-chunks/react").then(() => (() => (__webpack_require__(/*! react */ "./node_modules/react/index.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": "^19.1.0",
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "react",
/******/ 			},
/******/ 			"webpack/sharing/consume/default/react/react?bce7": {
/******/ 				getter: () => (__webpack_require__.e("vendor-chunks/react").then(() => (() => (__webpack_require__(/*! react */ "./node_modules/react/index.js"))))),
/******/ 				shareInfo: {
/******/ 					shareConfig: {
/******/ 					  "fixedDependencies": false,
/******/ 					  "requiredVersion": ">= 16.8.0 || 17.x.x || ^18.0.0-0 || ^19.0.0-0",
/******/ 					  "strictVersion": false,
/******/ 					  "singleton": true,
/******/ 					  "eager": false
/******/ 					},
/******/ 					scope: ["default"],
/******/ 				},
/******/ 				shareKey: "react",
/******/ 			}
/******/ 		};
/******/ 		var initialConsumes = ["webpack/sharing/consume/default/react/jsx-runtime/react/jsx-runtime","webpack/sharing/consume/default/react/react?bc8f","webpack/sharing/consume/default/react/jsx-runtime/react/jsx-runtime","webpack/sharing/consume/default/react/react?bc8f","webpack/sharing/consume/default/react/jsx-runtime/react/jsx-runtime","webpack/sharing/consume/default/react/react?bc8f","webpack/sharing/consume/default/react/jsx-runtime/react/jsx-runtime","webpack/sharing/consume/default/react/react?bc8f","webpack/sharing/consume/default/react/jsx-dev-runtime/react/jsx-dev-runtime","webpack/sharing/consume/default/react/react?56c3","webpack/sharing/consume/default/next/dynamic/next/dynamic?de65"];
/******/ 		__webpack_require__.federation.installInitialConsumes = () => (__webpack_require__.federation.bundlerRuntime.installInitialConsumes({
/******/ 			initialConsumes: initialConsumes,
/******/ 			installedModules:installedModules,
/******/ 			moduleToHandlerMapping:moduleToHandlerMapping,
/******/ 			webpackRequire: __webpack_require__
/******/ 		}))
/******/ 		var chunkMapping = {
/******/ 			"pages/_app": [
/******/ 				"webpack/sharing/consume/default/react/jsx-runtime/react/jsx-runtime",
/******/ 				"webpack/sharing/consume/default/react/react?bc8f"
/******/ 			],
/******/ 			"pages/_error": [
/******/ 				"webpack/sharing/consume/default/react/jsx-runtime/react/jsx-runtime",
/******/ 				"webpack/sharing/consume/default/react/react?bc8f"
/******/ 			],
/******/ 			"pages/_document": [
/******/ 				"webpack/sharing/consume/default/react/jsx-runtime/react/jsx-runtime",
/******/ 				"webpack/sharing/consume/default/react/react?bc8f"
/******/ 			],
/******/ 			"pages/index": [
/******/ 				"webpack/sharing/consume/default/react/jsx-runtime/react/jsx-runtime",
/******/ 				"webpack/sharing/consume/default/react/react?bc8f",
/******/ 				"webpack/sharing/consume/default/react/jsx-dev-runtime/react/jsx-dev-runtime",
/******/ 				"webpack/sharing/consume/default/react/react?56c3",
/******/ 				"webpack/sharing/consume/default/next/dynamic/next/dynamic?de65"
/******/ 			],
/******/ 			"webpack_sharing_consume_default_react_react-_7ca40": [
/******/ 				"webpack/sharing/consume/default/react/react?7ca4"
/******/ 			],
/******/ 			"webpack_sharing_consume_default_react_react-_bc8f2": [
/******/ 				"webpack/sharing/consume/default/react/react?bc8f"
/******/ 			],
/******/ 			"webpack_sharing_consume_default_react_react-_bc8f0": [
/******/ 				"webpack/sharing/consume/default/react/react?bc8f"
/******/ 			],
/******/ 			"webpack_sharing_consume_default_react-dom_react-dom-webpack_sharing_consume_default_react_rea-b25f762": [
/******/ 				"webpack/sharing/consume/default/react-dom/react-dom",
/******/ 				"webpack/sharing/consume/default/react/react?bc8f"
/******/ 			],
/******/ 			"webpack_sharing_consume_default_react_react-_bc8f1": [
/******/ 				"webpack/sharing/consume/default/react/react?bc8f"
/******/ 			],
/******/ 			"webpack_sharing_consume_default_react-dom_react-dom-webpack_sharing_consume_default_react_rea-b25f760": [
/******/ 				"webpack/sharing/consume/default/react-dom/react-dom",
/******/ 				"webpack/sharing/consume/default/react/react?bc8f"
/******/ 			],
/******/ 			"webpack_sharing_consume_default_react-dom_react-dom-webpack_sharing_consume_default_react_rea-b25f761": [
/******/ 				"webpack/sharing/consume/default/react-dom/react-dom",
/******/ 				"webpack/sharing/consume/default/react/react?bc8f"
/******/ 			],
/******/ 			"webpack_sharing_consume_default_react_react-_2f6e": [
/******/ 				"webpack/sharing/consume/default/react/react?2f6e"
/******/ 			],
/******/ 			"webpack_sharing_consume_default_react_react-_7ca41": [
/******/ 				"webpack/sharing/consume/default/react/react?7ca4"
/******/ 			],
/******/ 			"webpack_sharing_consume_default_react_react-_bce7": [
/******/ 				"webpack/sharing/consume/default/react/react?bce7"
/******/ 			]
/******/ 		};
/******/ 		__webpack_require__.f.consumes = (chunkId, promises) => {
/******/ 			__webpack_require__.federation.bundlerRuntime.consumes({
/******/ 			chunkMapping: chunkMapping,
/******/ 			installedModules: installedModules,
/******/ 			chunkId: chunkId,
/******/ 			moduleToHandlerMapping: moduleToHandlerMapping,
/******/ 			promises: promises,
/******/ 			webpackRequire:__webpack_require__
/******/ 			});
/******/ 		}
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/embed/federation */
/******/ 	(() => {
/******/ 		var prevStartup = __webpack_require__.x;
/******/ 		var hasRun = false;
/******/ 		__webpack_require__.x = () => {
/******/ 			if (!hasRun) {
/******/ 			  hasRun = true;
/******/ 			  __webpack_require__(/*! ./node_modules/.federation/entry.38029643c390fa88e608275429565ecd.js */ "./node_modules/.federation/entry.38029643c390fa88e608275429565ecd.js");
/******/ 			}
/******/ 			if (typeof prevStartup === 'function') {
/******/ 			  return prevStartup();
/******/ 			} else {
/******/ 			  console.warn('[Module Federation] prevStartup is not a function, skipping startup execution');
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/readFile chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded chunks
/******/ 		// "0" means "already loaded", Promise means loading
/******/ 		var installedChunks = {
/******/ 			"webpack-runtime": 0,
/******/ 			"vendor-chunks/federation": 0
/******/ 		};
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		var installChunk = (chunk) => {
/******/ 			var moreModules = chunk.modules, chunkIds = chunk.ids, runtime = chunk.runtime;
/******/ 			for(var moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) runtime(__webpack_require__);
/******/ 			for(var i = 0; i < chunkIds.length; i++) {
/******/ 				if(installedChunks[chunkIds[i]]) {
/******/ 					installedChunks[chunkIds[i]][0]();
/******/ 				}
/******/ 				installedChunks[chunkIds[i]] = 0;
/******/ 			}
/******/ 		
/******/ 		};
/******/ 		
/******/ 		// ReadFile + VM.run chunk loading for javascript
/******/ 		__webpack_require__.f.readFileVm = function(chunkId, promises) {
/******/ 		
/******/ 			var installedChunkData = installedChunks[chunkId];
/******/ 			if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 				// array of [resolve, reject, promise] means "currently loading"
/******/ 				if(installedChunkData) {
/******/ 					promises.push(installedChunkData[2]);
/******/ 				} else {
/******/ 					if(/^(pages\/(_(app|document|error)|index)|vendor\-chunks\/(react(|\-dom)|@module\-federation|@swc|next|styled\-jsx)|webpack\-runtime)$/.test(chunkId)) {
/******/ 						// load the chunk and return promise to it
/******/ 						var promise = new Promise(function(resolve, reject) {
/******/ 							installedChunkData = installedChunks[chunkId] = [resolve, reject];
/******/ 							var filename = require("node:path").join(__dirname, "" + __webpack_require__.u(chunkId));
/******/ 							require("node:fs").readFile(filename, 'utf-8', function(err, content) {
/******/ 								if(err) return reject(err);
/******/ 								var chunk = {};
/******/ 								require("node:vm").runInThisContext('(function(exports, require, __dirname, __filename) {' + content + '\n})', filename)(chunk, require, require("node:path").dirname(filename), filename);
/******/ 								installChunk(chunk);
/******/ 							});
/******/ 						});
/******/ 						promises.push(installedChunkData[2] = promise);
/******/ 					} else installedChunks[chunkId] = 0;
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		module.exports = __webpack_require__;
/******/ 		__webpack_require__.C = installChunk;
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// module cache are used so entry inlining is disabled
/******/ 	
/******/ 	// Custom hook: appended startup call because none was added automatically
/******/ 	__webpack_require__.x();
/******/ 	
/******/ })()

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
;